
SHDRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003132  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015c  00800060  00003132  000031c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  008001bc  008001bc  00003322  2**0
                  ALLOC
  3 .stab         0000294c  00000000  00000000  00003324  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011b7  00000000  00000000  00005c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006e27  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00006fc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  000071b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  000095c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000a93a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000bb14  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000bcd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000bfc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c995  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__vector_6>
      1c:	0c 94 10 14 	jmp	0x2820	; 0x2820 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <__vector_9>
      28:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__vector_10>
      2c:	0c 94 bc 12 	jmp	0x2578	; 0x2578 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e3       	ldi	r30, 0x32	; 50
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3b       	cpi	r26, 0xBC	; 188
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac eb       	ldi	r26, 0xBC	; 188
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3d       	cpi	r26, 0xD2	; 210
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <main>
      8a:	0c 94 97 18 	jmp	0x312e	; 0x312e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 60 18 	jmp	0x30c0	; 0x30c0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 eb       	ldi	r26, 0xB3	; 179
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7c 18 	jmp	0x30f8	; 0x30f8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6c 18 	jmp	0x30d8	; 0x30d8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 88 18 	jmp	0x3110	; 0x3110 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6c 18 	jmp	0x30d8	; 0x30d8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 88 18 	jmp	0x3110	; 0x3110 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 60 18 	jmp	0x30c0	; 0x30c0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 eb       	ldi	r24, 0xB3	; 179
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7c 18 	jmp	0x30f8	; 0x30f8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 68 18 	jmp	0x30d0	; 0x30d0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 eb       	ldi	r22, 0xB3	; 179
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 84 18 	jmp	0x3108	; 0x3108 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 6c 18 	jmp	0x30d8	; 0x30d8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 88 18 	jmp	0x3110	; 0x3110 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 6c 18 	jmp	0x30d8	; 0x30d8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 88 18 	jmp	0x3110	; 0x3110 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 6c 18 	jmp	0x30d8	; 0x30d8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 88 18 	jmp	0x3110	; 0x3110 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 69 18 	jmp	0x30d2	; 0x30d2 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 85 18 	jmp	0x310a	; 0x310a <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 70 18 	jmp	0x30e0	; 0x30e0 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 8c 18 	jmp	0x3118	; 0x3118 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e5 54       	subi	r30, 0x45	; 69
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <ADC_voidInit>:
#define ADC_AREF		1
#define ADC_2_56_V		2

#include "ADC.h"

void ADC_voidInit(u8 Copy_u8Prescaler){
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	0f 92       	push	r0
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	89 83       	std	Y+1, r24	; 0x01

	/* Enable ADC */
	SET_BIT(ADCSRA, ADEN);
     e04:	a6 e2       	ldi	r26, 0x26	; 38
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e6 e2       	ldi	r30, 0x26	; 38
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	80 68       	ori	r24, 0x80	; 128
     e10:	8c 93       	st	X, r24

	/* Select Vref */
#if ADC_REF_VOLT == ADC_AVCC
	SET_BIT(ADMUX, REFS0);
     e12:	a7 e2       	ldi	r26, 0x27	; 39
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e7 e2       	ldi	r30, 0x27	; 39
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	80 64       	ori	r24, 0x40	; 64
     e1e:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, REFS1);
     e20:	a7 e2       	ldi	r26, 0x27	; 39
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e7 e2       	ldi	r30, 0x27	; 39
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	8f 77       	andi	r24, 0x7F	; 127
     e2c:	8c 93       	st	X, r24
	SET_BIT(ADMUX, REFS0);
	SET_BIT(ADMUX, REFS1);
#endif

	/* select right adjust */
	CLR_BIT(ADMUX, ADLAR);
     e2e:	a7 e2       	ldi	r26, 0x27	; 39
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e7 e2       	ldi	r30, 0x27	; 39
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	8f 7d       	andi	r24, 0xDF	; 223
     e3a:	8c 93       	st	X, r24

	/* prescaler */
	ADCSRA &= 0b11111000;
     e3c:	a6 e2       	ldi	r26, 0x26	; 38
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e6 e2       	ldi	r30, 0x26	; 38
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	88 7f       	andi	r24, 0xF8	; 248
     e48:	8c 93       	st	X, r24
	ADCSRA |= Copy_u8Prescaler; // 0b00000110
     e4a:	a6 e2       	ldi	r26, 0x26	; 38
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e6 e2       	ldi	r30, 0x26	; 38
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	90 81       	ld	r25, Z
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	89 2b       	or	r24, r25
     e58:	8c 93       	st	X, r24

}
     e5a:	0f 90       	pop	r0
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	08 95       	ret

00000e62 <ADC_u16GetDigitalValue>:


u16  ADC_u16GetDigitalValue(u8 Copy_u8Channel){
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	0f 92       	push	r0
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
     e6c:	89 83       	std	Y+1, r24	; 0x01

	/* select Channel */
	ADMUX &= 0b11100000;
     e6e:	a7 e2       	ldi	r26, 0x27	; 39
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e7 e2       	ldi	r30, 0x27	; 39
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	80 7e       	andi	r24, 0xE0	; 224
     e7a:	8c 93       	st	X, r24
	ADMUX |= Copy_u8Channel;
     e7c:	a7 e2       	ldi	r26, 0x27	; 39
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e7 e2       	ldi	r30, 0x27	; 39
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	90 81       	ld	r25, Z
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	89 2b       	or	r24, r25
     e8a:	8c 93       	st	X, r24

	/*  Start Conversion */
	SET_BIT(ADCSRA, ADSC);
     e8c:	a6 e2       	ldi	r26, 0x26	; 38
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e6 e2       	ldi	r30, 0x26	; 38
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	80 64       	ori	r24, 0x40	; 64
     e98:	8c 93       	st	X, r24

	/* wait flag = 1 */
	while(GET_BIT(ADCSRA, ADIF) == 0);
     e9a:	e6 e2       	ldi	r30, 0x26	; 38
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	82 95       	swap	r24
     ea2:	8f 70       	andi	r24, 0x0F	; 15
     ea4:	88 2f       	mov	r24, r24
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	81 70       	andi	r24, 0x01	; 1
     eaa:	90 70       	andi	r25, 0x00	; 0
     eac:	00 97       	sbiw	r24, 0x00	; 0
     eae:	a9 f3       	breq	.-22     	; 0xe9a <ADC_u16GetDigitalValue+0x38>

	/* clear flag */
	CLR_BIT(ADCSRA, ADIF);
     eb0:	a6 e2       	ldi	r26, 0x26	; 38
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e6 e2       	ldi	r30, 0x26	; 38
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	8f 7e       	andi	r24, 0xEF	; 239
     ebc:	8c 93       	st	X, r24

	/* read ADC value */
	return ADC;
     ebe:	e4 e2       	ldi	r30, 0x24	; 36
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	91 81       	ldd	r25, Z+1	; 0x01

}
     ec6:	0f 90       	pop	r0
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	08 95       	ret

00000ece <ADC_voidDisable>:


void ADC_voidDisable(void){
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62

	/* Disable ADC */
	CLR_BIT(ADCSRA, ADEN);
     ed6:	a6 e2       	ldi	r26, 0x26	; 38
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e6 e2       	ldi	r30, 0x26	; 38
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	8f 77       	andi	r24, 0x7F	; 127
     ee2:	8c 93       	st	X, r24

}
     ee4:	cf 91       	pop	r28
     ee6:	df 91       	pop	r29
     ee8:	08 95       	ret

00000eea <DIO_voidSetPinDirection>:
#include <avr/io.h>
#include "STD_Types.h"
#include "BIT_Math.h"
#include "DIO.h"

void DIO_voidSetPinDirection (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction){ 		//DDRA,B,C,D
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	27 97       	sbiw	r28, 0x07	; 7
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	89 83       	std	Y+1, r24	; 0x01
     f00:	6a 83       	std	Y+2, r22	; 0x02
     f02:	4b 83       	std	Y+3, r20	; 0x03
	if( Copy_u8Pin <8){
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	88 30       	cpi	r24, 0x08	; 8
     f08:	08 f0       	brcs	.+2      	; 0xf0c <DIO_voidSetPinDirection+0x22>
     f0a:	ea c0       	rjmp	.+468    	; 0x10e0 <DIO_voidSetPinDirection+0x1f6>
		
		if(Copy_u8Direction == DIO_OUTPUT){
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	81 30       	cpi	r24, 0x01	; 1
     f10:	09 f0       	breq	.+2      	; 0xf14 <DIO_voidSetPinDirection+0x2a>
     f12:	6f c0       	rjmp	.+222    	; 0xff2 <DIO_voidSetPinDirection+0x108>
			switch(Copy_u8Port)
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	3f 83       	std	Y+7, r19	; 0x07
     f1c:	2e 83       	std	Y+6, r18	; 0x06
     f1e:	8e 81       	ldd	r24, Y+6	; 0x06
     f20:	9f 81       	ldd	r25, Y+7	; 0x07
     f22:	81 30       	cpi	r24, 0x01	; 1
     f24:	91 05       	cpc	r25, r1
     f26:	49 f1       	breq	.+82     	; 0xf7a <DIO_voidSetPinDirection+0x90>
     f28:	2e 81       	ldd	r18, Y+6	; 0x06
     f2a:	3f 81       	ldd	r19, Y+7	; 0x07
     f2c:	22 30       	cpi	r18, 0x02	; 2
     f2e:	31 05       	cpc	r19, r1
     f30:	2c f4       	brge	.+10     	; 0xf3c <DIO_voidSetPinDirection+0x52>
     f32:	8e 81       	ldd	r24, Y+6	; 0x06
     f34:	9f 81       	ldd	r25, Y+7	; 0x07
     f36:	00 97       	sbiw	r24, 0x00	; 0
     f38:	61 f0       	breq	.+24     	; 0xf52 <DIO_voidSetPinDirection+0x68>
     f3a:	d2 c0       	rjmp	.+420    	; 0x10e0 <DIO_voidSetPinDirection+0x1f6>
     f3c:	2e 81       	ldd	r18, Y+6	; 0x06
     f3e:	3f 81       	ldd	r19, Y+7	; 0x07
     f40:	22 30       	cpi	r18, 0x02	; 2
     f42:	31 05       	cpc	r19, r1
     f44:	71 f1       	breq	.+92     	; 0xfa2 <DIO_voidSetPinDirection+0xb8>
     f46:	8e 81       	ldd	r24, Y+6	; 0x06
     f48:	9f 81       	ldd	r25, Y+7	; 0x07
     f4a:	83 30       	cpi	r24, 0x03	; 3
     f4c:	91 05       	cpc	r25, r1
     f4e:	e9 f1       	breq	.+122    	; 0xfca <DIO_voidSetPinDirection+0xe0>
     f50:	c7 c0       	rjmp	.+398    	; 0x10e0 <DIO_voidSetPinDirection+0x1f6>
			{
				case DIO_PORTA :	SET_BIT(DDRA, Copy_u8Pin); break;
     f52:	aa e3       	ldi	r26, 0x3A	; 58
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	ea e3       	ldi	r30, 0x3A	; 58
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	48 2f       	mov	r20, r24
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	02 2e       	mov	r0, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <DIO_voidSetPinDirection+0x86>
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	0a 94       	dec	r0
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <DIO_voidSetPinDirection+0x82>
     f74:	84 2b       	or	r24, r20
     f76:	8c 93       	st	X, r24
     f78:	b3 c0       	rjmp	.+358    	; 0x10e0 <DIO_voidSetPinDirection+0x1f6>
				case DIO_PORTB :	SET_BIT(DDRB, Copy_u8Pin); break;
     f7a:	a7 e3       	ldi	r26, 0x37	; 55
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e7 e3       	ldi	r30, 0x37	; 55
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	48 2f       	mov	r20, r24
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 2e       	mov	r0, r18
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <DIO_voidSetPinDirection+0xae>
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	0a 94       	dec	r0
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <DIO_voidSetPinDirection+0xaa>
     f9c:	84 2b       	or	r24, r20
     f9e:	8c 93       	st	X, r24
     fa0:	9f c0       	rjmp	.+318    	; 0x10e0 <DIO_voidSetPinDirection+0x1f6>
				case DIO_PORTC :	SET_BIT(DDRC, Copy_u8Pin); break;
     fa2:	a4 e3       	ldi	r26, 0x34	; 52
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e4 e3       	ldi	r30, 0x34	; 52
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 2e       	mov	r0, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <DIO_voidSetPinDirection+0xd6>
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	0a 94       	dec	r0
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <DIO_voidSetPinDirection+0xd2>
     fc4:	84 2b       	or	r24, r20
     fc6:	8c 93       	st	X, r24
     fc8:	8b c0       	rjmp	.+278    	; 0x10e0 <DIO_voidSetPinDirection+0x1f6>
				case DIO_PORTD :	SET_BIT(DDRD, Copy_u8Pin); break;
     fca:	a1 e3       	ldi	r26, 0x31	; 49
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e1 e3       	ldi	r30, 0x31	; 49
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	48 2f       	mov	r20, r24
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	02 2e       	mov	r0, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <DIO_voidSetPinDirection+0xfe>
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	0a 94       	dec	r0
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <DIO_voidSetPinDirection+0xfa>
     fec:	84 2b       	or	r24, r20
     fee:	8c 93       	st	X, r24
     ff0:	77 c0       	rjmp	.+238    	; 0x10e0 <DIO_voidSetPinDirection+0x1f6>
				default		   :		/* do nothing */	   break;
			}
			
		}
		else if(Copy_u8Direction == DIO_INPUT){
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 23       	and	r24, r24
     ff6:	09 f0       	breq	.+2      	; 0xffa <DIO_voidSetPinDirection+0x110>
     ff8:	73 c0       	rjmp	.+230    	; 0x10e0 <DIO_voidSetPinDirection+0x1f6>
			switch(Copy_u8Port)
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	3d 83       	std	Y+5, r19	; 0x05
    1002:	2c 83       	std	Y+4, r18	; 0x04
    1004:	8c 81       	ldd	r24, Y+4	; 0x04
    1006:	9d 81       	ldd	r25, Y+5	; 0x05
    1008:	81 30       	cpi	r24, 0x01	; 1
    100a:	91 05       	cpc	r25, r1
    100c:	59 f1       	breq	.+86     	; 0x1064 <DIO_voidSetPinDirection+0x17a>
    100e:	2c 81       	ldd	r18, Y+4	; 0x04
    1010:	3d 81       	ldd	r19, Y+5	; 0x05
    1012:	22 30       	cpi	r18, 0x02	; 2
    1014:	31 05       	cpc	r19, r1
    1016:	2c f4       	brge	.+10     	; 0x1022 <DIO_voidSetPinDirection+0x138>
    1018:	8c 81       	ldd	r24, Y+4	; 0x04
    101a:	9d 81       	ldd	r25, Y+5	; 0x05
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	69 f0       	breq	.+26     	; 0x103a <DIO_voidSetPinDirection+0x150>
    1020:	5f c0       	rjmp	.+190    	; 0x10e0 <DIO_voidSetPinDirection+0x1f6>
    1022:	2c 81       	ldd	r18, Y+4	; 0x04
    1024:	3d 81       	ldd	r19, Y+5	; 0x05
    1026:	22 30       	cpi	r18, 0x02	; 2
    1028:	31 05       	cpc	r19, r1
    102a:	89 f1       	breq	.+98     	; 0x108e <DIO_voidSetPinDirection+0x1a4>
    102c:	8c 81       	ldd	r24, Y+4	; 0x04
    102e:	9d 81       	ldd	r25, Y+5	; 0x05
    1030:	83 30       	cpi	r24, 0x03	; 3
    1032:	91 05       	cpc	r25, r1
    1034:	09 f4       	brne	.+2      	; 0x1038 <DIO_voidSetPinDirection+0x14e>
    1036:	40 c0       	rjmp	.+128    	; 0x10b8 <DIO_voidSetPinDirection+0x1ce>
    1038:	53 c0       	rjmp	.+166    	; 0x10e0 <DIO_voidSetPinDirection+0x1f6>
			{
				case DIO_PORTA :	CLR_BIT(DDRA, Copy_u8Pin); break;
    103a:	aa e3       	ldi	r26, 0x3A	; 58
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	ea e3       	ldi	r30, 0x3A	; 58
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	48 2f       	mov	r20, r24
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	02 2e       	mov	r0, r18
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <DIO_voidSetPinDirection+0x16e>
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	0a 94       	dec	r0
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <DIO_voidSetPinDirection+0x16a>
    105c:	80 95       	com	r24
    105e:	84 23       	and	r24, r20
    1060:	8c 93       	st	X, r24
    1062:	3e c0       	rjmp	.+124    	; 0x10e0 <DIO_voidSetPinDirection+0x1f6>
				case DIO_PORTB :	CLR_BIT(DDRB, Copy_u8Pin); break;
    1064:	a7 e3       	ldi	r26, 0x37	; 55
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e7 e3       	ldi	r30, 0x37	; 55
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	48 2f       	mov	r20, r24
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 2e       	mov	r0, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <DIO_voidSetPinDirection+0x198>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	0a 94       	dec	r0
    1084:	e2 f7       	brpl	.-8      	; 0x107e <DIO_voidSetPinDirection+0x194>
    1086:	80 95       	com	r24
    1088:	84 23       	and	r24, r20
    108a:	8c 93       	st	X, r24
    108c:	29 c0       	rjmp	.+82     	; 0x10e0 <DIO_voidSetPinDirection+0x1f6>
				case DIO_PORTC :	CLR_BIT(DDRC, Copy_u8Pin); break;
    108e:	a4 e3       	ldi	r26, 0x34	; 52
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e4 e3       	ldi	r30, 0x34	; 52
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	48 2f       	mov	r20, r24
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	02 2e       	mov	r0, r18
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <DIO_voidSetPinDirection+0x1c2>
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	0a 94       	dec	r0
    10ae:	e2 f7       	brpl	.-8      	; 0x10a8 <DIO_voidSetPinDirection+0x1be>
    10b0:	80 95       	com	r24
    10b2:	84 23       	and	r24, r20
    10b4:	8c 93       	st	X, r24
    10b6:	14 c0       	rjmp	.+40     	; 0x10e0 <DIO_voidSetPinDirection+0x1f6>
				case DIO_PORTD :	CLR_BIT(DDRD, Copy_u8Pin); break;
    10b8:	a1 e3       	ldi	r26, 0x31	; 49
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e1 e3       	ldi	r30, 0x31	; 49
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	48 2f       	mov	r20, r24
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	02 2e       	mov	r0, r18
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <DIO_voidSetPinDirection+0x1ec>
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	0a 94       	dec	r0
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <DIO_voidSetPinDirection+0x1e8>
    10da:	80 95       	com	r24
    10dc:	84 23       	and	r24, r20
    10de:	8c 93       	st	X, r24
	}
	else{
		/* do nothing */
	}
	
}
    10e0:	27 96       	adiw	r28, 0x07	; 7
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	f8 94       	cli
    10e6:	de bf       	out	0x3e, r29	; 62
    10e8:	0f be       	out	0x3f, r0	; 63
    10ea:	cd bf       	out	0x3d, r28	; 61
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	08 95       	ret

000010f2 <DIO_voidSetPinValue>:


void DIO_voidSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value){ 		//PORT
    10f2:	df 93       	push	r29
    10f4:	cf 93       	push	r28
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	27 97       	sbiw	r28, 0x07	; 7
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	f8 94       	cli
    1100:	de bf       	out	0x3e, r29	; 62
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	cd bf       	out	0x3d, r28	; 61
    1106:	89 83       	std	Y+1, r24	; 0x01
    1108:	6a 83       	std	Y+2, r22	; 0x02
    110a:	4b 83       	std	Y+3, r20	; 0x03
	if( Copy_u8Pin <8){
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	88 30       	cpi	r24, 0x08	; 8
    1110:	08 f0       	brcs	.+2      	; 0x1114 <DIO_voidSetPinValue+0x22>
    1112:	ea c0       	rjmp	.+468    	; 0x12e8 <DIO_voidSetPinValue+0x1f6>
		
		if(Copy_u8Value == DIO_HIGH){
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	81 30       	cpi	r24, 0x01	; 1
    1118:	09 f0       	breq	.+2      	; 0x111c <DIO_voidSetPinValue+0x2a>
    111a:	6f c0       	rjmp	.+222    	; 0x11fa <DIO_voidSetPinValue+0x108>
			switch(Copy_u8Port)
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	3f 83       	std	Y+7, r19	; 0x07
    1124:	2e 83       	std	Y+6, r18	; 0x06
    1126:	8e 81       	ldd	r24, Y+6	; 0x06
    1128:	9f 81       	ldd	r25, Y+7	; 0x07
    112a:	81 30       	cpi	r24, 0x01	; 1
    112c:	91 05       	cpc	r25, r1
    112e:	49 f1       	breq	.+82     	; 0x1182 <DIO_voidSetPinValue+0x90>
    1130:	2e 81       	ldd	r18, Y+6	; 0x06
    1132:	3f 81       	ldd	r19, Y+7	; 0x07
    1134:	22 30       	cpi	r18, 0x02	; 2
    1136:	31 05       	cpc	r19, r1
    1138:	2c f4       	brge	.+10     	; 0x1144 <DIO_voidSetPinValue+0x52>
    113a:	8e 81       	ldd	r24, Y+6	; 0x06
    113c:	9f 81       	ldd	r25, Y+7	; 0x07
    113e:	00 97       	sbiw	r24, 0x00	; 0
    1140:	61 f0       	breq	.+24     	; 0x115a <DIO_voidSetPinValue+0x68>
    1142:	d2 c0       	rjmp	.+420    	; 0x12e8 <DIO_voidSetPinValue+0x1f6>
    1144:	2e 81       	ldd	r18, Y+6	; 0x06
    1146:	3f 81       	ldd	r19, Y+7	; 0x07
    1148:	22 30       	cpi	r18, 0x02	; 2
    114a:	31 05       	cpc	r19, r1
    114c:	71 f1       	breq	.+92     	; 0x11aa <DIO_voidSetPinValue+0xb8>
    114e:	8e 81       	ldd	r24, Y+6	; 0x06
    1150:	9f 81       	ldd	r25, Y+7	; 0x07
    1152:	83 30       	cpi	r24, 0x03	; 3
    1154:	91 05       	cpc	r25, r1
    1156:	e9 f1       	breq	.+122    	; 0x11d2 <DIO_voidSetPinValue+0xe0>
    1158:	c7 c0       	rjmp	.+398    	; 0x12e8 <DIO_voidSetPinValue+0x1f6>
			{
				case DIO_PORTA :	SET_BIT(PORTA, Copy_u8Pin); break;
    115a:	ab e3       	ldi	r26, 0x3B	; 59
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	eb e3       	ldi	r30, 0x3B	; 59
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	48 2f       	mov	r20, r24
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	02 2e       	mov	r0, r18
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <DIO_voidSetPinValue+0x86>
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	0a 94       	dec	r0
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <DIO_voidSetPinValue+0x82>
    117c:	84 2b       	or	r24, r20
    117e:	8c 93       	st	X, r24
    1180:	b3 c0       	rjmp	.+358    	; 0x12e8 <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTB :	SET_BIT(PORTB, Copy_u8Pin); break;
    1182:	a8 e3       	ldi	r26, 0x38	; 56
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e8 e3       	ldi	r30, 0x38	; 56
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	48 2f       	mov	r20, r24
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	02 2e       	mov	r0, r18
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <DIO_voidSetPinValue+0xae>
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	0a 94       	dec	r0
    11a2:	e2 f7       	brpl	.-8      	; 0x119c <DIO_voidSetPinValue+0xaa>
    11a4:	84 2b       	or	r24, r20
    11a6:	8c 93       	st	X, r24
    11a8:	9f c0       	rjmp	.+318    	; 0x12e8 <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTC :	SET_BIT(PORTC, Copy_u8Pin); break;
    11aa:	a5 e3       	ldi	r26, 0x35	; 53
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e5 e3       	ldi	r30, 0x35	; 53
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	48 2f       	mov	r20, r24
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	02 2e       	mov	r0, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <DIO_voidSetPinValue+0xd6>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	0a 94       	dec	r0
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <DIO_voidSetPinValue+0xd2>
    11cc:	84 2b       	or	r24, r20
    11ce:	8c 93       	st	X, r24
    11d0:	8b c0       	rjmp	.+278    	; 0x12e8 <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTD :	SET_BIT(PORTD, Copy_u8Pin); break;
    11d2:	a2 e3       	ldi	r26, 0x32	; 50
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e2 e3       	ldi	r30, 0x32	; 50
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	48 2f       	mov	r20, r24
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	02 2e       	mov	r0, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <DIO_voidSetPinValue+0xfe>
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	0a 94       	dec	r0
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <DIO_voidSetPinValue+0xfa>
    11f4:	84 2b       	or	r24, r20
    11f6:	8c 93       	st	X, r24
    11f8:	77 c0       	rjmp	.+238    	; 0x12e8 <DIO_voidSetPinValue+0x1f6>
				default		   :		/* do nothing */	    break;
			}
			
		}
		else if(Copy_u8Value == DIO_LOW){
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	88 23       	and	r24, r24
    11fe:	09 f0       	breq	.+2      	; 0x1202 <DIO_voidSetPinValue+0x110>
    1200:	73 c0       	rjmp	.+230    	; 0x12e8 <DIO_voidSetPinValue+0x1f6>
			switch(Copy_u8Port)
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	3d 83       	std	Y+5, r19	; 0x05
    120a:	2c 83       	std	Y+4, r18	; 0x04
    120c:	8c 81       	ldd	r24, Y+4	; 0x04
    120e:	9d 81       	ldd	r25, Y+5	; 0x05
    1210:	81 30       	cpi	r24, 0x01	; 1
    1212:	91 05       	cpc	r25, r1
    1214:	59 f1       	breq	.+86     	; 0x126c <DIO_voidSetPinValue+0x17a>
    1216:	2c 81       	ldd	r18, Y+4	; 0x04
    1218:	3d 81       	ldd	r19, Y+5	; 0x05
    121a:	22 30       	cpi	r18, 0x02	; 2
    121c:	31 05       	cpc	r19, r1
    121e:	2c f4       	brge	.+10     	; 0x122a <DIO_voidSetPinValue+0x138>
    1220:	8c 81       	ldd	r24, Y+4	; 0x04
    1222:	9d 81       	ldd	r25, Y+5	; 0x05
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	69 f0       	breq	.+26     	; 0x1242 <DIO_voidSetPinValue+0x150>
    1228:	5f c0       	rjmp	.+190    	; 0x12e8 <DIO_voidSetPinValue+0x1f6>
    122a:	2c 81       	ldd	r18, Y+4	; 0x04
    122c:	3d 81       	ldd	r19, Y+5	; 0x05
    122e:	22 30       	cpi	r18, 0x02	; 2
    1230:	31 05       	cpc	r19, r1
    1232:	89 f1       	breq	.+98     	; 0x1296 <DIO_voidSetPinValue+0x1a4>
    1234:	8c 81       	ldd	r24, Y+4	; 0x04
    1236:	9d 81       	ldd	r25, Y+5	; 0x05
    1238:	83 30       	cpi	r24, 0x03	; 3
    123a:	91 05       	cpc	r25, r1
    123c:	09 f4       	brne	.+2      	; 0x1240 <DIO_voidSetPinValue+0x14e>
    123e:	40 c0       	rjmp	.+128    	; 0x12c0 <DIO_voidSetPinValue+0x1ce>
    1240:	53 c0       	rjmp	.+166    	; 0x12e8 <DIO_voidSetPinValue+0x1f6>
			{
				case DIO_PORTA :	CLR_BIT(PORTA, Copy_u8Pin); break;
    1242:	ab e3       	ldi	r26, 0x3B	; 59
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	eb e3       	ldi	r30, 0x3B	; 59
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	48 2f       	mov	r20, r24
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	02 2e       	mov	r0, r18
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <DIO_voidSetPinValue+0x16e>
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	0a 94       	dec	r0
    1262:	e2 f7       	brpl	.-8      	; 0x125c <DIO_voidSetPinValue+0x16a>
    1264:	80 95       	com	r24
    1266:	84 23       	and	r24, r20
    1268:	8c 93       	st	X, r24
    126a:	3e c0       	rjmp	.+124    	; 0x12e8 <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTB :	CLR_BIT(PORTB, Copy_u8Pin); break;
    126c:	a8 e3       	ldi	r26, 0x38	; 56
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e8 e3       	ldi	r30, 0x38	; 56
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	48 2f       	mov	r20, r24
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 2e       	mov	r0, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <DIO_voidSetPinValue+0x198>
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	0a 94       	dec	r0
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <DIO_voidSetPinValue+0x194>
    128e:	80 95       	com	r24
    1290:	84 23       	and	r24, r20
    1292:	8c 93       	st	X, r24
    1294:	29 c0       	rjmp	.+82     	; 0x12e8 <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTC :	CLR_BIT(PORTC, Copy_u8Pin); break;
    1296:	a5 e3       	ldi	r26, 0x35	; 53
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e5 e3       	ldi	r30, 0x35	; 53
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	48 2f       	mov	r20, r24
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	02 2e       	mov	r0, r18
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <DIO_voidSetPinValue+0x1c2>
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	0a 94       	dec	r0
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <DIO_voidSetPinValue+0x1be>
    12b8:	80 95       	com	r24
    12ba:	84 23       	and	r24, r20
    12bc:	8c 93       	st	X, r24
    12be:	14 c0       	rjmp	.+40     	; 0x12e8 <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTD :	CLR_BIT(PORTD, Copy_u8Pin); break;
    12c0:	a2 e3       	ldi	r26, 0x32	; 50
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e2 e3       	ldi	r30, 0x32	; 50
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	48 2f       	mov	r20, r24
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	02 2e       	mov	r0, r18
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <DIO_voidSetPinValue+0x1ec>
    12da:	88 0f       	add	r24, r24
    12dc:	99 1f       	adc	r25, r25
    12de:	0a 94       	dec	r0
    12e0:	e2 f7       	brpl	.-8      	; 0x12da <DIO_voidSetPinValue+0x1e8>
    12e2:	80 95       	com	r24
    12e4:	84 23       	and	r24, r20
    12e6:	8c 93       	st	X, r24
		}	
	}
	else{
		/* do nothing */
	}
}
    12e8:	27 96       	adiw	r28, 0x07	; 7
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin){		// PINA,B,C,D
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	00 d0       	rcall	.+0      	; 0x1300 <DIO_u8GetPinValue+0x6>
    1300:	00 d0       	rcall	.+0      	; 0x1302 <DIO_u8GetPinValue+0x8>
    1302:	00 d0       	rcall	.+0      	; 0x1304 <DIO_u8GetPinValue+0xa>
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	6a 83       	std	Y+2, r22	; 0x02
	if( Copy_u8Pin <8){
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	88 30       	cpi	r24, 0x08	; 8
    1310:	08 f0       	brcs	.+2      	; 0x1314 <DIO_u8GetPinValue+0x1a>
    1312:	6f c0       	rjmp	.+222    	; 0x13f2 <DIO_u8GetPinValue+0xf8>
		switch(Copy_u8Port)
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	3d 83       	std	Y+5, r19	; 0x05
    131c:	2c 83       	std	Y+4, r18	; 0x04
    131e:	4c 81       	ldd	r20, Y+4	; 0x04
    1320:	5d 81       	ldd	r21, Y+5	; 0x05
    1322:	41 30       	cpi	r20, 0x01	; 1
    1324:	51 05       	cpc	r21, r1
    1326:	49 f1       	breq	.+82     	; 0x137a <DIO_u8GetPinValue+0x80>
    1328:	8c 81       	ldd	r24, Y+4	; 0x04
    132a:	9d 81       	ldd	r25, Y+5	; 0x05
    132c:	82 30       	cpi	r24, 0x02	; 2
    132e:	91 05       	cpc	r25, r1
    1330:	34 f4       	brge	.+12     	; 0x133e <DIO_u8GetPinValue+0x44>
    1332:	2c 81       	ldd	r18, Y+4	; 0x04
    1334:	3d 81       	ldd	r19, Y+5	; 0x05
    1336:	21 15       	cp	r18, r1
    1338:	31 05       	cpc	r19, r1
    133a:	61 f0       	breq	.+24     	; 0x1354 <DIO_u8GetPinValue+0x5a>
    133c:	57 c0       	rjmp	.+174    	; 0x13ec <DIO_u8GetPinValue+0xf2>
    133e:	4c 81       	ldd	r20, Y+4	; 0x04
    1340:	5d 81       	ldd	r21, Y+5	; 0x05
    1342:	42 30       	cpi	r20, 0x02	; 2
    1344:	51 05       	cpc	r21, r1
    1346:	61 f1       	breq	.+88     	; 0x13a0 <DIO_u8GetPinValue+0xa6>
    1348:	8c 81       	ldd	r24, Y+4	; 0x04
    134a:	9d 81       	ldd	r25, Y+5	; 0x05
    134c:	83 30       	cpi	r24, 0x03	; 3
    134e:	91 05       	cpc	r25, r1
    1350:	d1 f1       	breq	.+116    	; 0x13c6 <DIO_u8GetPinValue+0xcc>
    1352:	4c c0       	rjmp	.+152    	; 0x13ec <DIO_u8GetPinValue+0xf2>
		{
			case DIO_PORTA :	return GET_BIT(PINA, Copy_u8Pin);
    1354:	e9 e3       	ldi	r30, 0x39	; 57
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	88 2f       	mov	r24, r24
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	a9 01       	movw	r20, r18
    1366:	02 c0       	rjmp	.+4      	; 0x136c <DIO_u8GetPinValue+0x72>
    1368:	55 95       	asr	r21
    136a:	47 95       	ror	r20
    136c:	8a 95       	dec	r24
    136e:	e2 f7       	brpl	.-8      	; 0x1368 <DIO_u8GetPinValue+0x6e>
    1370:	ca 01       	movw	r24, r20
    1372:	58 2f       	mov	r21, r24
    1374:	51 70       	andi	r21, 0x01	; 1
    1376:	5b 83       	std	Y+3, r21	; 0x03
    1378:	3d c0       	rjmp	.+122    	; 0x13f4 <DIO_u8GetPinValue+0xfa>
			case DIO_PORTB :	return GET_BIT(PINB, Copy_u8Pin);
    137a:	e6 e3       	ldi	r30, 0x36	; 54
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	88 2f       	mov	r24, r24
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	a9 01       	movw	r20, r18
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <DIO_u8GetPinValue+0x98>
    138e:	55 95       	asr	r21
    1390:	47 95       	ror	r20
    1392:	8a 95       	dec	r24
    1394:	e2 f7       	brpl	.-8      	; 0x138e <DIO_u8GetPinValue+0x94>
    1396:	ca 01       	movw	r24, r20
    1398:	58 2f       	mov	r21, r24
    139a:	51 70       	andi	r21, 0x01	; 1
    139c:	5b 83       	std	Y+3, r21	; 0x03
    139e:	2a c0       	rjmp	.+84     	; 0x13f4 <DIO_u8GetPinValue+0xfa>
			case DIO_PORTC :	return GET_BIT(PINC, Copy_u8Pin);
    13a0:	e3 e3       	ldi	r30, 0x33	; 51
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	88 2f       	mov	r24, r24
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	a9 01       	movw	r20, r18
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <DIO_u8GetPinValue+0xbe>
    13b4:	55 95       	asr	r21
    13b6:	47 95       	ror	r20
    13b8:	8a 95       	dec	r24
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <DIO_u8GetPinValue+0xba>
    13bc:	ca 01       	movw	r24, r20
    13be:	58 2f       	mov	r21, r24
    13c0:	51 70       	andi	r21, 0x01	; 1
    13c2:	5b 83       	std	Y+3, r21	; 0x03
    13c4:	17 c0       	rjmp	.+46     	; 0x13f4 <DIO_u8GetPinValue+0xfa>
			case DIO_PORTD :	return GET_BIT(PIND, Copy_u8Pin);
    13c6:	e0 e3       	ldi	r30, 0x30	; 48
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	88 2f       	mov	r24, r24
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	a9 01       	movw	r20, r18
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <DIO_u8GetPinValue+0xe4>
    13da:	55 95       	asr	r21
    13dc:	47 95       	ror	r20
    13de:	8a 95       	dec	r24
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <DIO_u8GetPinValue+0xe0>
    13e2:	ca 01       	movw	r24, r20
    13e4:	58 2f       	mov	r21, r24
    13e6:	51 70       	andi	r21, 0x01	; 1
    13e8:	5b 83       	std	Y+3, r21	; 0x03
    13ea:	04 c0       	rjmp	.+8      	; 0x13f4 <DIO_u8GetPinValue+0xfa>
			default		   :	return 0xff;/* as a wrong entry */
    13ec:	8f ef       	ldi	r24, 0xFF	; 255
    13ee:	8b 83       	std	Y+3, r24	; 0x03
    13f0:	01 c0       	rjmp	.+2      	; 0x13f4 <DIO_u8GetPinValue+0xfa>
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <DIO_u8GetPinValue+0xfe>
	}
	else{
		/* do nothing */
	}
	
}
    13f4:	9b 81       	ldd	r25, Y+3	; 0x03
    13f6:	9e 83       	std	Y+6, r25	; 0x06
    13f8:	8e 81       	ldd	r24, Y+6	; 0x06
    13fa:	26 96       	adiw	r28, 0x06	; 6
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	f8 94       	cli
    1400:	de bf       	out	0x3e, r29	; 62
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	cd bf       	out	0x3d, r28	; 61
    1406:	cf 91       	pop	r28
    1408:	df 91       	pop	r29
    140a:	08 95       	ret

0000140c <DIO_voidSetPortDirection>:


void DIO_voidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction){ // Copy_u8Direction = 0b11100000
    140c:	df 93       	push	r29
    140e:	cf 93       	push	r28
    1410:	00 d0       	rcall	.+0      	; 0x1412 <DIO_voidSetPortDirection+0x6>
    1412:	00 d0       	rcall	.+0      	; 0x1414 <DIO_voidSetPortDirection+0x8>
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	89 83       	std	Y+1, r24	; 0x01
    141a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	3c 83       	std	Y+4, r19	; 0x04
    1424:	2b 83       	std	Y+3, r18	; 0x03
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	9c 81       	ldd	r25, Y+4	; 0x04
    142a:	81 30       	cpi	r24, 0x01	; 1
    142c:	91 05       	cpc	r25, r1
    142e:	d1 f0       	breq	.+52     	; 0x1464 <DIO_voidSetPortDirection+0x58>
    1430:	2b 81       	ldd	r18, Y+3	; 0x03
    1432:	3c 81       	ldd	r19, Y+4	; 0x04
    1434:	22 30       	cpi	r18, 0x02	; 2
    1436:	31 05       	cpc	r19, r1
    1438:	2c f4       	brge	.+10     	; 0x1444 <DIO_voidSetPortDirection+0x38>
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	9c 81       	ldd	r25, Y+4	; 0x04
    143e:	00 97       	sbiw	r24, 0x00	; 0
    1440:	61 f0       	breq	.+24     	; 0x145a <DIO_voidSetPortDirection+0x4e>
    1442:	1e c0       	rjmp	.+60     	; 0x1480 <DIO_voidSetPortDirection+0x74>
    1444:	2b 81       	ldd	r18, Y+3	; 0x03
    1446:	3c 81       	ldd	r19, Y+4	; 0x04
    1448:	22 30       	cpi	r18, 0x02	; 2
    144a:	31 05       	cpc	r19, r1
    144c:	81 f0       	breq	.+32     	; 0x146e <DIO_voidSetPortDirection+0x62>
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	9c 81       	ldd	r25, Y+4	; 0x04
    1452:	83 30       	cpi	r24, 0x03	; 3
    1454:	91 05       	cpc	r25, r1
    1456:	81 f0       	breq	.+32     	; 0x1478 <DIO_voidSetPortDirection+0x6c>
    1458:	13 c0       	rjmp	.+38     	; 0x1480 <DIO_voidSetPortDirection+0x74>
	{
		case DIO_PORTA :	DDRA = Copy_u8Direction; break;
    145a:	ea e3       	ldi	r30, 0x3A	; 58
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	80 83       	st	Z, r24
    1462:	0e c0       	rjmp	.+28     	; 0x1480 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTB :	DDRB = Copy_u8Direction; break;
    1464:	e7 e3       	ldi	r30, 0x37	; 55
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	80 83       	st	Z, r24
    146c:	09 c0       	rjmp	.+18     	; 0x1480 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTC :	DDRC = Copy_u8Direction; break;
    146e:	e4 e3       	ldi	r30, 0x34	; 52
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	80 83       	st	Z, r24
    1476:	04 c0       	rjmp	.+8      	; 0x1480 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTD :	DDRD = Copy_u8Direction; break;
    1478:	e1 e3       	ldi	r30, 0x31	; 49
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	80 83       	st	Z, r24
		default		   :		/* do nothing */	 break;
	}
	
}
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <DIO_voidSetPortValue>:


void DIO_voidSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value){
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	00 d0       	rcall	.+0      	; 0x1494 <DIO_voidSetPortValue+0x6>
    1494:	00 d0       	rcall	.+0      	; 0x1496 <DIO_voidSetPortValue+0x8>
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	89 83       	std	Y+1, r24	; 0x01
    149c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	3c 83       	std	Y+4, r19	; 0x04
    14a6:	2b 83       	std	Y+3, r18	; 0x03
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	9c 81       	ldd	r25, Y+4	; 0x04
    14ac:	81 30       	cpi	r24, 0x01	; 1
    14ae:	91 05       	cpc	r25, r1
    14b0:	d1 f0       	breq	.+52     	; 0x14e6 <DIO_voidSetPortValue+0x58>
    14b2:	2b 81       	ldd	r18, Y+3	; 0x03
    14b4:	3c 81       	ldd	r19, Y+4	; 0x04
    14b6:	22 30       	cpi	r18, 0x02	; 2
    14b8:	31 05       	cpc	r19, r1
    14ba:	2c f4       	brge	.+10     	; 0x14c6 <DIO_voidSetPortValue+0x38>
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	9c 81       	ldd	r25, Y+4	; 0x04
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	61 f0       	breq	.+24     	; 0x14dc <DIO_voidSetPortValue+0x4e>
    14c4:	1e c0       	rjmp	.+60     	; 0x1502 <DIO_voidSetPortValue+0x74>
    14c6:	2b 81       	ldd	r18, Y+3	; 0x03
    14c8:	3c 81       	ldd	r19, Y+4	; 0x04
    14ca:	22 30       	cpi	r18, 0x02	; 2
    14cc:	31 05       	cpc	r19, r1
    14ce:	81 f0       	breq	.+32     	; 0x14f0 <DIO_voidSetPortValue+0x62>
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	9c 81       	ldd	r25, Y+4	; 0x04
    14d4:	83 30       	cpi	r24, 0x03	; 3
    14d6:	91 05       	cpc	r25, r1
    14d8:	81 f0       	breq	.+32     	; 0x14fa <DIO_voidSetPortValue+0x6c>
    14da:	13 c0       	rjmp	.+38     	; 0x1502 <DIO_voidSetPortValue+0x74>
	{
		case DIO_PORTA :	PORTA = Copy_u8Value; break;
    14dc:	eb e3       	ldi	r30, 0x3B	; 59
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	80 83       	st	Z, r24
    14e4:	0e c0       	rjmp	.+28     	; 0x1502 <DIO_voidSetPortValue+0x74>
		case DIO_PORTB :	PORTB = Copy_u8Value; break;
    14e6:	e8 e3       	ldi	r30, 0x38	; 56
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	80 83       	st	Z, r24
    14ee:	09 c0       	rjmp	.+18     	; 0x1502 <DIO_voidSetPortValue+0x74>
		case DIO_PORTC :	PORTC = Copy_u8Value; break;
    14f0:	e5 e3       	ldi	r30, 0x35	; 53
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	80 83       	st	Z, r24
    14f8:	04 c0       	rjmp	.+8      	; 0x1502 <DIO_voidSetPortValue+0x74>
		case DIO_PORTD :	PORTD = Copy_u8Value; break;
    14fa:	e2 e3       	ldi	r30, 0x32	; 50
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	80 83       	st	Z, r24
		default		   :		/* do nothing */  break;
	}	
	
} 
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <DIO_voidTogglePin>:


void DIO_voidTogglePin(u8 Copy_u8Port, u8 Copy_u8Pin){
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	00 d0       	rcall	.+0      	; 0x1516 <DIO_voidTogglePin+0x6>
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
    151a:	89 83       	std	Y+1, r24	; 0x01
    151c:	6a 83       	std	Y+2, r22	; 0x02
	
	/* Complete this func */
	
}
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	cf 91       	pop	r28
    1524:	df 91       	pop	r29
    1526:	08 95       	ret

00001528 <EXT_voidGIE_Enable>:
#include "BIT_Math.h"
#include "DIO.h"
#include "GIE_Interface.h"

void EXT_voidGIE_Enable(void)
{
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , DIO_PIN7);
    1530:	af e5       	ldi	r26, 0x5F	; 95
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	ef e5       	ldi	r30, 0x5F	; 95
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	80 68       	ori	r24, 0x80	; 128
    153c:	8c 93       	st	X, r24
}
    153e:	cf 91       	pop	r28
    1540:	df 91       	pop	r29
    1542:	08 95       	ret

00001544 <EXT_voidGIE_Disable>:

void EXT_voidGIE_Disable(void)
{
    1544:	df 93       	push	r29
    1546:	cf 93       	push	r28
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG , DIO_PIN7);
    154c:	af e5       	ldi	r26, 0x5F	; 95
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	ef e5       	ldi	r30, 0x5F	; 95
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	8f 77       	andi	r24, 0x7F	; 127
    1558:	8c 93       	st	X, r24
}
    155a:	cf 91       	pop	r28
    155c:	df 91       	pop	r29
    155e:	08 95       	ret

00001560 <LCD_voidInit>:
#include "STD_Types.h"
#include "BIT_Math.h"
#include "DIO.h"
#include "LCD.h"

void LCD_voidInit(void){
    1560:	0f 93       	push	r16
    1562:	1f 93       	push	r17
    1564:	df 93       	push	r29
    1566:	cf 93       	push	r28
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
    156c:	cc 54       	subi	r28, 0x4C	; 76
    156e:	d0 40       	sbci	r29, 0x00	; 0
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	de bf       	out	0x3e, r29	; 62
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	cd bf       	out	0x3d, r28	; 61
	/* Data port -> output*/
	DIO_voidSetPortDirection(LCD_DATA_PORT, 0XFF);
    157a:	82 e0       	ldi	r24, 0x02	; 2
    157c:	6f ef       	ldi	r22, 0xFF	; 255
    157e:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPortDirection>
	/* RS, RW, E  -> output */
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, RS, DIO_OUTPUT);
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	60 e0       	ldi	r22, 0x00	; 0
    1586:	41 e0       	ldi	r20, 0x01	; 1
    1588:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, RW, DIO_OUTPUT);
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	61 e0       	ldi	r22, 0x01	; 1
    1590:	41 e0       	ldi	r20, 0x01	; 1
    1592:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, EN, DIO_OUTPUT);
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	62 e0       	ldi	r22, 0x02	; 2
    159a:	41 e0       	ldi	r20, 0x01	; 1
    159c:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_voidSetPinDirection>
    15a0:	fe 01       	movw	r30, r28
    15a2:	e7 5b       	subi	r30, 0xB7	; 183
    15a4:	ff 4f       	sbci	r31, 0xFF	; 255
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	ac e0       	ldi	r26, 0x0C	; 12
    15ac:	b2 e4       	ldi	r27, 0x42	; 66
    15ae:	80 83       	st	Z, r24
    15b0:	91 83       	std	Z+1, r25	; 0x01
    15b2:	a2 83       	std	Z+2, r26	; 0x02
    15b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15b6:	8e 01       	movw	r16, r28
    15b8:	0b 5b       	subi	r16, 0xBB	; 187
    15ba:	1f 4f       	sbci	r17, 0xFF	; 255
    15bc:	fe 01       	movw	r30, r28
    15be:	e7 5b       	subi	r30, 0xB7	; 183
    15c0:	ff 4f       	sbci	r31, 0xFF	; 255
    15c2:	60 81       	ld	r22, Z
    15c4:	71 81       	ldd	r23, Z+1	; 0x01
    15c6:	82 81       	ldd	r24, Z+2	; 0x02
    15c8:	93 81       	ldd	r25, Z+3	; 0x03
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	4a ef       	ldi	r20, 0xFA	; 250
    15d0:	54 e4       	ldi	r21, 0x44	; 68
    15d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d6:	dc 01       	movw	r26, r24
    15d8:	cb 01       	movw	r24, r22
    15da:	f8 01       	movw	r30, r16
    15dc:	80 83       	st	Z, r24
    15de:	91 83       	std	Z+1, r25	; 0x01
    15e0:	a2 83       	std	Z+2, r26	; 0x02
    15e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15e4:	fe 01       	movw	r30, r28
    15e6:	eb 5b       	subi	r30, 0xBB	; 187
    15e8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ea:	60 81       	ld	r22, Z
    15ec:	71 81       	ldd	r23, Z+1	; 0x01
    15ee:	82 81       	ldd	r24, Z+2	; 0x02
    15f0:	93 81       	ldd	r25, Z+3	; 0x03
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	40 e8       	ldi	r20, 0x80	; 128
    15f8:	5f e3       	ldi	r21, 0x3F	; 63
    15fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15fe:	88 23       	and	r24, r24
    1600:	44 f4       	brge	.+16     	; 0x1612 <LCD_voidInit+0xb2>
		__ticks = 1;
    1602:	fe 01       	movw	r30, r28
    1604:	ed 5b       	subi	r30, 0xBD	; 189
    1606:	ff 4f       	sbci	r31, 0xFF	; 255
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	91 83       	std	Z+1, r25	; 0x01
    160e:	80 83       	st	Z, r24
    1610:	64 c0       	rjmp	.+200    	; 0x16da <LCD_voidInit+0x17a>
	else if (__tmp > 65535)
    1612:	fe 01       	movw	r30, r28
    1614:	eb 5b       	subi	r30, 0xBB	; 187
    1616:	ff 4f       	sbci	r31, 0xFF	; 255
    1618:	60 81       	ld	r22, Z
    161a:	71 81       	ldd	r23, Z+1	; 0x01
    161c:	82 81       	ldd	r24, Z+2	; 0x02
    161e:	93 81       	ldd	r25, Z+3	; 0x03
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	3f ef       	ldi	r19, 0xFF	; 255
    1624:	4f e7       	ldi	r20, 0x7F	; 127
    1626:	57 e4       	ldi	r21, 0x47	; 71
    1628:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    162c:	18 16       	cp	r1, r24
    162e:	0c f0       	brlt	.+2      	; 0x1632 <LCD_voidInit+0xd2>
    1630:	43 c0       	rjmp	.+134    	; 0x16b8 <LCD_voidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1632:	fe 01       	movw	r30, r28
    1634:	e7 5b       	subi	r30, 0xB7	; 183
    1636:	ff 4f       	sbci	r31, 0xFF	; 255
    1638:	60 81       	ld	r22, Z
    163a:	71 81       	ldd	r23, Z+1	; 0x01
    163c:	82 81       	ldd	r24, Z+2	; 0x02
    163e:	93 81       	ldd	r25, Z+3	; 0x03
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	40 e2       	ldi	r20, 0x20	; 32
    1646:	51 e4       	ldi	r21, 0x41	; 65
    1648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	8e 01       	movw	r16, r28
    1652:	0d 5b       	subi	r16, 0xBD	; 189
    1654:	1f 4f       	sbci	r17, 0xFF	; 255
    1656:	bc 01       	movw	r22, r24
    1658:	cd 01       	movw	r24, r26
    165a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	f8 01       	movw	r30, r16
    1664:	91 83       	std	Z+1, r25	; 0x01
    1666:	80 83       	st	Z, r24
    1668:	1f c0       	rjmp	.+62     	; 0x16a8 <LCD_voidInit+0x148>
    166a:	fe 01       	movw	r30, r28
    166c:	ef 5b       	subi	r30, 0xBF	; 191
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	88 ec       	ldi	r24, 0xC8	; 200
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	91 83       	std	Z+1, r25	; 0x01
    1676:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1678:	fe 01       	movw	r30, r28
    167a:	ef 5b       	subi	r30, 0xBF	; 191
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	80 81       	ld	r24, Z
    1680:	91 81       	ldd	r25, Z+1	; 0x01
    1682:	01 97       	sbiw	r24, 0x01	; 1
    1684:	f1 f7       	brne	.-4      	; 0x1682 <LCD_voidInit+0x122>
    1686:	fe 01       	movw	r30, r28
    1688:	ef 5b       	subi	r30, 0xBF	; 191
    168a:	ff 4f       	sbci	r31, 0xFF	; 255
    168c:	91 83       	std	Z+1, r25	; 0x01
    168e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1690:	de 01       	movw	r26, r28
    1692:	ad 5b       	subi	r26, 0xBD	; 189
    1694:	bf 4f       	sbci	r27, 0xFF	; 255
    1696:	fe 01       	movw	r30, r28
    1698:	ed 5b       	subi	r30, 0xBD	; 189
    169a:	ff 4f       	sbci	r31, 0xFF	; 255
    169c:	80 81       	ld	r24, Z
    169e:	91 81       	ldd	r25, Z+1	; 0x01
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	11 96       	adiw	r26, 0x01	; 1
    16a4:	9c 93       	st	X, r25
    16a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a8:	fe 01       	movw	r30, r28
    16aa:	ed 5b       	subi	r30, 0xBD	; 189
    16ac:	ff 4f       	sbci	r31, 0xFF	; 255
    16ae:	80 81       	ld	r24, Z
    16b0:	91 81       	ldd	r25, Z+1	; 0x01
    16b2:	00 97       	sbiw	r24, 0x00	; 0
    16b4:	d1 f6       	brne	.-76     	; 0x166a <LCD_voidInit+0x10a>
    16b6:	24 c0       	rjmp	.+72     	; 0x1700 <LCD_voidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b8:	8e 01       	movw	r16, r28
    16ba:	0d 5b       	subi	r16, 0xBD	; 189
    16bc:	1f 4f       	sbci	r17, 0xFF	; 255
    16be:	fe 01       	movw	r30, r28
    16c0:	eb 5b       	subi	r30, 0xBB	; 187
    16c2:	ff 4f       	sbci	r31, 0xFF	; 255
    16c4:	60 81       	ld	r22, Z
    16c6:	71 81       	ldd	r23, Z+1	; 0x01
    16c8:	82 81       	ldd	r24, Z+2	; 0x02
    16ca:	93 81       	ldd	r25, Z+3	; 0x03
    16cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	f8 01       	movw	r30, r16
    16d6:	91 83       	std	Z+1, r25	; 0x01
    16d8:	80 83       	st	Z, r24
    16da:	fe 01       	movw	r30, r28
    16dc:	ed 5b       	subi	r30, 0xBD	; 189
    16de:	ff 4f       	sbci	r31, 0xFF	; 255
    16e0:	80 81       	ld	r24, Z
    16e2:	91 81       	ldd	r25, Z+1	; 0x01
    16e4:	fe 01       	movw	r30, r28
    16e6:	ff 96       	adiw	r30, 0x3f	; 63
    16e8:	91 83       	std	Z+1, r25	; 0x01
    16ea:	80 83       	st	Z, r24
    16ec:	fe 01       	movw	r30, r28
    16ee:	ff 96       	adiw	r30, 0x3f	; 63
    16f0:	80 81       	ld	r24, Z
    16f2:	91 81       	ldd	r25, Z+1	; 0x01
    16f4:	01 97       	sbiw	r24, 0x01	; 1
    16f6:	f1 f7       	brne	.-4      	; 0x16f4 <LCD_voidInit+0x194>
    16f8:	fe 01       	movw	r30, r28
    16fa:	ff 96       	adiw	r30, 0x3f	; 63
    16fc:	91 83       	std	Z+1, r25	; 0x01
    16fe:	80 83       	st	Z, r24
	
	_delay_ms(35);
	LCD_voidSendCommand(FUNCTION_SET);
    1700:	88 e3       	ldi	r24, 0x38	; 56
    1702:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <LCD_voidSendCommand>
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	a8 e4       	ldi	r26, 0x48	; 72
    170c:	b2 e4       	ldi	r27, 0x42	; 66
    170e:	8b af       	std	Y+59, r24	; 0x3b
    1710:	9c af       	std	Y+60, r25	; 0x3c
    1712:	ad af       	std	Y+61, r26	; 0x3d
    1714:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1716:	6b ad       	ldd	r22, Y+59	; 0x3b
    1718:	7c ad       	ldd	r23, Y+60	; 0x3c
    171a:	8d ad       	ldd	r24, Y+61	; 0x3d
    171c:	9e ad       	ldd	r25, Y+62	; 0x3e
    171e:	2b ea       	ldi	r18, 0xAB	; 171
    1720:	3a ea       	ldi	r19, 0xAA	; 170
    1722:	4a e2       	ldi	r20, 0x2A	; 42
    1724:	50 e4       	ldi	r21, 0x40	; 64
    1726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	8f ab       	std	Y+55, r24	; 0x37
    1730:	98 af       	std	Y+56, r25	; 0x38
    1732:	a9 af       	std	Y+57, r26	; 0x39
    1734:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1736:	6f a9       	ldd	r22, Y+55	; 0x37
    1738:	78 ad       	ldd	r23, Y+56	; 0x38
    173a:	89 ad       	ldd	r24, Y+57	; 0x39
    173c:	9a ad       	ldd	r25, Y+58	; 0x3a
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	40 e8       	ldi	r20, 0x80	; 128
    1744:	5f e3       	ldi	r21, 0x3F	; 63
    1746:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    174a:	88 23       	and	r24, r24
    174c:	1c f4       	brge	.+6      	; 0x1754 <LCD_voidInit+0x1f4>
		__ticks = 1;
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	8e ab       	std	Y+54, r24	; 0x36
    1752:	91 c0       	rjmp	.+290    	; 0x1876 <LCD_voidInit+0x316>
	else if (__tmp > 255)
    1754:	6f a9       	ldd	r22, Y+55	; 0x37
    1756:	78 ad       	ldd	r23, Y+56	; 0x38
    1758:	89 ad       	ldd	r24, Y+57	; 0x39
    175a:	9a ad       	ldd	r25, Y+58	; 0x3a
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	4f e7       	ldi	r20, 0x7F	; 127
    1762:	53 e4       	ldi	r21, 0x43	; 67
    1764:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1768:	18 16       	cp	r1, r24
    176a:	0c f0       	brlt	.+2      	; 0x176e <LCD_voidInit+0x20e>
    176c:	7b c0       	rjmp	.+246    	; 0x1864 <LCD_voidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    176e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1770:	7c ad       	ldd	r23, Y+60	; 0x3c
    1772:	8d ad       	ldd	r24, Y+61	; 0x3d
    1774:	9e ad       	ldd	r25, Y+62	; 0x3e
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	4a e7       	ldi	r20, 0x7A	; 122
    177c:	54 e4       	ldi	r21, 0x44	; 68
    177e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	8a ab       	std	Y+50, r24	; 0x32
    1788:	9b ab       	std	Y+51, r25	; 0x33
    178a:	ac ab       	std	Y+52, r26	; 0x34
    178c:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    178e:	6a a9       	ldd	r22, Y+50	; 0x32
    1790:	7b a9       	ldd	r23, Y+51	; 0x33
    1792:	8c a9       	ldd	r24, Y+52	; 0x34
    1794:	9d a9       	ldd	r25, Y+53	; 0x35
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	4a ef       	ldi	r20, 0xFA	; 250
    179c:	54 e4       	ldi	r21, 0x44	; 68
    179e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	8e a7       	std	Y+46, r24	; 0x2e
    17a8:	9f a7       	std	Y+47, r25	; 0x2f
    17aa:	a8 ab       	std	Y+48, r26	; 0x30
    17ac:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    17ae:	6e a5       	ldd	r22, Y+46	; 0x2e
    17b0:	7f a5       	ldd	r23, Y+47	; 0x2f
    17b2:	88 a9       	ldd	r24, Y+48	; 0x30
    17b4:	99 a9       	ldd	r25, Y+49	; 0x31
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	40 e8       	ldi	r20, 0x80	; 128
    17bc:	5f e3       	ldi	r21, 0x3F	; 63
    17be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17c2:	88 23       	and	r24, r24
    17c4:	2c f4       	brge	.+10     	; 0x17d0 <LCD_voidInit+0x270>
		__ticks = 1;
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	9d a7       	std	Y+45, r25	; 0x2d
    17cc:	8c a7       	std	Y+44, r24	; 0x2c
    17ce:	3f c0       	rjmp	.+126    	; 0x184e <LCD_voidInit+0x2ee>
	else if (__tmp > 65535)
    17d0:	6e a5       	ldd	r22, Y+46	; 0x2e
    17d2:	7f a5       	ldd	r23, Y+47	; 0x2f
    17d4:	88 a9       	ldd	r24, Y+48	; 0x30
    17d6:	99 a9       	ldd	r25, Y+49	; 0x31
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	3f ef       	ldi	r19, 0xFF	; 255
    17dc:	4f e7       	ldi	r20, 0x7F	; 127
    17de:	57 e4       	ldi	r21, 0x47	; 71
    17e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17e4:	18 16       	cp	r1, r24
    17e6:	4c f5       	brge	.+82     	; 0x183a <LCD_voidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e8:	6a a9       	ldd	r22, Y+50	; 0x32
    17ea:	7b a9       	ldd	r23, Y+51	; 0x33
    17ec:	8c a9       	ldd	r24, Y+52	; 0x34
    17ee:	9d a9       	ldd	r25, Y+53	; 0x35
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	40 e2       	ldi	r20, 0x20	; 32
    17f6:	51 e4       	ldi	r21, 0x41	; 65
    17f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	bc 01       	movw	r22, r24
    1802:	cd 01       	movw	r24, r26
    1804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	9d a7       	std	Y+45, r25	; 0x2d
    180e:	8c a7       	std	Y+44, r24	; 0x2c
    1810:	0f c0       	rjmp	.+30     	; 0x1830 <LCD_voidInit+0x2d0>
    1812:	88 ec       	ldi	r24, 0xC8	; 200
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	9b a7       	std	Y+43, r25	; 0x2b
    1818:	8a a7       	std	Y+42, r24	; 0x2a
    181a:	8a a5       	ldd	r24, Y+42	; 0x2a
    181c:	9b a5       	ldd	r25, Y+43	; 0x2b
    181e:	01 97       	sbiw	r24, 0x01	; 1
    1820:	f1 f7       	brne	.-4      	; 0x181e <LCD_voidInit+0x2be>
    1822:	9b a7       	std	Y+43, r25	; 0x2b
    1824:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1826:	8c a5       	ldd	r24, Y+44	; 0x2c
    1828:	9d a5       	ldd	r25, Y+45	; 0x2d
    182a:	01 97       	sbiw	r24, 0x01	; 1
    182c:	9d a7       	std	Y+45, r25	; 0x2d
    182e:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1830:	8c a5       	ldd	r24, Y+44	; 0x2c
    1832:	9d a5       	ldd	r25, Y+45	; 0x2d
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	69 f7       	brne	.-38     	; 0x1812 <LCD_voidInit+0x2b2>
    1838:	24 c0       	rjmp	.+72     	; 0x1882 <LCD_voidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    183a:	6e a5       	ldd	r22, Y+46	; 0x2e
    183c:	7f a5       	ldd	r23, Y+47	; 0x2f
    183e:	88 a9       	ldd	r24, Y+48	; 0x30
    1840:	99 a9       	ldd	r25, Y+49	; 0x31
    1842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1846:	dc 01       	movw	r26, r24
    1848:	cb 01       	movw	r24, r22
    184a:	9d a7       	std	Y+45, r25	; 0x2d
    184c:	8c a7       	std	Y+44, r24	; 0x2c
    184e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1850:	9d a5       	ldd	r25, Y+45	; 0x2d
    1852:	99 a7       	std	Y+41, r25	; 0x29
    1854:	88 a7       	std	Y+40, r24	; 0x28
    1856:	88 a5       	ldd	r24, Y+40	; 0x28
    1858:	99 a5       	ldd	r25, Y+41	; 0x29
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	f1 f7       	brne	.-4      	; 0x185a <LCD_voidInit+0x2fa>
    185e:	99 a7       	std	Y+41, r25	; 0x29
    1860:	88 a7       	std	Y+40, r24	; 0x28
    1862:	0f c0       	rjmp	.+30     	; 0x1882 <LCD_voidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1864:	6f a9       	ldd	r22, Y+55	; 0x37
    1866:	78 ad       	ldd	r23, Y+56	; 0x38
    1868:	89 ad       	ldd	r24, Y+57	; 0x39
    186a:	9a ad       	ldd	r25, Y+58	; 0x3a
    186c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	8e ab       	std	Y+54, r24	; 0x36
    1876:	8e a9       	ldd	r24, Y+54	; 0x36
    1878:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    187a:	8f a1       	ldd	r24, Y+39	; 0x27
    187c:	8a 95       	dec	r24
    187e:	f1 f7       	brne	.-4      	; 0x187c <LCD_voidInit+0x31c>
    1880:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);
	LCD_voidSendCommand(DISPLAY_ON_OFF);
    1882:	8f e0       	ldi	r24, 0x0F	; 15
    1884:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <LCD_voidSendCommand>
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	a8 e4       	ldi	r26, 0x48	; 72
    188e:	b2 e4       	ldi	r27, 0x42	; 66
    1890:	8b a3       	std	Y+35, r24	; 0x23
    1892:	9c a3       	std	Y+36, r25	; 0x24
    1894:	ad a3       	std	Y+37, r26	; 0x25
    1896:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1898:	6b a1       	ldd	r22, Y+35	; 0x23
    189a:	7c a1       	ldd	r23, Y+36	; 0x24
    189c:	8d a1       	ldd	r24, Y+37	; 0x25
    189e:	9e a1       	ldd	r25, Y+38	; 0x26
    18a0:	2b ea       	ldi	r18, 0xAB	; 171
    18a2:	3a ea       	ldi	r19, 0xAA	; 170
    18a4:	4a e2       	ldi	r20, 0x2A	; 42
    18a6:	50 e4       	ldi	r21, 0x40	; 64
    18a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ac:	dc 01       	movw	r26, r24
    18ae:	cb 01       	movw	r24, r22
    18b0:	8f 8f       	std	Y+31, r24	; 0x1f
    18b2:	98 a3       	std	Y+32, r25	; 0x20
    18b4:	a9 a3       	std	Y+33, r26	; 0x21
    18b6:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    18b8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    18ba:	78 a1       	ldd	r23, Y+32	; 0x20
    18bc:	89 a1       	ldd	r24, Y+33	; 0x21
    18be:	9a a1       	ldd	r25, Y+34	; 0x22
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	40 e8       	ldi	r20, 0x80	; 128
    18c6:	5f e3       	ldi	r21, 0x3F	; 63
    18c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18cc:	88 23       	and	r24, r24
    18ce:	1c f4       	brge	.+6      	; 0x18d6 <LCD_voidInit+0x376>
		__ticks = 1;
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	8e 8f       	std	Y+30, r24	; 0x1e
    18d4:	91 c0       	rjmp	.+290    	; 0x19f8 <LCD_voidInit+0x498>
	else if (__tmp > 255)
    18d6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    18d8:	78 a1       	ldd	r23, Y+32	; 0x20
    18da:	89 a1       	ldd	r24, Y+33	; 0x21
    18dc:	9a a1       	ldd	r25, Y+34	; 0x22
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	4f e7       	ldi	r20, 0x7F	; 127
    18e4:	53 e4       	ldi	r21, 0x43	; 67
    18e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18ea:	18 16       	cp	r1, r24
    18ec:	0c f0       	brlt	.+2      	; 0x18f0 <LCD_voidInit+0x390>
    18ee:	7b c0       	rjmp	.+246    	; 0x19e6 <LCD_voidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    18f0:	6b a1       	ldd	r22, Y+35	; 0x23
    18f2:	7c a1       	ldd	r23, Y+36	; 0x24
    18f4:	8d a1       	ldd	r24, Y+37	; 0x25
    18f6:	9e a1       	ldd	r25, Y+38	; 0x26
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	4a e7       	ldi	r20, 0x7A	; 122
    18fe:	54 e4       	ldi	r21, 0x44	; 68
    1900:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	8a 8f       	std	Y+26, r24	; 0x1a
    190a:	9b 8f       	std	Y+27, r25	; 0x1b
    190c:	ac 8f       	std	Y+28, r26	; 0x1c
    190e:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1910:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1912:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1914:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1916:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	4a ef       	ldi	r20, 0xFA	; 250
    191e:	54 e4       	ldi	r21, 0x44	; 68
    1920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	8e 8b       	std	Y+22, r24	; 0x16
    192a:	9f 8b       	std	Y+23, r25	; 0x17
    192c:	a8 8f       	std	Y+24, r26	; 0x18
    192e:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1930:	6e 89       	ldd	r22, Y+22	; 0x16
    1932:	7f 89       	ldd	r23, Y+23	; 0x17
    1934:	88 8d       	ldd	r24, Y+24	; 0x18
    1936:	99 8d       	ldd	r25, Y+25	; 0x19
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e8       	ldi	r20, 0x80	; 128
    193e:	5f e3       	ldi	r21, 0x3F	; 63
    1940:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1944:	88 23       	and	r24, r24
    1946:	2c f4       	brge	.+10     	; 0x1952 <LCD_voidInit+0x3f2>
		__ticks = 1;
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	9d 8b       	std	Y+21, r25	; 0x15
    194e:	8c 8b       	std	Y+20, r24	; 0x14
    1950:	3f c0       	rjmp	.+126    	; 0x19d0 <LCD_voidInit+0x470>
	else if (__tmp > 65535)
    1952:	6e 89       	ldd	r22, Y+22	; 0x16
    1954:	7f 89       	ldd	r23, Y+23	; 0x17
    1956:	88 8d       	ldd	r24, Y+24	; 0x18
    1958:	99 8d       	ldd	r25, Y+25	; 0x19
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	3f ef       	ldi	r19, 0xFF	; 255
    195e:	4f e7       	ldi	r20, 0x7F	; 127
    1960:	57 e4       	ldi	r21, 0x47	; 71
    1962:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1966:	18 16       	cp	r1, r24
    1968:	4c f5       	brge	.+82     	; 0x19bc <LCD_voidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    196c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    196e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1970:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	40 e2       	ldi	r20, 0x20	; 32
    1978:	51 e4       	ldi	r21, 0x41	; 65
    197a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	bc 01       	movw	r22, r24
    1984:	cd 01       	movw	r24, r26
    1986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	9d 8b       	std	Y+21, r25	; 0x15
    1990:	8c 8b       	std	Y+20, r24	; 0x14
    1992:	0f c0       	rjmp	.+30     	; 0x19b2 <LCD_voidInit+0x452>
    1994:	88 ec       	ldi	r24, 0xC8	; 200
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	9b 8b       	std	Y+19, r25	; 0x13
    199a:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    199c:	8a 89       	ldd	r24, Y+18	; 0x12
    199e:	9b 89       	ldd	r25, Y+19	; 0x13
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	f1 f7       	brne	.-4      	; 0x19a0 <LCD_voidInit+0x440>
    19a4:	9b 8b       	std	Y+19, r25	; 0x13
    19a6:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a8:	8c 89       	ldd	r24, Y+20	; 0x14
    19aa:	9d 89       	ldd	r25, Y+21	; 0x15
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	9d 8b       	std	Y+21, r25	; 0x15
    19b0:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b2:	8c 89       	ldd	r24, Y+20	; 0x14
    19b4:	9d 89       	ldd	r25, Y+21	; 0x15
    19b6:	00 97       	sbiw	r24, 0x00	; 0
    19b8:	69 f7       	brne	.-38     	; 0x1994 <LCD_voidInit+0x434>
    19ba:	24 c0       	rjmp	.+72     	; 0x1a04 <LCD_voidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19bc:	6e 89       	ldd	r22, Y+22	; 0x16
    19be:	7f 89       	ldd	r23, Y+23	; 0x17
    19c0:	88 8d       	ldd	r24, Y+24	; 0x18
    19c2:	99 8d       	ldd	r25, Y+25	; 0x19
    19c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	9d 8b       	std	Y+21, r25	; 0x15
    19ce:	8c 8b       	std	Y+20, r24	; 0x14
    19d0:	8c 89       	ldd	r24, Y+20	; 0x14
    19d2:	9d 89       	ldd	r25, Y+21	; 0x15
    19d4:	99 8b       	std	Y+17, r25	; 0x11
    19d6:	88 8b       	std	Y+16, r24	; 0x10
    19d8:	88 89       	ldd	r24, Y+16	; 0x10
    19da:	99 89       	ldd	r25, Y+17	; 0x11
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	f1 f7       	brne	.-4      	; 0x19dc <LCD_voidInit+0x47c>
    19e0:	99 8b       	std	Y+17, r25	; 0x11
    19e2:	88 8b       	std	Y+16, r24	; 0x10
    19e4:	0f c0       	rjmp	.+30     	; 0x1a04 <LCD_voidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19e6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    19e8:	78 a1       	ldd	r23, Y+32	; 0x20
    19ea:	89 a1       	ldd	r24, Y+33	; 0x21
    19ec:	9a a1       	ldd	r25, Y+34	; 0x22
    19ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	8e 8f       	std	Y+30, r24	; 0x1e
    19f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19fa:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    19fe:	8a 95       	dec	r24
    1a00:	f1 f7       	brne	.-4      	; 0x19fe <LCD_voidInit+0x49e>
    1a02:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);
	LCD_voidSendCommand(CLEAR);
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <LCD_voidSendCommand>
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	a0 e0       	ldi	r26, 0x00	; 0
    1a10:	b0 e4       	ldi	r27, 0x40	; 64
    1a12:	8b 87       	std	Y+11, r24	; 0x0b
    1a14:	9c 87       	std	Y+12, r25	; 0x0c
    1a16:	ad 87       	std	Y+13, r26	; 0x0d
    1a18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	4a ef       	ldi	r20, 0xFA	; 250
    1a28:	54 e4       	ldi	r21, 0x44	; 68
    1a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	8f 83       	std	Y+7, r24	; 0x07
    1a34:	98 87       	std	Y+8, r25	; 0x08
    1a36:	a9 87       	std	Y+9, r26	; 0x09
    1a38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3c:	78 85       	ldd	r23, Y+8	; 0x08
    1a3e:	89 85       	ldd	r24, Y+9	; 0x09
    1a40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	40 e8       	ldi	r20, 0x80	; 128
    1a48:	5f e3       	ldi	r21, 0x3F	; 63
    1a4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a4e:	88 23       	and	r24, r24
    1a50:	2c f4       	brge	.+10     	; 0x1a5c <LCD_voidInit+0x4fc>
		__ticks = 1;
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	9e 83       	std	Y+6, r25	; 0x06
    1a58:	8d 83       	std	Y+5, r24	; 0x05
    1a5a:	3f c0       	rjmp	.+126    	; 0x1ada <LCD_voidInit+0x57a>
	else if (__tmp > 65535)
    1a5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a5e:	78 85       	ldd	r23, Y+8	; 0x08
    1a60:	89 85       	ldd	r24, Y+9	; 0x09
    1a62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	3f ef       	ldi	r19, 0xFF	; 255
    1a68:	4f e7       	ldi	r20, 0x7F	; 127
    1a6a:	57 e4       	ldi	r21, 0x47	; 71
    1a6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a70:	18 16       	cp	r1, r24
    1a72:	4c f5       	brge	.+82     	; 0x1ac6 <LCD_voidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a74:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a76:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	40 e2       	ldi	r20, 0x20	; 32
    1a82:	51 e4       	ldi	r21, 0x41	; 65
    1a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	bc 01       	movw	r22, r24
    1a8e:	cd 01       	movw	r24, r26
    1a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	9e 83       	std	Y+6, r25	; 0x06
    1a9a:	8d 83       	std	Y+5, r24	; 0x05
    1a9c:	0f c0       	rjmp	.+30     	; 0x1abc <LCD_voidInit+0x55c>
    1a9e:	88 ec       	ldi	r24, 0xC8	; 200
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	9c 83       	std	Y+4, r25	; 0x04
    1aa4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	f1 f7       	brne	.-4      	; 0x1aaa <LCD_voidInit+0x54a>
    1aae:	9c 83       	std	Y+4, r25	; 0x04
    1ab0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	9e 83       	std	Y+6, r25	; 0x06
    1aba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1abc:	8d 81       	ldd	r24, Y+5	; 0x05
    1abe:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac0:	00 97       	sbiw	r24, 0x00	; 0
    1ac2:	69 f7       	brne	.-38     	; 0x1a9e <LCD_voidInit+0x53e>
    1ac4:	14 c0       	rjmp	.+40     	; 0x1aee <LCD_voidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac8:	78 85       	ldd	r23, Y+8	; 0x08
    1aca:	89 85       	ldd	r24, Y+9	; 0x09
    1acc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	9e 83       	std	Y+6, r25	; 0x06
    1ad8:	8d 83       	std	Y+5, r24	; 0x05
    1ada:	8d 81       	ldd	r24, Y+5	; 0x05
    1adc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ade:	9a 83       	std	Y+2, r25	; 0x02
    1ae0:	89 83       	std	Y+1, r24	; 0x01
    1ae2:	89 81       	ldd	r24, Y+1	; 0x01
    1ae4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	f1 f7       	brne	.-4      	; 0x1ae6 <LCD_voidInit+0x586>
    1aea:	9a 83       	std	Y+2, r25	; 0x02
    1aec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1aee:	c4 5b       	subi	r28, 0xB4	; 180
    1af0:	df 4f       	sbci	r29, 0xFF	; 255
    1af2:	0f b6       	in	r0, 0x3f	; 63
    1af4:	f8 94       	cli
    1af6:	de bf       	out	0x3e, r29	; 62
    1af8:	0f be       	out	0x3f, r0	; 63
    1afa:	cd bf       	out	0x3d, r28	; 61
    1afc:	cf 91       	pop	r28
    1afe:	df 91       	pop	r29
    1b00:	1f 91       	pop	r17
    1b02:	0f 91       	pop	r16
    1b04:	08 95       	ret

00001b06 <LCD_voidSendCommand>:


void LCD_voidSendCommand(u8 Copy_u8Command){
    1b06:	df 93       	push	r29
    1b08:	cf 93       	push	r28
    1b0a:	cd b7       	in	r28, 0x3d	; 61
    1b0c:	de b7       	in	r29, 0x3e	; 62
    1b0e:	69 97       	sbiw	r28, 0x19	; 25
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	de bf       	out	0x3e, r29	; 62
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	cd bf       	out	0x3d, r28	; 61
    1b1a:	89 8f       	std	Y+25, r24	; 0x19
	
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RS, DIO_LOW);
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	60 e0       	ldi	r22, 0x00	; 0
    1b20:	40 e0       	ldi	r20, 0x00	; 0
    1b22:	0e 94 79 08 	call	0x10f2	; 0x10f2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RW, DIO_LOW);
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	61 e0       	ldi	r22, 0x01	; 1
    1b2a:	40 e0       	ldi	r20, 0x00	; 0
    1b2c:	0e 94 79 08 	call	0x10f2	; 0x10f2 <DIO_voidSetPinValue>
	DIO_voidSetPortValue(LCD_DATA_PORT, Copy_u8Command);
    1b30:	82 e0       	ldi	r24, 0x02	; 2
    1b32:	69 8d       	ldd	r22, Y+25	; 0x19
    1b34:	0e 94 47 0a 	call	0x148e	; 0x148e <DIO_voidSetPortValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_HIGH);
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	62 e0       	ldi	r22, 0x02	; 2
    1b3c:	41 e0       	ldi	r20, 0x01	; 1
    1b3e:	0e 94 79 08 	call	0x10f2	; 0x10f2 <DIO_voidSetPinValue>
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	a0 e8       	ldi	r26, 0x80	; 128
    1b48:	bf e3       	ldi	r27, 0x3F	; 63
    1b4a:	8d 8b       	std	Y+21, r24	; 0x15
    1b4c:	9e 8b       	std	Y+22, r25	; 0x16
    1b4e:	af 8b       	std	Y+23, r26	; 0x17
    1b50:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b52:	6d 89       	ldd	r22, Y+21	; 0x15
    1b54:	7e 89       	ldd	r23, Y+22	; 0x16
    1b56:	8f 89       	ldd	r24, Y+23	; 0x17
    1b58:	98 8d       	ldd	r25, Y+24	; 0x18
    1b5a:	2b ea       	ldi	r18, 0xAB	; 171
    1b5c:	3a ea       	ldi	r19, 0xAA	; 170
    1b5e:	4a e2       	ldi	r20, 0x2A	; 42
    1b60:	50 e4       	ldi	r21, 0x40	; 64
    1b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	89 8b       	std	Y+17, r24	; 0x11
    1b6c:	9a 8b       	std	Y+18, r25	; 0x12
    1b6e:	ab 8b       	std	Y+19, r26	; 0x13
    1b70:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1b72:	69 89       	ldd	r22, Y+17	; 0x11
    1b74:	7a 89       	ldd	r23, Y+18	; 0x12
    1b76:	8b 89       	ldd	r24, Y+19	; 0x13
    1b78:	9c 89       	ldd	r25, Y+20	; 0x14
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	40 e8       	ldi	r20, 0x80	; 128
    1b80:	5f e3       	ldi	r21, 0x3F	; 63
    1b82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b86:	88 23       	and	r24, r24
    1b88:	1c f4       	brge	.+6      	; 0x1b90 <LCD_voidSendCommand+0x8a>
		__ticks = 1;
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	88 8b       	std	Y+16, r24	; 0x10
    1b8e:	91 c0       	rjmp	.+290    	; 0x1cb2 <LCD_voidSendCommand+0x1ac>
	else if (__tmp > 255)
    1b90:	69 89       	ldd	r22, Y+17	; 0x11
    1b92:	7a 89       	ldd	r23, Y+18	; 0x12
    1b94:	8b 89       	ldd	r24, Y+19	; 0x13
    1b96:	9c 89       	ldd	r25, Y+20	; 0x14
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	4f e7       	ldi	r20, 0x7F	; 127
    1b9e:	53 e4       	ldi	r21, 0x43	; 67
    1ba0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ba4:	18 16       	cp	r1, r24
    1ba6:	0c f0       	brlt	.+2      	; 0x1baa <LCD_voidSendCommand+0xa4>
    1ba8:	7b c0       	rjmp	.+246    	; 0x1ca0 <LCD_voidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1baa:	6d 89       	ldd	r22, Y+21	; 0x15
    1bac:	7e 89       	ldd	r23, Y+22	; 0x16
    1bae:	8f 89       	ldd	r24, Y+23	; 0x17
    1bb0:	98 8d       	ldd	r25, Y+24	; 0x18
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	4a e7       	ldi	r20, 0x7A	; 122
    1bb8:	54 e4       	ldi	r21, 0x44	; 68
    1bba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	8c 87       	std	Y+12, r24	; 0x0c
    1bc4:	9d 87       	std	Y+13, r25	; 0x0d
    1bc6:	ae 87       	std	Y+14, r26	; 0x0e
    1bc8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bca:	6c 85       	ldd	r22, Y+12	; 0x0c
    1bcc:	7d 85       	ldd	r23, Y+13	; 0x0d
    1bce:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bd0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	4a ef       	ldi	r20, 0xFA	; 250
    1bd8:	54 e4       	ldi	r21, 0x44	; 68
    1bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	88 87       	std	Y+8, r24	; 0x08
    1be4:	99 87       	std	Y+9, r25	; 0x09
    1be6:	aa 87       	std	Y+10, r26	; 0x0a
    1be8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1bea:	68 85       	ldd	r22, Y+8	; 0x08
    1bec:	79 85       	ldd	r23, Y+9	; 0x09
    1bee:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bf0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e8       	ldi	r20, 0x80	; 128
    1bf8:	5f e3       	ldi	r21, 0x3F	; 63
    1bfa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bfe:	88 23       	and	r24, r24
    1c00:	2c f4       	brge	.+10     	; 0x1c0c <LCD_voidSendCommand+0x106>
		__ticks = 1;
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	9f 83       	std	Y+7, r25	; 0x07
    1c08:	8e 83       	std	Y+6, r24	; 0x06
    1c0a:	3f c0       	rjmp	.+126    	; 0x1c8a <LCD_voidSendCommand+0x184>
	else if (__tmp > 65535)
    1c0c:	68 85       	ldd	r22, Y+8	; 0x08
    1c0e:	79 85       	ldd	r23, Y+9	; 0x09
    1c10:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c12:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	3f ef       	ldi	r19, 0xFF	; 255
    1c18:	4f e7       	ldi	r20, 0x7F	; 127
    1c1a:	57 e4       	ldi	r21, 0x47	; 71
    1c1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c20:	18 16       	cp	r1, r24
    1c22:	4c f5       	brge	.+82     	; 0x1c76 <LCD_voidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c24:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c26:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c28:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c2a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	40 e2       	ldi	r20, 0x20	; 32
    1c32:	51 e4       	ldi	r21, 0x41	; 65
    1c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	bc 01       	movw	r22, r24
    1c3e:	cd 01       	movw	r24, r26
    1c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	9f 83       	std	Y+7, r25	; 0x07
    1c4a:	8e 83       	std	Y+6, r24	; 0x06
    1c4c:	0f c0       	rjmp	.+30     	; 0x1c6c <LCD_voidSendCommand+0x166>
    1c4e:	88 ec       	ldi	r24, 0xC8	; 200
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	9d 83       	std	Y+5, r25	; 0x05
    1c54:	8c 83       	std	Y+4, r24	; 0x04
    1c56:	8c 81       	ldd	r24, Y+4	; 0x04
    1c58:	9d 81       	ldd	r25, Y+5	; 0x05
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <LCD_voidSendCommand+0x154>
    1c5e:	9d 83       	std	Y+5, r25	; 0x05
    1c60:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c62:	8e 81       	ldd	r24, Y+6	; 0x06
    1c64:	9f 81       	ldd	r25, Y+7	; 0x07
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	9f 83       	std	Y+7, r25	; 0x07
    1c6a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c6e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c70:	00 97       	sbiw	r24, 0x00	; 0
    1c72:	69 f7       	brne	.-38     	; 0x1c4e <LCD_voidSendCommand+0x148>
    1c74:	24 c0       	rjmp	.+72     	; 0x1cbe <LCD_voidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c76:	68 85       	ldd	r22, Y+8	; 0x08
    1c78:	79 85       	ldd	r23, Y+9	; 0x09
    1c7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	9f 83       	std	Y+7, r25	; 0x07
    1c88:	8e 83       	std	Y+6, r24	; 0x06
    1c8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1c8e:	9b 83       	std	Y+3, r25	; 0x03
    1c90:	8a 83       	std	Y+2, r24	; 0x02
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	9b 81       	ldd	r25, Y+3	; 0x03
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	f1 f7       	brne	.-4      	; 0x1c96 <LCD_voidSendCommand+0x190>
    1c9a:	9b 83       	std	Y+3, r25	; 0x03
    1c9c:	8a 83       	std	Y+2, r24	; 0x02
    1c9e:	0f c0       	rjmp	.+30     	; 0x1cbe <LCD_voidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ca0:	69 89       	ldd	r22, Y+17	; 0x11
    1ca2:	7a 89       	ldd	r23, Y+18	; 0x12
    1ca4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	88 8b       	std	Y+16, r24	; 0x10
    1cb2:	88 89       	ldd	r24, Y+16	; 0x10
    1cb4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cb6:	89 81       	ldd	r24, Y+1	; 0x01
    1cb8:	8a 95       	dec	r24
    1cba:	f1 f7       	brne	.-4      	; 0x1cb8 <LCD_voidSendCommand+0x1b2>
    1cbc:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_LOW);	
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	62 e0       	ldi	r22, 0x02	; 2
    1cc2:	40 e0       	ldi	r20, 0x00	; 0
    1cc4:	0e 94 79 08 	call	0x10f2	; 0x10f2 <DIO_voidSetPinValue>
}
    1cc8:	69 96       	adiw	r28, 0x19	; 25
    1cca:	0f b6       	in	r0, 0x3f	; 63
    1ccc:	f8 94       	cli
    1cce:	de bf       	out	0x3e, r29	; 62
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	cd bf       	out	0x3d, r28	; 61
    1cd4:	cf 91       	pop	r28
    1cd6:	df 91       	pop	r29
    1cd8:	08 95       	ret

00001cda <LCD_voidSendChar>:


void LCD_voidSendChar(u8 Copy_u8Char){
    1cda:	df 93       	push	r29
    1cdc:	cf 93       	push	r28
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
    1ce2:	69 97       	sbiw	r28, 0x19	; 25
    1ce4:	0f b6       	in	r0, 0x3f	; 63
    1ce6:	f8 94       	cli
    1ce8:	de bf       	out	0x3e, r29	; 62
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	cd bf       	out	0x3d, r28	; 61
    1cee:	89 8f       	std	Y+25, r24	; 0x19
	
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RS, DIO_HIGH);
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	60 e0       	ldi	r22, 0x00	; 0
    1cf4:	41 e0       	ldi	r20, 0x01	; 1
    1cf6:	0e 94 79 08 	call	0x10f2	; 0x10f2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RW, DIO_LOW);
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	61 e0       	ldi	r22, 0x01	; 1
    1cfe:	40 e0       	ldi	r20, 0x00	; 0
    1d00:	0e 94 79 08 	call	0x10f2	; 0x10f2 <DIO_voidSetPinValue>
	DIO_voidSetPortValue(LCD_DATA_PORT, Copy_u8Char);
    1d04:	82 e0       	ldi	r24, 0x02	; 2
    1d06:	69 8d       	ldd	r22, Y+25	; 0x19
    1d08:	0e 94 47 0a 	call	0x148e	; 0x148e <DIO_voidSetPortValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_HIGH);
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	62 e0       	ldi	r22, 0x02	; 2
    1d10:	41 e0       	ldi	r20, 0x01	; 1
    1d12:	0e 94 79 08 	call	0x10f2	; 0x10f2 <DIO_voidSetPinValue>
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	a0 e8       	ldi	r26, 0x80	; 128
    1d1c:	bf e3       	ldi	r27, 0x3F	; 63
    1d1e:	8d 8b       	std	Y+21, r24	; 0x15
    1d20:	9e 8b       	std	Y+22, r25	; 0x16
    1d22:	af 8b       	std	Y+23, r26	; 0x17
    1d24:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d26:	6d 89       	ldd	r22, Y+21	; 0x15
    1d28:	7e 89       	ldd	r23, Y+22	; 0x16
    1d2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d2e:	2b ea       	ldi	r18, 0xAB	; 171
    1d30:	3a ea       	ldi	r19, 0xAA	; 170
    1d32:	4a e2       	ldi	r20, 0x2A	; 42
    1d34:	50 e4       	ldi	r21, 0x40	; 64
    1d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	89 8b       	std	Y+17, r24	; 0x11
    1d40:	9a 8b       	std	Y+18, r25	; 0x12
    1d42:	ab 8b       	std	Y+19, r26	; 0x13
    1d44:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1d46:	69 89       	ldd	r22, Y+17	; 0x11
    1d48:	7a 89       	ldd	r23, Y+18	; 0x12
    1d4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	40 e8       	ldi	r20, 0x80	; 128
    1d54:	5f e3       	ldi	r21, 0x3F	; 63
    1d56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d5a:	88 23       	and	r24, r24
    1d5c:	1c f4       	brge	.+6      	; 0x1d64 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	88 8b       	std	Y+16, r24	; 0x10
    1d62:	91 c0       	rjmp	.+290    	; 0x1e86 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    1d64:	69 89       	ldd	r22, Y+17	; 0x11
    1d66:	7a 89       	ldd	r23, Y+18	; 0x12
    1d68:	8b 89       	ldd	r24, Y+19	; 0x13
    1d6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	4f e7       	ldi	r20, 0x7F	; 127
    1d72:	53 e4       	ldi	r21, 0x43	; 67
    1d74:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d78:	18 16       	cp	r1, r24
    1d7a:	0c f0       	brlt	.+2      	; 0x1d7e <LCD_voidSendChar+0xa4>
    1d7c:	7b c0       	rjmp	.+246    	; 0x1e74 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1d7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d80:	7e 89       	ldd	r23, Y+22	; 0x16
    1d82:	8f 89       	ldd	r24, Y+23	; 0x17
    1d84:	98 8d       	ldd	r25, Y+24	; 0x18
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	4a e7       	ldi	r20, 0x7A	; 122
    1d8c:	54 e4       	ldi	r21, 0x44	; 68
    1d8e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	8c 87       	std	Y+12, r24	; 0x0c
    1d98:	9d 87       	std	Y+13, r25	; 0x0d
    1d9a:	ae 87       	std	Y+14, r26	; 0x0e
    1d9c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d9e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1da0:	7d 85       	ldd	r23, Y+13	; 0x0d
    1da2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1da4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	4a ef       	ldi	r20, 0xFA	; 250
    1dac:	54 e4       	ldi	r21, 0x44	; 68
    1dae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db2:	dc 01       	movw	r26, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	88 87       	std	Y+8, r24	; 0x08
    1db8:	99 87       	std	Y+9, r25	; 0x09
    1dba:	aa 87       	std	Y+10, r26	; 0x0a
    1dbc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1dbe:	68 85       	ldd	r22, Y+8	; 0x08
    1dc0:	79 85       	ldd	r23, Y+9	; 0x09
    1dc2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dc4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e8       	ldi	r20, 0x80	; 128
    1dcc:	5f e3       	ldi	r21, 0x3F	; 63
    1dce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dd2:	88 23       	and	r24, r24
    1dd4:	2c f4       	brge	.+10     	; 0x1de0 <LCD_voidSendChar+0x106>
		__ticks = 1;
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	9f 83       	std	Y+7, r25	; 0x07
    1ddc:	8e 83       	std	Y+6, r24	; 0x06
    1dde:	3f c0       	rjmp	.+126    	; 0x1e5e <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    1de0:	68 85       	ldd	r22, Y+8	; 0x08
    1de2:	79 85       	ldd	r23, Y+9	; 0x09
    1de4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1de6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	3f ef       	ldi	r19, 0xFF	; 255
    1dec:	4f e7       	ldi	r20, 0x7F	; 127
    1dee:	57 e4       	ldi	r21, 0x47	; 71
    1df0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1df4:	18 16       	cp	r1, r24
    1df6:	4c f5       	brge	.+82     	; 0x1e4a <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df8:	6c 85       	ldd	r22, Y+12	; 0x0c
    1dfa:	7d 85       	ldd	r23, Y+13	; 0x0d
    1dfc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dfe:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	40 e2       	ldi	r20, 0x20	; 32
    1e06:	51 e4       	ldi	r21, 0x41	; 65
    1e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	bc 01       	movw	r22, r24
    1e12:	cd 01       	movw	r24, r26
    1e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	9f 83       	std	Y+7, r25	; 0x07
    1e1e:	8e 83       	std	Y+6, r24	; 0x06
    1e20:	0f c0       	rjmp	.+30     	; 0x1e40 <LCD_voidSendChar+0x166>
    1e22:	88 ec       	ldi	r24, 0xC8	; 200
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	9d 83       	std	Y+5, r25	; 0x05
    1e28:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	f1 f7       	brne	.-4      	; 0x1e2e <LCD_voidSendChar+0x154>
    1e32:	9d 83       	std	Y+5, r25	; 0x05
    1e34:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e36:	8e 81       	ldd	r24, Y+6	; 0x06
    1e38:	9f 81       	ldd	r25, Y+7	; 0x07
    1e3a:	01 97       	sbiw	r24, 0x01	; 1
    1e3c:	9f 83       	std	Y+7, r25	; 0x07
    1e3e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e40:	8e 81       	ldd	r24, Y+6	; 0x06
    1e42:	9f 81       	ldd	r25, Y+7	; 0x07
    1e44:	00 97       	sbiw	r24, 0x00	; 0
    1e46:	69 f7       	brne	.-38     	; 0x1e22 <LCD_voidSendChar+0x148>
    1e48:	24 c0       	rjmp	.+72     	; 0x1e92 <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e4a:	68 85       	ldd	r22, Y+8	; 0x08
    1e4c:	79 85       	ldd	r23, Y+9	; 0x09
    1e4e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e50:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	9f 83       	std	Y+7, r25	; 0x07
    1e5c:	8e 83       	std	Y+6, r24	; 0x06
    1e5e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e60:	9f 81       	ldd	r25, Y+7	; 0x07
    1e62:	9b 83       	std	Y+3, r25	; 0x03
    1e64:	8a 83       	std	Y+2, r24	; 0x02
    1e66:	8a 81       	ldd	r24, Y+2	; 0x02
    1e68:	9b 81       	ldd	r25, Y+3	; 0x03
    1e6a:	01 97       	sbiw	r24, 0x01	; 1
    1e6c:	f1 f7       	brne	.-4      	; 0x1e6a <LCD_voidSendChar+0x190>
    1e6e:	9b 83       	std	Y+3, r25	; 0x03
    1e70:	8a 83       	std	Y+2, r24	; 0x02
    1e72:	0f c0       	rjmp	.+30     	; 0x1e92 <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e74:	69 89       	ldd	r22, Y+17	; 0x11
    1e76:	7a 89       	ldd	r23, Y+18	; 0x12
    1e78:	8b 89       	ldd	r24, Y+19	; 0x13
    1e7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	88 8b       	std	Y+16, r24	; 0x10
    1e86:	88 89       	ldd	r24, Y+16	; 0x10
    1e88:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	8a 95       	dec	r24
    1e8e:	f1 f7       	brne	.-4      	; 0x1e8c <LCD_voidSendChar+0x1b2>
    1e90:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_LOW);
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	62 e0       	ldi	r22, 0x02	; 2
    1e96:	40 e0       	ldi	r20, 0x00	; 0
    1e98:	0e 94 79 08 	call	0x10f2	; 0x10f2 <DIO_voidSetPinValue>
	
}
    1e9c:	69 96       	adiw	r28, 0x19	; 25
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	f8 94       	cli
    1ea2:	de bf       	out	0x3e, r29	; 62
    1ea4:	0f be       	out	0x3f, r0	; 63
    1ea6:	cd bf       	out	0x3d, r28	; 61
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	08 95       	ret

00001eae <LCD_voidSendString>:

void LCD_voidSendString	(u8 *Copy_u8String){
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	00 d0       	rcall	.+0      	; 0x1eb4 <LCD_voidSendString+0x6>
    1eb4:	0f 92       	push	r0
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    1eba:	9b 83       	std	Y+3, r25	; 0x03
    1ebc:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_U8Counter ;
	for (Local_U8Counter = 0 ; Copy_u8String[Local_U8Counter] != '\0' ; Local_U8Counter++){
    1ebe:	19 82       	std	Y+1, r1	; 0x01
    1ec0:	0e c0       	rjmp	.+28     	; 0x1ede <LCD_voidSendString+0x30>
		LCD_voidSendChar(Copy_u8String[Local_U8Counter]);}
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	28 2f       	mov	r18, r24
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eca:	9b 81       	ldd	r25, Y+3	; 0x03
    1ecc:	fc 01       	movw	r30, r24
    1ece:	e2 0f       	add	r30, r18
    1ed0:	f3 1f       	adc	r31, r19
    1ed2:	80 81       	ld	r24, Z
    1ed4:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <LCD_voidSendChar>
}

void LCD_voidSendString	(u8 *Copy_u8String){

	u8 Local_U8Counter ;
	for (Local_U8Counter = 0 ; Copy_u8String[Local_U8Counter] != '\0' ; Local_U8Counter++){
    1ed8:	89 81       	ldd	r24, Y+1	; 0x01
    1eda:	8f 5f       	subi	r24, 0xFF	; 255
    1edc:	89 83       	std	Y+1, r24	; 0x01
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
    1ee0:	28 2f       	mov	r18, r24
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee8:	fc 01       	movw	r30, r24
    1eea:	e2 0f       	add	r30, r18
    1eec:	f3 1f       	adc	r31, r19
    1eee:	80 81       	ld	r24, Z
    1ef0:	88 23       	and	r24, r24
    1ef2:	39 f7       	brne	.-50     	; 0x1ec2 <LCD_voidSendString+0x14>
		LCD_voidSendChar(Copy_u8String[Local_U8Counter]);}
	
	
}
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	08 95       	ret

00001f00 <LCD_voidSetLocation>:

void LCD_voidSetLocation(u8 Copy_u8LineNum, u8 Copy_u8CharNum){
    1f00:	df 93       	push	r29
    1f02:	cf 93       	push	r28
    1f04:	00 d0       	rcall	.+0      	; 0x1f06 <LCD_voidSetLocation+0x6>
    1f06:	00 d0       	rcall	.+0      	; 0x1f08 <LCD_voidSetLocation+0x8>
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	89 83       	std	Y+1, r24	; 0x01
    1f0e:	6a 83       	std	Y+2, r22	; 0x02
	
	switch(Copy_u8LineNum)
    1f10:	89 81       	ldd	r24, Y+1	; 0x01
    1f12:	28 2f       	mov	r18, r24
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	3c 83       	std	Y+4, r19	; 0x04
    1f18:	2b 83       	std	Y+3, r18	; 0x03
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1e:	81 30       	cpi	r24, 0x01	; 1
    1f20:	91 05       	cpc	r25, r1
    1f22:	31 f0       	breq	.+12     	; 0x1f30 <LCD_voidSetLocation+0x30>
    1f24:	2b 81       	ldd	r18, Y+3	; 0x03
    1f26:	3c 81       	ldd	r19, Y+4	; 0x04
    1f28:	22 30       	cpi	r18, 0x02	; 2
    1f2a:	31 05       	cpc	r19, r1
    1f2c:	31 f0       	breq	.+12     	; 0x1f3a <LCD_voidSetLocation+0x3a>
    1f2e:	09 c0       	rjmp	.+18     	; 0x1f42 <LCD_voidSetLocation+0x42>
	{
	case LCD_LINE1 : LCD_voidSendCommand(0x80 + Copy_u8CharNum); break;
    1f30:	8a 81       	ldd	r24, Y+2	; 0x02
    1f32:	80 58       	subi	r24, 0x80	; 128
    1f34:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <LCD_voidSendCommand>
    1f38:	04 c0       	rjmp	.+8      	; 0x1f42 <LCD_voidSetLocation+0x42>

	case LCD_LINE2 : LCD_voidSendCommand(0xC0 + Copy_u8CharNum); break;
    1f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3c:	80 54       	subi	r24, 0x40	; 64
    1f3e:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <LCD_voidSendCommand>

	}
	
}
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	cf 91       	pop	r28
    1f4c:	df 91       	pop	r29
    1f4e:	08 95       	ret

00001f50 <LCD_voidSendNumber>:

void LCD_voidSendNumber	(u32 Copy_u32Number){
    1f50:	0f 93       	push	r16
    1f52:	1f 93       	push	r17
    1f54:	df 93       	push	r29
    1f56:	cf 93       	push	r28
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	60 97       	sbiw	r28, 0x10	; 16
    1f5e:	0f b6       	in	r0, 0x3f	; 63
    1f60:	f8 94       	cli
    1f62:	de bf       	out	0x3e, r29	; 62
    1f64:	0f be       	out	0x3f, r0	; 63
    1f66:	cd bf       	out	0x3d, r28	; 61
    1f68:	6d 87       	std	Y+13, r22	; 0x0d
    1f6a:	7e 87       	std	Y+14, r23	; 0x0e
    1f6c:	8f 87       	std	Y+15, r24	; 0x0f
    1f6e:	98 8b       	std	Y+16, r25	; 0x10
	u8 Local_u8ASingleNum[11], Local_u8Count = 9;
    1f70:	89 e0       	ldi	r24, 0x09	; 9
    1f72:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u32Number == 0) { LCD_voidSendChar('0');}
    1f74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f78:	af 85       	ldd	r26, Y+15	; 0x0f
    1f7a:	b8 89       	ldd	r27, Y+16	; 0x10
    1f7c:	00 97       	sbiw	r24, 0x00	; 0
    1f7e:	a1 05       	cpc	r26, r1
    1f80:	b1 05       	cpc	r27, r1
    1f82:	21 f4       	brne	.+8      	; 0x1f8c <LCD_voidSendNumber+0x3c>
    1f84:	80 e3       	ldi	r24, 0x30	; 48
    1f86:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <LCD_voidSendChar>
    1f8a:	44 c0       	rjmp	.+136    	; 0x2014 <LCD_voidSendNumber+0xc4>
	else{
		Local_u8ASingleNum[10] = '\0' ;
    1f8c:	1c 86       	std	Y+12, r1	; 0x0c
    1f8e:	2e c0       	rjmp	.+92     	; 0x1fec <LCD_voidSendNumber+0x9c>
		while (Copy_u32Number != 0)
		{
			Local_u8ASingleNum[Local_u8Count] = ((Copy_u32Number % 10) + '0') ;
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	08 2f       	mov	r16, r24
    1f94:	10 e0       	ldi	r17, 0x00	; 0
    1f96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f9a:	af 85       	ldd	r26, Y+15	; 0x0f
    1f9c:	b8 89       	ldd	r27, Y+16	; 0x10
    1f9e:	2a e0       	ldi	r18, 0x0A	; 10
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	40 e0       	ldi	r20, 0x00	; 0
    1fa4:	50 e0       	ldi	r21, 0x00	; 0
    1fa6:	bc 01       	movw	r22, r24
    1fa8:	cd 01       	movw	r24, r26
    1faa:	0e 94 3e 18 	call	0x307c	; 0x307c <__udivmodsi4>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	28 2f       	mov	r18, r24
    1fb4:	20 5d       	subi	r18, 0xD0	; 208
    1fb6:	ce 01       	movw	r24, r28
    1fb8:	02 96       	adiw	r24, 0x02	; 2
    1fba:	fc 01       	movw	r30, r24
    1fbc:	e0 0f       	add	r30, r16
    1fbe:	f1 1f       	adc	r31, r17
    1fc0:	20 83       	st	Z, r18
			Copy_u32Number /= 10 ;
    1fc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc6:	af 85       	ldd	r26, Y+15	; 0x0f
    1fc8:	b8 89       	ldd	r27, Y+16	; 0x10
    1fca:	2a e0       	ldi	r18, 0x0A	; 10
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	40 e0       	ldi	r20, 0x00	; 0
    1fd0:	50 e0       	ldi	r21, 0x00	; 0
    1fd2:	bc 01       	movw	r22, r24
    1fd4:	cd 01       	movw	r24, r26
    1fd6:	0e 94 3e 18 	call	0x307c	; 0x307c <__udivmodsi4>
    1fda:	da 01       	movw	r26, r20
    1fdc:	c9 01       	movw	r24, r18
    1fde:	8d 87       	std	Y+13, r24	; 0x0d
    1fe0:	9e 87       	std	Y+14, r25	; 0x0e
    1fe2:	af 87       	std	Y+15, r26	; 0x0f
    1fe4:	b8 8b       	std	Y+16, r27	; 0x10
			Local_u8Count--;
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	81 50       	subi	r24, 0x01	; 1
    1fea:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8ASingleNum[11], Local_u8Count = 9;
	
	if (Copy_u32Number == 0) { LCD_voidSendChar('0');}
	else{
		Local_u8ASingleNum[10] = '\0' ;
		while (Copy_u32Number != 0)
    1fec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ff0:	af 85       	ldd	r26, Y+15	; 0x0f
    1ff2:	b8 89       	ldd	r27, Y+16	; 0x10
    1ff4:	00 97       	sbiw	r24, 0x00	; 0
    1ff6:	a1 05       	cpc	r26, r1
    1ff8:	b1 05       	cpc	r27, r1
    1ffa:	51 f6       	brne	.-108    	; 0x1f90 <LCD_voidSendNumber+0x40>
			Local_u8ASingleNum[Local_u8Count] = ((Copy_u32Number % 10) + '0') ;
			Copy_u32Number /= 10 ;
			Local_u8Count--;
		}
		/* send address of the first number in my array till the '\0' */
		LCD_voidSendString(Local_u8ASingleNum + Local_u8Count + 1);
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
    1ffe:	88 2f       	mov	r24, r24
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	9c 01       	movw	r18, r24
    2004:	2f 5f       	subi	r18, 0xFF	; 255
    2006:	3f 4f       	sbci	r19, 0xFF	; 255
    2008:	ce 01       	movw	r24, r28
    200a:	02 96       	adiw	r24, 0x02	; 2
    200c:	82 0f       	add	r24, r18
    200e:	93 1f       	adc	r25, r19
    2010:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_voidSendString>
	}
}
    2014:	60 96       	adiw	r28, 0x10	; 16
    2016:	0f b6       	in	r0, 0x3f	; 63
    2018:	f8 94       	cli
    201a:	de bf       	out	0x3e, r29	; 62
    201c:	0f be       	out	0x3f, r0	; 63
    201e:	cd bf       	out	0x3d, r28	; 61
    2020:	cf 91       	pop	r28
    2022:	df 91       	pop	r29
    2024:	1f 91       	pop	r17
    2026:	0f 91       	pop	r16
    2028:	08 95       	ret

0000202a <LCD_voidDrawSpecialChar>:


void LCD_voidDrawSpecialChar(u8 Copy_u8CharIndex, u8 *Copy_u8SpecialChar){
    202a:	df 93       	push	r29
    202c:	cf 93       	push	r28
    202e:	cd b7       	in	r28, 0x3d	; 61
    2030:	de b7       	in	r29, 0x3e	; 62
    2032:	6c 97       	sbiw	r28, 0x1c	; 28
    2034:	0f b6       	in	r0, 0x3f	; 63
    2036:	f8 94       	cli
    2038:	de bf       	out	0x3e, r29	; 62
    203a:	0f be       	out	0x3f, r0	; 63
    203c:	cd bf       	out	0x3d, r28	; 61
    203e:	8a 8f       	std	Y+26, r24	; 0x1a
    2040:	7c 8f       	std	Y+28, r23	; 0x1c
    2042:	6b 8f       	std	Y+27, r22	; 0x1b
	
	LCD_voidSendCommand(0b01000000+(Copy_u8CharIndex * 8));
    2044:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2046:	88 2f       	mov	r24, r24
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	08 96       	adiw	r24, 0x08	; 8
    204c:	88 0f       	add	r24, r24
    204e:	99 1f       	adc	r25, r25
    2050:	88 0f       	add	r24, r24
    2052:	99 1f       	adc	r25, r25
    2054:	88 0f       	add	r24, r24
    2056:	99 1f       	adc	r25, r25
    2058:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <LCD_voidSendCommand>
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	a0 e2       	ldi	r26, 0x20	; 32
    2062:	b2 e4       	ldi	r27, 0x42	; 66
    2064:	8d 8b       	std	Y+21, r24	; 0x15
    2066:	9e 8b       	std	Y+22, r25	; 0x16
    2068:	af 8b       	std	Y+23, r26	; 0x17
    206a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    206c:	6d 89       	ldd	r22, Y+21	; 0x15
    206e:	7e 89       	ldd	r23, Y+22	; 0x16
    2070:	8f 89       	ldd	r24, Y+23	; 0x17
    2072:	98 8d       	ldd	r25, Y+24	; 0x18
    2074:	2b ea       	ldi	r18, 0xAB	; 171
    2076:	3a ea       	ldi	r19, 0xAA	; 170
    2078:	4a e2       	ldi	r20, 0x2A	; 42
    207a:	50 e4       	ldi	r21, 0x40	; 64
    207c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	89 8b       	std	Y+17, r24	; 0x11
    2086:	9a 8b       	std	Y+18, r25	; 0x12
    2088:	ab 8b       	std	Y+19, r26	; 0x13
    208a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    208c:	69 89       	ldd	r22, Y+17	; 0x11
    208e:	7a 89       	ldd	r23, Y+18	; 0x12
    2090:	8b 89       	ldd	r24, Y+19	; 0x13
    2092:	9c 89       	ldd	r25, Y+20	; 0x14
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	40 e8       	ldi	r20, 0x80	; 128
    209a:	5f e3       	ldi	r21, 0x3F	; 63
    209c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20a0:	88 23       	and	r24, r24
    20a2:	1c f4       	brge	.+6      	; 0x20aa <LCD_voidDrawSpecialChar+0x80>
		__ticks = 1;
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	88 8b       	std	Y+16, r24	; 0x10
    20a8:	91 c0       	rjmp	.+290    	; 0x21cc <LCD_voidDrawSpecialChar+0x1a2>
	else if (__tmp > 255)
    20aa:	69 89       	ldd	r22, Y+17	; 0x11
    20ac:	7a 89       	ldd	r23, Y+18	; 0x12
    20ae:	8b 89       	ldd	r24, Y+19	; 0x13
    20b0:	9c 89       	ldd	r25, Y+20	; 0x14
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	4f e7       	ldi	r20, 0x7F	; 127
    20b8:	53 e4       	ldi	r21, 0x43	; 67
    20ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20be:	18 16       	cp	r1, r24
    20c0:	0c f0       	brlt	.+2      	; 0x20c4 <LCD_voidDrawSpecialChar+0x9a>
    20c2:	7b c0       	rjmp	.+246    	; 0x21ba <LCD_voidDrawSpecialChar+0x190>
	{
		_delay_ms(__us / 1000.0);
    20c4:	6d 89       	ldd	r22, Y+21	; 0x15
    20c6:	7e 89       	ldd	r23, Y+22	; 0x16
    20c8:	8f 89       	ldd	r24, Y+23	; 0x17
    20ca:	98 8d       	ldd	r25, Y+24	; 0x18
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	4a e7       	ldi	r20, 0x7A	; 122
    20d2:	54 e4       	ldi	r21, 0x44	; 68
    20d4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	8c 87       	std	Y+12, r24	; 0x0c
    20de:	9d 87       	std	Y+13, r25	; 0x0d
    20e0:	ae 87       	std	Y+14, r26	; 0x0e
    20e2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e4:	6c 85       	ldd	r22, Y+12	; 0x0c
    20e6:	7d 85       	ldd	r23, Y+13	; 0x0d
    20e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    20ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	4a ef       	ldi	r20, 0xFA	; 250
    20f2:	54 e4       	ldi	r21, 0x44	; 68
    20f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	88 87       	std	Y+8, r24	; 0x08
    20fe:	99 87       	std	Y+9, r25	; 0x09
    2100:	aa 87       	std	Y+10, r26	; 0x0a
    2102:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2104:	68 85       	ldd	r22, Y+8	; 0x08
    2106:	79 85       	ldd	r23, Y+9	; 0x09
    2108:	8a 85       	ldd	r24, Y+10	; 0x0a
    210a:	9b 85       	ldd	r25, Y+11	; 0x0b
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	40 e8       	ldi	r20, 0x80	; 128
    2112:	5f e3       	ldi	r21, 0x3F	; 63
    2114:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2118:	88 23       	and	r24, r24
    211a:	2c f4       	brge	.+10     	; 0x2126 <LCD_voidDrawSpecialChar+0xfc>
		__ticks = 1;
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	9f 83       	std	Y+7, r25	; 0x07
    2122:	8e 83       	std	Y+6, r24	; 0x06
    2124:	3f c0       	rjmp	.+126    	; 0x21a4 <LCD_voidDrawSpecialChar+0x17a>
	else if (__tmp > 65535)
    2126:	68 85       	ldd	r22, Y+8	; 0x08
    2128:	79 85       	ldd	r23, Y+9	; 0x09
    212a:	8a 85       	ldd	r24, Y+10	; 0x0a
    212c:	9b 85       	ldd	r25, Y+11	; 0x0b
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	3f ef       	ldi	r19, 0xFF	; 255
    2132:	4f e7       	ldi	r20, 0x7F	; 127
    2134:	57 e4       	ldi	r21, 0x47	; 71
    2136:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    213a:	18 16       	cp	r1, r24
    213c:	4c f5       	brge	.+82     	; 0x2190 <LCD_voidDrawSpecialChar+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    213e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2140:	7d 85       	ldd	r23, Y+13	; 0x0d
    2142:	8e 85       	ldd	r24, Y+14	; 0x0e
    2144:	9f 85       	ldd	r25, Y+15	; 0x0f
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	40 e2       	ldi	r20, 0x20	; 32
    214c:	51 e4       	ldi	r21, 0x41	; 65
    214e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	bc 01       	movw	r22, r24
    2158:	cd 01       	movw	r24, r26
    215a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	9f 83       	std	Y+7, r25	; 0x07
    2164:	8e 83       	std	Y+6, r24	; 0x06
    2166:	0f c0       	rjmp	.+30     	; 0x2186 <LCD_voidDrawSpecialChar+0x15c>
    2168:	88 ec       	ldi	r24, 0xC8	; 200
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	9d 83       	std	Y+5, r25	; 0x05
    216e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2170:	8c 81       	ldd	r24, Y+4	; 0x04
    2172:	9d 81       	ldd	r25, Y+5	; 0x05
    2174:	01 97       	sbiw	r24, 0x01	; 1
    2176:	f1 f7       	brne	.-4      	; 0x2174 <LCD_voidDrawSpecialChar+0x14a>
    2178:	9d 83       	std	Y+5, r25	; 0x05
    217a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217c:	8e 81       	ldd	r24, Y+6	; 0x06
    217e:	9f 81       	ldd	r25, Y+7	; 0x07
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	9f 83       	std	Y+7, r25	; 0x07
    2184:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2186:	8e 81       	ldd	r24, Y+6	; 0x06
    2188:	9f 81       	ldd	r25, Y+7	; 0x07
    218a:	00 97       	sbiw	r24, 0x00	; 0
    218c:	69 f7       	brne	.-38     	; 0x2168 <LCD_voidDrawSpecialChar+0x13e>
    218e:	24 c0       	rjmp	.+72     	; 0x21d8 <LCD_voidDrawSpecialChar+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2190:	68 85       	ldd	r22, Y+8	; 0x08
    2192:	79 85       	ldd	r23, Y+9	; 0x09
    2194:	8a 85       	ldd	r24, Y+10	; 0x0a
    2196:	9b 85       	ldd	r25, Y+11	; 0x0b
    2198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	9f 83       	std	Y+7, r25	; 0x07
    21a2:	8e 83       	std	Y+6, r24	; 0x06
    21a4:	8e 81       	ldd	r24, Y+6	; 0x06
    21a6:	9f 81       	ldd	r25, Y+7	; 0x07
    21a8:	9b 83       	std	Y+3, r25	; 0x03
    21aa:	8a 83       	std	Y+2, r24	; 0x02
    21ac:	8a 81       	ldd	r24, Y+2	; 0x02
    21ae:	9b 81       	ldd	r25, Y+3	; 0x03
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	f1 f7       	brne	.-4      	; 0x21b0 <LCD_voidDrawSpecialChar+0x186>
    21b4:	9b 83       	std	Y+3, r25	; 0x03
    21b6:	8a 83       	std	Y+2, r24	; 0x02
    21b8:	0f c0       	rjmp	.+30     	; 0x21d8 <LCD_voidDrawSpecialChar+0x1ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21ba:	69 89       	ldd	r22, Y+17	; 0x11
    21bc:	7a 89       	ldd	r23, Y+18	; 0x12
    21be:	8b 89       	ldd	r24, Y+19	; 0x13
    21c0:	9c 89       	ldd	r25, Y+20	; 0x14
    21c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	88 8b       	std	Y+16, r24	; 0x10
    21cc:	88 89       	ldd	r24, Y+16	; 0x10
    21ce:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
    21d2:	8a 95       	dec	r24
    21d4:	f1 f7       	brne	.-4      	; 0x21d2 <LCD_voidDrawSpecialChar+0x1a8>
    21d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(40);
	u8 LCD_U8Counter ;
	for (LCD_U8Counter=0 ; LCD_U8Counter<8 ; LCD_U8Counter++)
    21d8:	19 8e       	std	Y+25, r1	; 0x19
    21da:	0e c0       	rjmp	.+28     	; 0x21f8 <LCD_voidDrawSpecialChar+0x1ce>
	{
		LCD_voidSendChar(Copy_u8SpecialChar[LCD_U8Counter]);
    21dc:	89 8d       	ldd	r24, Y+25	; 0x19
    21de:	28 2f       	mov	r18, r24
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21e6:	fc 01       	movw	r30, r24
    21e8:	e2 0f       	add	r30, r18
    21ea:	f3 1f       	adc	r31, r19
    21ec:	80 81       	ld	r24, Z
    21ee:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <LCD_voidSendChar>
void LCD_voidDrawSpecialChar(u8 Copy_u8CharIndex, u8 *Copy_u8SpecialChar){
	
	LCD_voidSendCommand(0b01000000+(Copy_u8CharIndex * 8));
	_delay_us(40);
	u8 LCD_U8Counter ;
	for (LCD_U8Counter=0 ; LCD_U8Counter<8 ; LCD_U8Counter++)
    21f2:	89 8d       	ldd	r24, Y+25	; 0x19
    21f4:	8f 5f       	subi	r24, 0xFF	; 255
    21f6:	89 8f       	std	Y+25, r24	; 0x19
    21f8:	89 8d       	ldd	r24, Y+25	; 0x19
    21fa:	88 30       	cpi	r24, 0x08	; 8
    21fc:	78 f3       	brcs	.-34     	; 0x21dc <LCD_voidDrawSpecialChar+0x1b2>
	{
		LCD_voidSendChar(Copy_u8SpecialChar[LCD_U8Counter]);
	}


}
    21fe:	6c 96       	adiw	r28, 0x1c	; 28
    2200:	0f b6       	in	r0, 0x3f	; 63
    2202:	f8 94       	cli
    2204:	de bf       	out	0x3e, r29	; 62
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	cd bf       	out	0x3d, r28	; 61
    220a:	cf 91       	pop	r28
    220c:	df 91       	pop	r29
    220e:	08 95       	ret

00002210 <LCD_voidSendSpecialChar>:

void LCD_voidSendSpecialChar(u8 Copy_u8CharIndex){
    2210:	df 93       	push	r29
    2212:	cf 93       	push	r28
    2214:	0f 92       	push	r0
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	89 83       	std	Y+1, r24	; 0x01
	
	LCD_voidSendChar(Copy_u8CharIndex);
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <LCD_voidSendChar>
}
    2222:	0f 90       	pop	r0
    2224:	cf 91       	pop	r28
    2226:	df 91       	pop	r29
    2228:	08 95       	ret

0000222a <TIM0_voidInit>:
/* Global pointer to function */
void (*TIM0_pfTIM0Ovf)(void);
void (*TIM0_pfTIM0Cmp)(void);


void TIM0_voidInit	(void){
    222a:	df 93       	push	r29
    222c:	cf 93       	push	r28
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, WGM01);
#elif TIM0_MODE == PWM_PHASE
	CLR_BIT(TCCR0, WGM01);
	SET_BIT(TCCR0, WGM00);
#elif  TIM0_MODE == FAST_PWM
	SET_BIT(TCCR0, WGM00);
    2232:	a3 e5       	ldi	r26, 0x53	; 83
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	e3 e5       	ldi	r30, 0x53	; 83
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	80 64       	ori	r24, 0x40	; 64
    223e:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    2240:	a3 e5       	ldi	r26, 0x53	; 83
    2242:	b0 e0       	ldi	r27, 0x00	; 0
    2244:	e3 e5       	ldi	r30, 0x53	; 83
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	88 60       	ori	r24, 0x08	; 8
    224c:	8c 93       	st	X, r24
#endif

}
    224e:	cf 91       	pop	r28
    2250:	df 91       	pop	r29
    2252:	08 95       	ret

00002254 <TIM0_voidSetPreValue>:


void TIM0_voidSetPreValue	(u8 Copy_u8CounterStartVal){
    2254:	df 93       	push	r29
    2256:	cf 93       	push	r28
    2258:	0f 92       	push	r0
    225a:	cd b7       	in	r28, 0x3d	; 61
    225c:	de b7       	in	r29, 0x3e	; 62
    225e:	89 83       	std	Y+1, r24	; 0x01
	/* set timer start value */
	TCNT0 = Copy_u8CounterStartVal;
    2260:	e2 e5       	ldi	r30, 0x52	; 82
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	80 83       	st	Z, r24

}
    2268:	0f 90       	pop	r0
    226a:	cf 91       	pop	r28
    226c:	df 91       	pop	r29
    226e:	08 95       	ret

00002270 <TIM0_voidTimerStart>:


void TIM0_voidTimerStart	(u8 Copy_u8Prescaler){
    2270:	df 93       	push	r29
    2272:	cf 93       	push	r28
    2274:	0f 92       	push	r0
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
    227a:	89 83       	std	Y+1, r24	; 0x01
	/* Set prescaler */
	TCCR0 &= 0b11111000;
    227c:	a3 e5       	ldi	r26, 0x53	; 83
    227e:	b0 e0       	ldi	r27, 0x00	; 0
    2280:	e3 e5       	ldi	r30, 0x53	; 83
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 81       	ld	r24, Z
    2286:	88 7f       	andi	r24, 0xF8	; 248
    2288:	8c 93       	st	X, r24
	TCCR0 |= Copy_u8Prescaler;
    228a:	a3 e5       	ldi	r26, 0x53	; 83
    228c:	b0 e0       	ldi	r27, 0x00	; 0
    228e:	e3 e5       	ldi	r30, 0x53	; 83
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	90 81       	ld	r25, Z
    2294:	89 81       	ldd	r24, Y+1	; 0x01
    2296:	89 2b       	or	r24, r25
    2298:	8c 93       	st	X, r24

}
    229a:	0f 90       	pop	r0
    229c:	cf 91       	pop	r28
    229e:	df 91       	pop	r29
    22a0:	08 95       	ret

000022a2 <TIM0_voidOvrINTControl>:


void TIM0_voidOvrINTControl (u8 Copy_u8InterruptConl){
    22a2:	df 93       	push	r29
    22a4:	cf 93       	push	r28
    22a6:	0f 92       	push	r0
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
    22ac:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8InterruptConl == TIM0_TIN_EABLE)
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	81 30       	cpi	r24, 0x01	; 1
    22b2:	41 f4       	brne	.+16     	; 0x22c4 <TIM0_voidOvrINTControl+0x22>
		{SET_BIT(TIMSK, TOIE0);}
    22b4:	a9 e5       	ldi	r26, 0x59	; 89
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	e9 e5       	ldi	r30, 0x59	; 89
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	81 60       	ori	r24, 0x01	; 1
    22c0:	8c 93       	st	X, r24
    22c2:	07 c0       	rjmp	.+14     	; 0x22d2 <TIM0_voidOvrINTControl+0x30>
	else
		{CLR_BIT(TIMSK, TOIE0);}
    22c4:	a9 e5       	ldi	r26, 0x59	; 89
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	e9 e5       	ldi	r30, 0x59	; 89
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	8e 7f       	andi	r24, 0xFE	; 254
    22d0:	8c 93       	st	X, r24

}
    22d2:	0f 90       	pop	r0
    22d4:	cf 91       	pop	r28
    22d6:	df 91       	pop	r29
    22d8:	08 95       	ret

000022da <TIM0_voidSetCompareMat>:


void TIM0_voidSetCompareMat (u8 Copy_u8CmpMatVal, u8 Copy_u8OC0PinAction){
    22da:	df 93       	push	r29
    22dc:	cf 93       	push	r28
    22de:	00 d0       	rcall	.+0      	; 0x22e0 <TIM0_voidSetCompareMat+0x6>
    22e0:	00 d0       	rcall	.+0      	; 0x22e2 <TIM0_voidSetCompareMat+0x8>
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
    22e6:	89 83       	std	Y+1, r24	; 0x01
    22e8:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_u8OC0PinAction)
    22ea:	8a 81       	ldd	r24, Y+2	; 0x02
    22ec:	28 2f       	mov	r18, r24
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	3c 83       	std	Y+4, r19	; 0x04
    22f2:	2b 83       	std	Y+3, r18	; 0x03
    22f4:	8b 81       	ldd	r24, Y+3	; 0x03
    22f6:	9c 81       	ldd	r25, Y+4	; 0x04
    22f8:	82 30       	cpi	r24, 0x02	; 2
    22fa:	91 05       	cpc	r25, r1
    22fc:	c9 f0       	breq	.+50     	; 0x2330 <TIM0_voidSetCompareMat+0x56>
    22fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2300:	3c 81       	ldd	r19, Y+4	; 0x04
    2302:	23 30       	cpi	r18, 0x03	; 3
    2304:	31 05       	cpc	r19, r1
    2306:	19 f1       	breq	.+70     	; 0x234e <TIM0_voidSetCompareMat+0x74>
    2308:	8b 81       	ldd	r24, Y+3	; 0x03
    230a:	9c 81       	ldd	r25, Y+4	; 0x04
    230c:	81 30       	cpi	r24, 0x01	; 1
    230e:	91 05       	cpc	r25, r1
    2310:	69 f5       	brne	.+90     	; 0x236c <TIM0_voidSetCompareMat+0x92>
	{
		case TIM0_OC0_TOGGLE_PIN :
			SET_BIT(TCCR0, COM00);
    2312:	a3 e5       	ldi	r26, 0x53	; 83
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	e3 e5       	ldi	r30, 0x53	; 83
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	80 61       	ori	r24, 0x10	; 16
    231e:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, COM01);
    2320:	a3 e5       	ldi	r26, 0x53	; 83
    2322:	b0 e0       	ldi	r27, 0x00	; 0
    2324:	e3 e5       	ldi	r30, 0x53	; 83
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	80 81       	ld	r24, Z
    232a:	8f 7d       	andi	r24, 0xDF	; 223
    232c:	8c 93       	st	X, r24
    232e:	2c c0       	rjmp	.+88     	; 0x2388 <TIM0_voidSetCompareMat+0xae>
			break;

		case TIM0_OC0_CLEAR_PIN  :
			SET_BIT(TCCR0, COM01);
    2330:	a3 e5       	ldi	r26, 0x53	; 83
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	e3 e5       	ldi	r30, 0x53	; 83
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	80 81       	ld	r24, Z
    233a:	80 62       	ori	r24, 0x20	; 32
    233c:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, COM00);
    233e:	a3 e5       	ldi	r26, 0x53	; 83
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	e3 e5       	ldi	r30, 0x53	; 83
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
    2348:	8f 7e       	andi	r24, 0xEF	; 239
    234a:	8c 93       	st	X, r24
    234c:	1d c0       	rjmp	.+58     	; 0x2388 <TIM0_voidSetCompareMat+0xae>
			break;

		case TIM0_OC0_SET_PIN    :
			SET_BIT(TCCR0, COM00);
    234e:	a3 e5       	ldi	r26, 0x53	; 83
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	e3 e5       	ldi	r30, 0x53	; 83
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	80 61       	ori	r24, 0x10	; 16
    235a:	8c 93       	st	X, r24
			SET_BIT(TCCR0, COM01);
    235c:	a3 e5       	ldi	r26, 0x53	; 83
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	e3 e5       	ldi	r30, 0x53	; 83
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	80 81       	ld	r24, Z
    2366:	80 62       	ori	r24, 0x20	; 32
    2368:	8c 93       	st	X, r24
    236a:	0e c0       	rjmp	.+28     	; 0x2388 <TIM0_voidSetCompareMat+0xae>
			break;

		default				     :
			CLR_BIT(TCCR0, COM00);
    236c:	a3 e5       	ldi	r26, 0x53	; 83
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	e3 e5       	ldi	r30, 0x53	; 83
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	8f 7e       	andi	r24, 0xEF	; 239
    2378:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, COM01);
    237a:	a3 e5       	ldi	r26, 0x53	; 83
    237c:	b0 e0       	ldi	r27, 0x00	; 0
    237e:	e3 e5       	ldi	r30, 0x53	; 83
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	80 81       	ld	r24, Z
    2384:	8f 7d       	andi	r24, 0xDF	; 223
    2386:	8c 93       	st	X, r24
			break;
	}

	/* Set Compare value */
	OCR0 = Copy_u8CmpMatVal;
    2388:	ec e5       	ldi	r30, 0x5C	; 92
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	89 81       	ldd	r24, Y+1	; 0x01
    238e:	80 83       	st	Z, r24

}
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	0f 90       	pop	r0
    2398:	cf 91       	pop	r28
    239a:	df 91       	pop	r29
    239c:	08 95       	ret

0000239e <TIM0_voidPWMGenerator>:


void TIM0_voidPWMGenerator  (u8 Copy_u8DutyCycle, u8 Copy_u8OC0PinAction){
    239e:	0f 93       	push	r16
    23a0:	1f 93       	push	r17
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	00 d0       	rcall	.+0      	; 0x23a8 <TIM0_voidPWMGenerator+0xa>
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
    23ac:	89 83       	std	Y+1, r24	; 0x01
    23ae:	6a 83       	std	Y+2, r22	; 0x02

#if TIM0_MODE == FAST_PWM
	if(Copy_u8OC0PinAction == TIM0_OC0_SET_CMP_CLR_OVF){
    23b0:	8a 81       	ldd	r24, Y+2	; 0x02
    23b2:	81 30       	cpi	r24, 0x01	; 1
    23b4:	09 f0       	breq	.+2      	; 0x23b8 <TIM0_voidPWMGenerator+0x1a>
    23b6:	44 c0       	rjmp	.+136    	; 0x2440 <TIM0_voidPWMGenerator+0xa2>
		SET_BIT(TCCR0, COM00);
    23b8:	a3 e5       	ldi	r26, 0x53	; 83
    23ba:	b0 e0       	ldi	r27, 0x00	; 0
    23bc:	e3 e5       	ldi	r30, 0x53	; 83
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	80 61       	ori	r24, 0x10	; 16
    23c4:	8c 93       	st	X, r24
		SET_BIT(TCCR0, COM01);
    23c6:	a3 e5       	ldi	r26, 0x53	; 83
    23c8:	b0 e0       	ldi	r27, 0x00	; 0
    23ca:	e3 e5       	ldi	r30, 0x53	; 83
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	80 81       	ld	r24, Z
    23d0:	80 62       	ori	r24, 0x20	; 32
    23d2:	8c 93       	st	X, r24
		OCR0 = (256 - ((Copy_u8DutyCycle/100.0)*256));
    23d4:	0c e5       	ldi	r16, 0x5C	; 92
    23d6:	10 e0       	ldi	r17, 0x00	; 0
    23d8:	89 81       	ldd	r24, Y+1	; 0x01
    23da:	88 2f       	mov	r24, r24
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	aa 27       	eor	r26, r26
    23e0:	97 fd       	sbrc	r25, 7
    23e2:	a0 95       	com	r26
    23e4:	ba 2f       	mov	r27, r26
    23e6:	bc 01       	movw	r22, r24
    23e8:	cd 01       	movw	r24, r26
    23ea:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	bc 01       	movw	r22, r24
    23f4:	cd 01       	movw	r24, r26
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	48 ec       	ldi	r20, 0xC8	; 200
    23fc:	52 e4       	ldi	r21, 0x42	; 66
    23fe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	bc 01       	movw	r22, r24
    2408:	cd 01       	movw	r24, r26
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	40 e8       	ldi	r20, 0x80	; 128
    2410:	53 ec       	ldi	r21, 0xC3	; 195
    2412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	bc 01       	movw	r22, r24
    241c:	cd 01       	movw	r24, r26
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	40 e8       	ldi	r20, 0x80	; 128
    2424:	53 e4       	ldi	r21, 0x43	; 67
    2426:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	bc 01       	movw	r22, r24
    2430:	cd 01       	movw	r24, r26
    2432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	f8 01       	movw	r30, r16
    243c:	80 83       	st	Z, r24
    243e:	39 c0       	rjmp	.+114    	; 0x24b2 <TIM0_voidPWMGenerator+0x114>
	}
	else{
		SET_BIT(TCCR0, COM01);
    2440:	a3 e5       	ldi	r26, 0x53	; 83
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	e3 e5       	ldi	r30, 0x53	; 83
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	80 81       	ld	r24, Z
    244a:	80 62       	ori	r24, 0x20	; 32
    244c:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, COM00);
    244e:	a3 e5       	ldi	r26, 0x53	; 83
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	e3 e5       	ldi	r30, 0x53	; 83
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	80 81       	ld	r24, Z
    2458:	8f 7e       	andi	r24, 0xEF	; 239
    245a:	8c 93       	st	X, r24
		OCR0 = ((Copy_u8DutyCycle/100.0)*256);
    245c:	0c e5       	ldi	r16, 0x5C	; 92
    245e:	10 e0       	ldi	r17, 0x00	; 0
    2460:	89 81       	ldd	r24, Y+1	; 0x01
    2462:	88 2f       	mov	r24, r24
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	aa 27       	eor	r26, r26
    2468:	97 fd       	sbrc	r25, 7
    246a:	a0 95       	com	r26
    246c:	ba 2f       	mov	r27, r26
    246e:	bc 01       	movw	r22, r24
    2470:	cd 01       	movw	r24, r26
    2472:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	bc 01       	movw	r22, r24
    247c:	cd 01       	movw	r24, r26
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	48 ec       	ldi	r20, 0xC8	; 200
    2484:	52 e4       	ldi	r21, 0x42	; 66
    2486:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	bc 01       	movw	r22, r24
    2490:	cd 01       	movw	r24, r26
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	40 e8       	ldi	r20, 0x80	; 128
    2498:	53 e4       	ldi	r21, 0x43	; 67
    249a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	bc 01       	movw	r22, r24
    24a4:	cd 01       	movw	r24, r26
    24a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24aa:	dc 01       	movw	r26, r24
    24ac:	cb 01       	movw	r24, r22
    24ae:	f8 01       	movw	r30, r16
    24b0:	80 83       	st	Z, r24
	}

#endif


}
    24b2:	0f 90       	pop	r0
    24b4:	0f 90       	pop	r0
    24b6:	cf 91       	pop	r28
    24b8:	df 91       	pop	r29
    24ba:	1f 91       	pop	r17
    24bc:	0f 91       	pop	r16
    24be:	08 95       	ret

000024c0 <TIM0_voidSetCmpValue>:




void TIM0_voidSetCmpValue	(u8 Copy_u8CmpMatVal){
    24c0:	df 93       	push	r29
    24c2:	cf 93       	push	r28
    24c4:	0f 92       	push	r0
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	89 83       	std	Y+1, r24	; 0x01

	/* Set Compare value */
	OCR0 = Copy_u8CmpMatVal;
    24cc:	ec e5       	ldi	r30, 0x5C	; 92
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	80 83       	st	Z, r24

}
    24d4:	0f 90       	pop	r0
    24d6:	cf 91       	pop	r28
    24d8:	df 91       	pop	r29
    24da:	08 95       	ret

000024dc <TIM0_voidCmpINTControl>:


void TIM0_voidCmpINTControl (u8 Copy_u8InterruptConl){
    24dc:	df 93       	push	r29
    24de:	cf 93       	push	r28
    24e0:	0f 92       	push	r0
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8InterruptConl == TIM0_TIN_EABLE)
    24e8:	89 81       	ldd	r24, Y+1	; 0x01
    24ea:	81 30       	cpi	r24, 0x01	; 1
    24ec:	41 f4       	brne	.+16     	; 0x24fe <TIM0_voidCmpINTControl+0x22>
		{SET_BIT(TIMSK, OCIE0);}
    24ee:	a9 e5       	ldi	r26, 0x59	; 89
    24f0:	b0 e0       	ldi	r27, 0x00	; 0
    24f2:	e9 e5       	ldi	r30, 0x59	; 89
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	80 81       	ld	r24, Z
    24f8:	82 60       	ori	r24, 0x02	; 2
    24fa:	8c 93       	st	X, r24
    24fc:	07 c0       	rjmp	.+14     	; 0x250c <TIM0_voidCmpINTControl+0x30>
	else
		{CLR_BIT(TIMSK, OCIE0);}
    24fe:	a9 e5       	ldi	r26, 0x59	; 89
    2500:	b0 e0       	ldi	r27, 0x00	; 0
    2502:	e9 e5       	ldi	r30, 0x59	; 89
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	80 81       	ld	r24, Z
    2508:	8d 7f       	andi	r24, 0xFD	; 253
    250a:	8c 93       	st	X, r24

}
    250c:	0f 90       	pop	r0
    250e:	cf 91       	pop	r28
    2510:	df 91       	pop	r29
    2512:	08 95       	ret

00002514 <TIM0_voidTimerStop>:


void TIM0_voidTimerStop		(void){
    2514:	df 93       	push	r29
    2516:	cf 93       	push	r28
    2518:	cd b7       	in	r28, 0x3d	; 61
    251a:	de b7       	in	r29, 0x3e	; 62

	TCCR0 &= 0b11111000;
    251c:	a3 e5       	ldi	r26, 0x53	; 83
    251e:	b0 e0       	ldi	r27, 0x00	; 0
    2520:	e3 e5       	ldi	r30, 0x53	; 83
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	80 81       	ld	r24, Z
    2526:	88 7f       	andi	r24, 0xF8	; 248
    2528:	8c 93       	st	X, r24

}
    252a:	cf 91       	pop	r28
    252c:	df 91       	pop	r29
    252e:	08 95       	ret

00002530 <TIM0_voidOvfCallback>:


void TIM0_voidOvfCallback   ( void (*Copy_pfTIM0Ovf)(void) ){
    2530:	df 93       	push	r29
    2532:	cf 93       	push	r28
    2534:	00 d0       	rcall	.+0      	; 0x2536 <TIM0_voidOvfCallback+0x6>
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
    253a:	9a 83       	std	Y+2, r25	; 0x02
    253c:	89 83       	std	Y+1, r24	; 0x01

	TIM0_pfTIM0Ovf = Copy_pfTIM0Ovf;
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	9a 81       	ldd	r25, Y+2	; 0x02
    2542:	90 93 c5 01 	sts	0x01C5, r25
    2546:	80 93 c4 01 	sts	0x01C4, r24
}
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	cf 91       	pop	r28
    2550:	df 91       	pop	r29
    2552:	08 95       	ret

00002554 <TIM0_voidCmpCallback>:


void TIM0_voidCmpCallback   ( void (*Copy_pfTIM0Cmp)(void) ){
    2554:	df 93       	push	r29
    2556:	cf 93       	push	r28
    2558:	00 d0       	rcall	.+0      	; 0x255a <TIM0_voidCmpCallback+0x6>
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
    255e:	9a 83       	std	Y+2, r25	; 0x02
    2560:	89 83       	std	Y+1, r24	; 0x01

	TIM0_pfTIM0Cmp = Copy_pfTIM0Cmp;
    2562:	89 81       	ldd	r24, Y+1	; 0x01
    2564:	9a 81       	ldd	r25, Y+2	; 0x02
    2566:	90 93 c3 01 	sts	0x01C3, r25
    256a:	80 93 c2 01 	sts	0x01C2, r24

}
    256e:	0f 90       	pop	r0
    2570:	0f 90       	pop	r0
    2572:	cf 91       	pop	r28
    2574:	df 91       	pop	r29
    2576:	08 95       	ret

00002578 <__vector_11>:


ISR(TIMER0_OVF_vect){
    2578:	1f 92       	push	r1
    257a:	0f 92       	push	r0
    257c:	0f b6       	in	r0, 0x3f	; 63
    257e:	0f 92       	push	r0
    2580:	11 24       	eor	r1, r1
    2582:	2f 93       	push	r18
    2584:	3f 93       	push	r19
    2586:	4f 93       	push	r20
    2588:	5f 93       	push	r21
    258a:	6f 93       	push	r22
    258c:	7f 93       	push	r23
    258e:	8f 93       	push	r24
    2590:	9f 93       	push	r25
    2592:	af 93       	push	r26
    2594:	bf 93       	push	r27
    2596:	ef 93       	push	r30
    2598:	ff 93       	push	r31
    259a:	df 93       	push	r29
    259c:	cf 93       	push	r28
    259e:	cd b7       	in	r28, 0x3d	; 61
    25a0:	de b7       	in	r29, 0x3e	; 62

	TIM0_pfTIM0Ovf();
    25a2:	e0 91 c4 01 	lds	r30, 0x01C4
    25a6:	f0 91 c5 01 	lds	r31, 0x01C5
    25aa:	09 95       	icall
}
    25ac:	cf 91       	pop	r28
    25ae:	df 91       	pop	r29
    25b0:	ff 91       	pop	r31
    25b2:	ef 91       	pop	r30
    25b4:	bf 91       	pop	r27
    25b6:	af 91       	pop	r26
    25b8:	9f 91       	pop	r25
    25ba:	8f 91       	pop	r24
    25bc:	7f 91       	pop	r23
    25be:	6f 91       	pop	r22
    25c0:	5f 91       	pop	r21
    25c2:	4f 91       	pop	r20
    25c4:	3f 91       	pop	r19
    25c6:	2f 91       	pop	r18
    25c8:	0f 90       	pop	r0
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	0f 90       	pop	r0
    25ce:	1f 90       	pop	r1
    25d0:	18 95       	reti

000025d2 <__vector_10>:


ISR(TIMER0_COMP_vect){
    25d2:	1f 92       	push	r1
    25d4:	0f 92       	push	r0
    25d6:	0f b6       	in	r0, 0x3f	; 63
    25d8:	0f 92       	push	r0
    25da:	11 24       	eor	r1, r1
    25dc:	2f 93       	push	r18
    25de:	3f 93       	push	r19
    25e0:	4f 93       	push	r20
    25e2:	5f 93       	push	r21
    25e4:	6f 93       	push	r22
    25e6:	7f 93       	push	r23
    25e8:	8f 93       	push	r24
    25ea:	9f 93       	push	r25
    25ec:	af 93       	push	r26
    25ee:	bf 93       	push	r27
    25f0:	ef 93       	push	r30
    25f2:	ff 93       	push	r31
    25f4:	df 93       	push	r29
    25f6:	cf 93       	push	r28
    25f8:	cd b7       	in	r28, 0x3d	; 61
    25fa:	de b7       	in	r29, 0x3e	; 62

	TIM0_pfTIM0Cmp();
    25fc:	e0 91 c2 01 	lds	r30, 0x01C2
    2600:	f0 91 c3 01 	lds	r31, 0x01C3
    2604:	09 95       	icall
}
    2606:	cf 91       	pop	r28
    2608:	df 91       	pop	r29
    260a:	ff 91       	pop	r31
    260c:	ef 91       	pop	r30
    260e:	bf 91       	pop	r27
    2610:	af 91       	pop	r26
    2612:	9f 91       	pop	r25
    2614:	8f 91       	pop	r24
    2616:	7f 91       	pop	r23
    2618:	6f 91       	pop	r22
    261a:	5f 91       	pop	r21
    261c:	4f 91       	pop	r20
    261e:	3f 91       	pop	r19
    2620:	2f 91       	pop	r18
    2622:	0f 90       	pop	r0
    2624:	0f be       	out	0x3f, r0	; 63
    2626:	0f 90       	pop	r0
    2628:	1f 90       	pop	r1
    262a:	18 95       	reti

0000262c <TMR1_SetCallBack>:
#include "TMR1_Interface.h"

void (*TMR1_GlobalPtr)(void) = '\0';

void TMR1_SetCallBack(void (*Ptr)(void))
{
    262c:	df 93       	push	r29
    262e:	cf 93       	push	r28
    2630:	00 d0       	rcall	.+0      	; 0x2632 <TMR1_SetCallBack+0x6>
    2632:	cd b7       	in	r28, 0x3d	; 61
    2634:	de b7       	in	r29, 0x3e	; 62
    2636:	9a 83       	std	Y+2, r25	; 0x02
    2638:	89 83       	std	Y+1, r24	; 0x01
	TMR1_GlobalPtr = Ptr;
    263a:	89 81       	ldd	r24, Y+1	; 0x01
    263c:	9a 81       	ldd	r25, Y+2	; 0x02
    263e:	90 93 bd 01 	sts	0x01BD, r25
    2642:	80 93 bc 01 	sts	0x01BC, r24
}
    2646:	0f 90       	pop	r0
    2648:	0f 90       	pop	r0
    264a:	cf 91       	pop	r28
    264c:	df 91       	pop	r29
    264e:	08 95       	ret

00002650 <TMR1_voidInit>:

void TMR1_voidInit(void)
{
    2650:	df 93       	push	r29
    2652:	cf 93       	push	r28
    2654:	cd b7       	in	r28, 0x3d	; 61
    2656:	de b7       	in	r29, 0x3e	; 62
#if TMR1_Prescaler == TMR1_NO_Prescaler
	SET_BIT(TCCR1B , CS10);
	CLR_BIT(TCCR1B , CS11);
	CLR_BIT(TCCR1B , CS12);
#elif TMR1_Prescaler == TMR1_Prescaler_8
	CLR_BIT(TCCR1B , CS10);
    2658:	ae e4       	ldi	r26, 0x4E	; 78
    265a:	b0 e0       	ldi	r27, 0x00	; 0
    265c:	ee e4       	ldi	r30, 0x4E	; 78
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	80 81       	ld	r24, Z
    2662:	8e 7f       	andi	r24, 0xFE	; 254
    2664:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , CS11);
    2666:	ae e4       	ldi	r26, 0x4E	; 78
    2668:	b0 e0       	ldi	r27, 0x00	; 0
    266a:	ee e4       	ldi	r30, 0x4E	; 78
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	80 81       	ld	r24, Z
    2670:	82 60       	ori	r24, 0x02	; 2
    2672:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , CS12);
    2674:	ae e4       	ldi	r26, 0x4E	; 78
    2676:	b0 e0       	ldi	r27, 0x00	; 0
    2678:	ee e4       	ldi	r30, 0x4E	; 78
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	80 81       	ld	r24, Z
    267e:	8b 7f       	andi	r24, 0xFB	; 251
    2680:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , COM1B0);
    SET_BIT(TCCR1A , COM1A0);
	CLR_BIT(TCCR1A , COM1B1);
	CLR_BIT(TCCR1A , COM1A1);
#elif TMR1_CompareOutputMode == Clear_OC1A_OC1B
	CLR_BIT(TCCR1A , COM1B0);
    2682:	af e4       	ldi	r26, 0x4F	; 79
    2684:	b0 e0       	ldi	r27, 0x00	; 0
    2686:	ef e4       	ldi	r30, 0x4F	; 79
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	80 81       	ld	r24, Z
    268c:	8f 7e       	andi	r24, 0xEF	; 239
    268e:	8c 93       	st	X, r24
    CLR_BIT(TCCR1A , COM1A0);
    2690:	af e4       	ldi	r26, 0x4F	; 79
    2692:	b0 e0       	ldi	r27, 0x00	; 0
    2694:	ef e4       	ldi	r30, 0x4F	; 79
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	80 81       	ld	r24, Z
    269a:	8f 7b       	andi	r24, 0xBF	; 191
    269c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , COM1B1);
    269e:	af e4       	ldi	r26, 0x4F	; 79
    26a0:	b0 e0       	ldi	r27, 0x00	; 0
    26a2:	ef e4       	ldi	r30, 0x4F	; 79
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	80 81       	ld	r24, Z
    26a8:	80 62       	ori	r24, 0x20	; 32
    26aa:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , COM1A1);
    26ac:	af e4       	ldi	r26, 0x4F	; 79
    26ae:	b0 e0       	ldi	r27, 0x00	; 0
    26b0:	ef e4       	ldi	r30, 0x4F	; 79
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	80 81       	ld	r24, Z
    26b6:	80 68       	ori	r24, 0x80	; 128
    26b8:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , WGM13);
	/*Output Compare Match Interrupt Enable*/
	SET_BIT(TIMSK , OCIE1A);
	//SET_BIT(TIMSK , OCIE1B);
#elif TMR1_Mode == FastPWM
	CLR_BIT(TCCR1A , WGM10);
    26ba:	af e4       	ldi	r26, 0x4F	; 79
    26bc:	b0 e0       	ldi	r27, 0x00	; 0
    26be:	ef e4       	ldi	r30, 0x4F	; 79
    26c0:	f0 e0       	ldi	r31, 0x00	; 0
    26c2:	80 81       	ld	r24, Z
    26c4:	8e 7f       	andi	r24, 0xFE	; 254
    26c6:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , WGM11);
    26c8:	af e4       	ldi	r26, 0x4F	; 79
    26ca:	b0 e0       	ldi	r27, 0x00	; 0
    26cc:	ef e4       	ldi	r30, 0x4F	; 79
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	80 81       	ld	r24, Z
    26d2:	82 60       	ori	r24, 0x02	; 2
    26d4:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , WGM12);
    26d6:	ae e4       	ldi	r26, 0x4E	; 78
    26d8:	b0 e0       	ldi	r27, 0x00	; 0
    26da:	ee e4       	ldi	r30, 0x4E	; 78
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	80 81       	ld	r24, Z
    26e0:	88 60       	ori	r24, 0x08	; 8
    26e2:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , WGM13);
    26e4:	ae e4       	ldi	r26, 0x4E	; 78
    26e6:	b0 e0       	ldi	r27, 0x00	; 0
    26e8:	ee e4       	ldi	r30, 0x4E	; 78
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
    26ec:	80 81       	ld	r24, Z
    26ee:	80 61       	ori	r24, 0x10	; 16
    26f0:	8c 93       	st	X, r24
	ICR1 = 20000;     //for servo
    26f2:	e6 e4       	ldi	r30, 0x46	; 70
    26f4:	f0 e0       	ldi	r31, 0x00	; 0
    26f6:	80 e2       	ldi	r24, 0x20	; 32
    26f8:	9e e4       	ldi	r25, 0x4E	; 78
    26fa:	91 83       	std	Z+1, r25	; 0x01
    26fc:	80 83       	st	Z, r24
#endif

}
    26fe:	cf 91       	pop	r28
    2700:	df 91       	pop	r29
    2702:	08 95       	ret

00002704 <TMR1_voidOCR1A>:

void TMR1_voidOCR1A(u16 Copy_u16OCR1AValue)
{
    2704:	df 93       	push	r29
    2706:	cf 93       	push	r28
    2708:	00 d0       	rcall	.+0      	; 0x270a <TMR1_voidOCR1A+0x6>
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
    270e:	9a 83       	std	Y+2, r25	; 0x02
    2710:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16OCR1AValue;
    2712:	ea e4       	ldi	r30, 0x4A	; 74
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	89 81       	ldd	r24, Y+1	; 0x01
    2718:	9a 81       	ldd	r25, Y+2	; 0x02
    271a:	91 83       	std	Z+1, r25	; 0x01
    271c:	80 83       	st	Z, r24
}
    271e:	0f 90       	pop	r0
    2720:	0f 90       	pop	r0
    2722:	cf 91       	pop	r28
    2724:	df 91       	pop	r29
    2726:	08 95       	ret

00002728 <TMR1_voidPreload>:

void TMR1_voidPreload(u16 Copy_u16Value)
{
    2728:	df 93       	push	r29
    272a:	cf 93       	push	r28
    272c:	00 d0       	rcall	.+0      	; 0x272e <TMR1_voidPreload+0x6>
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
    2732:	9a 83       	std	Y+2, r25	; 0x02
    2734:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Value;
    2736:	ec e4       	ldi	r30, 0x4C	; 76
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	89 81       	ldd	r24, Y+1	; 0x01
    273c:	9a 81       	ldd	r25, Y+2	; 0x02
    273e:	91 83       	std	Z+1, r25	; 0x01
    2740:	80 83       	st	Z, r24
}
    2742:	0f 90       	pop	r0
    2744:	0f 90       	pop	r0
    2746:	cf 91       	pop	r28
    2748:	df 91       	pop	r29
    274a:	08 95       	ret

0000274c <TMR1_u16ICR1>:

u16 TMR1_u16ICR1(void)
{
    274c:	df 93       	push	r29
    274e:	cf 93       	push	r28
    2750:	cd b7       	in	r28, 0x3d	; 61
    2752:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    2754:	e6 e4       	ldi	r30, 0x46	; 70
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	80 81       	ld	r24, Z
    275a:	91 81       	ldd	r25, Z+1	; 0x01
}
    275c:	cf 91       	pop	r28
    275e:	df 91       	pop	r29
    2760:	08 95       	ret

00002762 <TMR1_voidICU_EdgeSelect>:

void TMR1_voidICU_EdgeSelect(u16 Copy_u16EdgeSelect)
{
    2762:	df 93       	push	r29
    2764:	cf 93       	push	r28
    2766:	00 d0       	rcall	.+0      	; 0x2768 <TMR1_voidICU_EdgeSelect+0x6>
    2768:	00 d0       	rcall	.+0      	; 0x276a <TMR1_voidICU_EdgeSelect+0x8>
    276a:	cd b7       	in	r28, 0x3d	; 61
    276c:	de b7       	in	r29, 0x3e	; 62
    276e:	9a 83       	std	Y+2, r25	; 0x02
    2770:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u16EdgeSelect)
    2772:	89 81       	ldd	r24, Y+1	; 0x01
    2774:	9a 81       	ldd	r25, Y+2	; 0x02
    2776:	9c 83       	std	Y+4, r25	; 0x04
    2778:	8b 83       	std	Y+3, r24	; 0x03
    277a:	8b 81       	ldd	r24, Y+3	; 0x03
    277c:	9c 81       	ldd	r25, Y+4	; 0x04
    277e:	00 97       	sbiw	r24, 0x00	; 0
    2780:	31 f0       	breq	.+12     	; 0x278e <TMR1_voidICU_EdgeSelect+0x2c>
    2782:	8b 81       	ldd	r24, Y+3	; 0x03
    2784:	9c 81       	ldd	r25, Y+4	; 0x04
    2786:	81 30       	cpi	r24, 0x01	; 1
    2788:	91 05       	cpc	r25, r1
    278a:	49 f0       	breq	.+18     	; 0x279e <TMR1_voidICU_EdgeSelect+0x3c>
    278c:	0f c0       	rjmp	.+30     	; 0x27ac <TMR1_voidICU_EdgeSelect+0x4a>
	{
	case RisingEdge :
		SET_BIT(TCCR1B , ICES1);
    278e:	ae e4       	ldi	r26, 0x4E	; 78
    2790:	b0 e0       	ldi	r27, 0x00	; 0
    2792:	ee e4       	ldi	r30, 0x4E	; 78
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	80 81       	ld	r24, Z
    2798:	80 64       	ori	r24, 0x40	; 64
    279a:	8c 93       	st	X, r24
    279c:	07 c0       	rjmp	.+14     	; 0x27ac <TMR1_voidICU_EdgeSelect+0x4a>
		break;
	case FallingEdge :
		CLR_BIT(TCCR1B , ICES1);
    279e:	ae e4       	ldi	r26, 0x4E	; 78
    27a0:	b0 e0       	ldi	r27, 0x00	; 0
    27a2:	ee e4       	ldi	r30, 0x4E	; 78
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	80 81       	ld	r24, Z
    27a8:	8f 7b       	andi	r24, 0xBF	; 191
    27aa:	8c 93       	st	X, r24
	}
}
    27ac:	0f 90       	pop	r0
    27ae:	0f 90       	pop	r0
    27b0:	0f 90       	pop	r0
    27b2:	0f 90       	pop	r0
    27b4:	cf 91       	pop	r28
    27b6:	df 91       	pop	r29
    27b8:	08 95       	ret

000027ba <__vector_9>:
void __vector_9()__attribute__((signal));     //overflow
void __vector_9()
{
    27ba:	1f 92       	push	r1
    27bc:	0f 92       	push	r0
    27be:	0f b6       	in	r0, 0x3f	; 63
    27c0:	0f 92       	push	r0
    27c2:	11 24       	eor	r1, r1
    27c4:	2f 93       	push	r18
    27c6:	3f 93       	push	r19
    27c8:	4f 93       	push	r20
    27ca:	5f 93       	push	r21
    27cc:	6f 93       	push	r22
    27ce:	7f 93       	push	r23
    27d0:	8f 93       	push	r24
    27d2:	9f 93       	push	r25
    27d4:	af 93       	push	r26
    27d6:	bf 93       	push	r27
    27d8:	ef 93       	push	r30
    27da:	ff 93       	push	r31
    27dc:	df 93       	push	r29
    27de:	cf 93       	push	r28
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
	if(TMR1_GlobalPtr != '\0')
    27e4:	80 91 bc 01 	lds	r24, 0x01BC
    27e8:	90 91 bd 01 	lds	r25, 0x01BD
    27ec:	00 97       	sbiw	r24, 0x00	; 0
    27ee:	29 f0       	breq	.+10     	; 0x27fa <__vector_9+0x40>
	{
		TMR1_GlobalPtr();
    27f0:	e0 91 bc 01 	lds	r30, 0x01BC
    27f4:	f0 91 bd 01 	lds	r31, 0x01BD
    27f8:	09 95       	icall
	}
}
    27fa:	cf 91       	pop	r28
    27fc:	df 91       	pop	r29
    27fe:	ff 91       	pop	r31
    2800:	ef 91       	pop	r30
    2802:	bf 91       	pop	r27
    2804:	af 91       	pop	r26
    2806:	9f 91       	pop	r25
    2808:	8f 91       	pop	r24
    280a:	7f 91       	pop	r23
    280c:	6f 91       	pop	r22
    280e:	5f 91       	pop	r21
    2810:	4f 91       	pop	r20
    2812:	3f 91       	pop	r19
    2814:	2f 91       	pop	r18
    2816:	0f 90       	pop	r0
    2818:	0f be       	out	0x3f, r0	; 63
    281a:	0f 90       	pop	r0
    281c:	1f 90       	pop	r1
    281e:	18 95       	reti

00002820 <__vector_7>:

void __vector_7()__attribute__((signal));      //compare
void __vector_7()
{
    2820:	1f 92       	push	r1
    2822:	0f 92       	push	r0
    2824:	0f b6       	in	r0, 0x3f	; 63
    2826:	0f 92       	push	r0
    2828:	11 24       	eor	r1, r1
    282a:	2f 93       	push	r18
    282c:	3f 93       	push	r19
    282e:	4f 93       	push	r20
    2830:	5f 93       	push	r21
    2832:	6f 93       	push	r22
    2834:	7f 93       	push	r23
    2836:	8f 93       	push	r24
    2838:	9f 93       	push	r25
    283a:	af 93       	push	r26
    283c:	bf 93       	push	r27
    283e:	ef 93       	push	r30
    2840:	ff 93       	push	r31
    2842:	df 93       	push	r29
    2844:	cf 93       	push	r28
    2846:	cd b7       	in	r28, 0x3d	; 61
    2848:	de b7       	in	r29, 0x3e	; 62
	if(TMR1_GlobalPtr != '\0')
    284a:	80 91 bc 01 	lds	r24, 0x01BC
    284e:	90 91 bd 01 	lds	r25, 0x01BD
    2852:	00 97       	sbiw	r24, 0x00	; 0
    2854:	29 f0       	breq	.+10     	; 0x2860 <__vector_7+0x40>
	{
		TMR1_GlobalPtr();
    2856:	e0 91 bc 01 	lds	r30, 0x01BC
    285a:	f0 91 bd 01 	lds	r31, 0x01BD
    285e:	09 95       	icall
	}
}
    2860:	cf 91       	pop	r28
    2862:	df 91       	pop	r29
    2864:	ff 91       	pop	r31
    2866:	ef 91       	pop	r30
    2868:	bf 91       	pop	r27
    286a:	af 91       	pop	r26
    286c:	9f 91       	pop	r25
    286e:	8f 91       	pop	r24
    2870:	7f 91       	pop	r23
    2872:	6f 91       	pop	r22
    2874:	5f 91       	pop	r21
    2876:	4f 91       	pop	r20
    2878:	3f 91       	pop	r19
    287a:	2f 91       	pop	r18
    287c:	0f 90       	pop	r0
    287e:	0f be       	out	0x3f, r0	; 63
    2880:	0f 90       	pop	r0
    2882:	1f 90       	pop	r1
    2884:	18 95       	reti

00002886 <__vector_6>:

void __vector_6()__attribute__((signal));     //capture event
void __vector_6()
{
    2886:	1f 92       	push	r1
    2888:	0f 92       	push	r0
    288a:	0f b6       	in	r0, 0x3f	; 63
    288c:	0f 92       	push	r0
    288e:	11 24       	eor	r1, r1
    2890:	2f 93       	push	r18
    2892:	3f 93       	push	r19
    2894:	4f 93       	push	r20
    2896:	5f 93       	push	r21
    2898:	6f 93       	push	r22
    289a:	7f 93       	push	r23
    289c:	8f 93       	push	r24
    289e:	9f 93       	push	r25
    28a0:	af 93       	push	r26
    28a2:	bf 93       	push	r27
    28a4:	ef 93       	push	r30
    28a6:	ff 93       	push	r31
    28a8:	df 93       	push	r29
    28aa:	cf 93       	push	r28
    28ac:	cd b7       	in	r28, 0x3d	; 61
    28ae:	de b7       	in	r29, 0x3e	; 62
	if(TMR1_GlobalPtr != '\0')
    28b0:	80 91 bc 01 	lds	r24, 0x01BC
    28b4:	90 91 bd 01 	lds	r25, 0x01BD
    28b8:	00 97       	sbiw	r24, 0x00	; 0
    28ba:	29 f0       	breq	.+10     	; 0x28c6 <__vector_6+0x40>
	{
		TMR1_GlobalPtr();
    28bc:	e0 91 bc 01 	lds	r30, 0x01BC
    28c0:	f0 91 bd 01 	lds	r31, 0x01BD
    28c4:	09 95       	icall
	}
}
    28c6:	cf 91       	pop	r28
    28c8:	df 91       	pop	r29
    28ca:	ff 91       	pop	r31
    28cc:	ef 91       	pop	r30
    28ce:	bf 91       	pop	r27
    28d0:	af 91       	pop	r26
    28d2:	9f 91       	pop	r25
    28d4:	8f 91       	pop	r24
    28d6:	7f 91       	pop	r23
    28d8:	6f 91       	pop	r22
    28da:	5f 91       	pop	r21
    28dc:	4f 91       	pop	r20
    28de:	3f 91       	pop	r19
    28e0:	2f 91       	pop	r18
    28e2:	0f 90       	pop	r0
    28e4:	0f be       	out	0x3f, r0	; 63
    28e6:	0f 90       	pop	r0
    28e8:	1f 90       	pop	r1
    28ea:	18 95       	reti

000028ec <UART_voidInit>:
#include "STD_Types.h"
#include <avr/io.h>
#include "UART.h"


void UART_voidInit	(void){
    28ec:	df 93       	push	r29
    28ee:	cf 93       	push	r28
    28f0:	00 d0       	rcall	.+0      	; 0x28f2 <UART_voidInit+0x6>
    28f2:	0f 92       	push	r0
    28f4:	cd b7       	in	r28, 0x3d	; 61
    28f6:	de b7       	in	r29, 0x3e	; 62

	u16 Local_u16BaudRate = 51;
    28f8:	83 e3       	ldi	r24, 0x33	; 51
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	9b 83       	std	Y+3, r25	; 0x03
    28fe:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8UCSRCvalue = 0b10000000;
    2900:	80 e8       	ldi	r24, 0x80	; 128
    2902:	89 83       	std	Y+1, r24	; 0x01

	/*1- Set baud rate */
	UBRRL = (u8) Local_u16BaudRate;
    2904:	e9 e2       	ldi	r30, 0x29	; 41
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	8a 81       	ldd	r24, Y+2	; 0x02
    290a:	80 83       	st	Z, r24
	UBRRH = (u8) (Local_u16BaudRate >> 8);
    290c:	e0 e4       	ldi	r30, 0x40	; 64
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	8a 81       	ldd	r24, Y+2	; 0x02
    2912:	9b 81       	ldd	r25, Y+3	; 0x03
    2914:	89 2f       	mov	r24, r25
    2916:	99 27       	eor	r25, r25
    2918:	80 83       	st	Z, r24

	/*2- Select normal speed */
	CLR_BIT(UCSRA, U2X);
    291a:	ab e2       	ldi	r26, 0x2B	; 43
    291c:	b0 e0       	ldi	r27, 0x00	; 0
    291e:	eb e2       	ldi	r30, 0x2B	; 43
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	80 81       	ld	r24, Z
    2924:	8d 7f       	andi	r24, 0xFD	; 253
    2926:	8c 93       	st	X, r24

	/*3- disable Mluti-Processor mode */
	CLR_BIT(UCSRA, MPCM);
    2928:	ab e2       	ldi	r26, 0x2B	; 43
    292a:	b0 e0       	ldi	r27, 0x00	; 0
    292c:	eb e2       	ldi	r30, 0x2B	; 43
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	80 81       	ld	r24, Z
    2932:	8e 7f       	andi	r24, 0xFE	; 254
    2934:	8c 93       	st	X, r24

	/*4- enable receiver & Transmitter */
	SET_BIT(UCSRB, RXEN);
    2936:	aa e2       	ldi	r26, 0x2A	; 42
    2938:	b0 e0       	ldi	r27, 0x00	; 0
    293a:	ea e2       	ldi	r30, 0x2A	; 42
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	80 81       	ld	r24, Z
    2940:	80 61       	ori	r24, 0x10	; 16
    2942:	8c 93       	st	X, r24
	SET_BIT(UCSRB, TXEN);
    2944:	aa e2       	ldi	r26, 0x2A	; 42
    2946:	b0 e0       	ldi	r27, 0x00	; 0
    2948:	ea e2       	ldi	r30, 0x2A	; 42
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	80 81       	ld	r24, Z
    294e:	88 60       	ori	r24, 0x08	; 8
    2950:	8c 93       	st	X, r24

	/*5- select 8 bite data */
	CLR_BIT(UCSRB, UCSZ2);
    2952:	aa e2       	ldi	r26, 0x2A	; 42
    2954:	b0 e0       	ldi	r27, 0x00	; 0
    2956:	ea e2       	ldi	r30, 0x2A	; 42
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	80 81       	ld	r24, Z
    295c:	8b 7f       	andi	r24, 0xFB	; 251
    295e:	8c 93       	st	X, r24
	SET_BIT(Local_u8UCSRCvalue, UCSZ1);
    2960:	89 81       	ldd	r24, Y+1	; 0x01
    2962:	84 60       	ori	r24, 0x04	; 4
    2964:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRCvalue, UCSZ0);
    2966:	89 81       	ldd	r24, Y+1	; 0x01
    2968:	82 60       	ori	r24, 0x02	; 2
    296a:	89 83       	std	Y+1, r24	; 0x01

	/*6- select Asynchronous */
	CLR_BIT(Local_u8UCSRCvalue, UMSEL);
    296c:	89 81       	ldd	r24, Y+1	; 0x01
    296e:	8f 7b       	andi	r24, 0xBF	; 191
    2970:	89 83       	std	Y+1, r24	; 0x01

	/*7- Disabled parity */
	CLR_BIT(Local_u8UCSRCvalue, UPM0);
    2972:	89 81       	ldd	r24, Y+1	; 0x01
    2974:	8f 7e       	andi	r24, 0xEF	; 239
    2976:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRCvalue, UPM1);
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	8f 7d       	andi	r24, 0xDF	; 223
    297c:	89 83       	std	Y+1, r24	; 0x01

	/*8- Set 2 stop bits */
	SET_BIT(Local_u8UCSRCvalue, USBS);
    297e:	89 81       	ldd	r24, Y+1	; 0x01
    2980:	88 60       	ori	r24, 0x08	; 8
    2982:	89 83       	std	Y+1, r24	; 0x01

	/*9- disable clock polarity */
	CLR_BIT(Local_u8UCSRCvalue, UCPOL);
    2984:	89 81       	ldd	r24, Y+1	; 0x01
    2986:	8e 7f       	andi	r24, 0xFE	; 254
    2988:	89 83       	std	Y+1, r24	; 0x01

	/*10- assign Local_u8UCSRCvalue to UCSRC */
	UCSRC = Local_u8UCSRCvalue;
    298a:	e0 e4       	ldi	r30, 0x40	; 64
    298c:	f0 e0       	ldi	r31, 0x00	; 0
    298e:	89 81       	ldd	r24, Y+1	; 0x01
    2990:	80 83       	st	Z, r24

}
    2992:	0f 90       	pop	r0
    2994:	0f 90       	pop	r0
    2996:	0f 90       	pop	r0
    2998:	cf 91       	pop	r28
    299a:	df 91       	pop	r29
    299c:	08 95       	ret

0000299e <UART_voidSendData>:


void UART_voidSendData	(u8 Copy_u8Data){
    299e:	df 93       	push	r29
    29a0:	cf 93       	push	r28
    29a2:	0f 92       	push	r0
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
    29a8:	89 83       	std	Y+1, r24	; 0x01

	/* Wait for empty transmit buffer */
	while(GET_BIT(UCSRA, UDRE) == 0);
    29aa:	eb e2       	ldi	r30, 0x2B	; 43
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	80 81       	ld	r24, Z
    29b0:	82 95       	swap	r24
    29b2:	86 95       	lsr	r24
    29b4:	87 70       	andi	r24, 0x07	; 7
    29b6:	88 2f       	mov	r24, r24
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	81 70       	andi	r24, 0x01	; 1
    29bc:	90 70       	andi	r25, 0x00	; 0
    29be:	00 97       	sbiw	r24, 0x00	; 0
    29c0:	a1 f3       	breq	.-24     	; 0x29aa <UART_voidSendData+0xc>

	/* Put data into buffer, sends the data */
	UDR = Copy_u8Data;
    29c2:	ec e2       	ldi	r30, 0x2C	; 44
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	89 81       	ldd	r24, Y+1	; 0x01
    29c8:	80 83       	st	Z, r24
}
    29ca:	0f 90       	pop	r0
    29cc:	cf 91       	pop	r28
    29ce:	df 91       	pop	r29
    29d0:	08 95       	ret

000029d2 <UART_u8ReceiveData>:


u8	 UART_u8ReceiveData (void){
    29d2:	df 93       	push	r29
    29d4:	cf 93       	push	r28
    29d6:	cd b7       	in	r28, 0x3d	; 61
    29d8:	de b7       	in	r29, 0x3e	; 62

	/* Wait for data to be received */
	while(GET_BIT(UCSRA, RXC) == 0);
    29da:	eb e2       	ldi	r30, 0x2B	; 43
    29dc:	f0 e0       	ldi	r31, 0x00	; 0
    29de:	80 81       	ld	r24, Z
    29e0:	88 23       	and	r24, r24
    29e2:	dc f7       	brge	.-10     	; 0x29da <UART_u8ReceiveData+0x8>

	/* Get and return received data from buffer */
	return UDR;
    29e4:	ec e2       	ldi	r30, 0x2C	; 44
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	80 81       	ld	r24, Z
}
    29ea:	cf 91       	pop	r28
    29ec:	df 91       	pop	r29
    29ee:	08 95       	ret

000029f0 <main>:
u16 temperature=0 , LDR_OUT , LDR_room1 , LDR_room2 , LDR_room3;
u16 factor , curtain;
u8 Receive =0;
u8 flag=0;
int main()
{
    29f0:	df 93       	push	r29
    29f2:	cf 93       	push	r28
    29f4:	cd b7       	in	r28, 0x3d	; 61
    29f6:	de b7       	in	r29, 0x3e	; 62
    29f8:	2e 97       	sbiw	r28, 0x0e	; 14
    29fa:	0f b6       	in	r0, 0x3f	; 63
    29fc:	f8 94       	cli
    29fe:	de bf       	out	0x3e, r29	; 62
    2a00:	0f be       	out	0x3f, r0	; 63
    2a02:	cd bf       	out	0x3d, r28	; 61


	LCD_voidInit();   	    //LCD Initialized
    2a04:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_voidInit>
	ADC_voidInit(ADC_DIV_64);      //ADC Initialized
    2a08:	86 e0       	ldi	r24, 0x06	; 6
    2a0a:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <ADC_voidInit>



	// EXT_voidGIE_Enable();
	 TIM0_voidTimerStart(TIM0_PRESCALER_8);
    2a0e:	82 e0       	ldi	r24, 0x02	; 2
    2a10:	0e 94 38 11 	call	0x2270	; 0x2270 <TIM0_voidTimerStart>
	 TIM0_voidInit();     //Timer0 Initialized
    2a14:	0e 94 15 11 	call	0x222a	; 0x222a <TIM0_voidInit>

	 DIO_voidSetPinDirection(DIO_PORTB , DIO_PIN3 ,DIO_OUTPUT);
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	63 e0       	ldi	r22, 0x03	; 3
    2a1c:	41 e0       	ldi	r20, 0x01	; 1
    2a1e:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(DIO_PORTD , DIO_PIN5 ,DIO_OUTPUT);
    2a22:	83 e0       	ldi	r24, 0x03	; 3
    2a24:	65 e0       	ldi	r22, 0x05	; 5
    2a26:	41 e0       	ldi	r20, 0x01	; 1
    2a28:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_voidSetPinDirection>

	TMR1_voidInit();     //Timer1 Initialized
    2a2c:	0e 94 28 13 	call	0x2650	; 0x2650 <TMR1_voidInit>

	UART_voidInit();
    2a30:	0e 94 76 14 	call	0x28ec	; 0x28ec <UART_voidInit>

	DIO_voidSetPinDirection(DIO_PORTB , DIO_PIN5 ,DIO_OUTPUT);    /*warning led if there is fire*/
    2a34:	81 e0       	ldi	r24, 0x01	; 1
    2a36:	65 e0       	ldi	r22, 0x05	; 5
    2a38:	41 e0       	ldi	r20, 0x01	; 1
    2a3a:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_voidSetPinDirection>

	/*leds of 3 Rooms*/
	DIO_voidSetPinDirection(DIO_PORTD , DIO_PIN3 ,DIO_OUTPUT);
    2a3e:	83 e0       	ldi	r24, 0x03	; 3
    2a40:	63 e0       	ldi	r22, 0x03	; 3
    2a42:	41 e0       	ldi	r20, 0x01	; 1
    2a44:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD , DIO_PIN7 ,DIO_OUTPUT);
    2a48:	83 e0       	ldi	r24, 0x03	; 3
    2a4a:	67 e0       	ldi	r22, 0x07	; 7
    2a4c:	41 e0       	ldi	r20, 0x01	; 1
    2a4e:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD , DIO_PIN6 ,DIO_OUTPUT);
    2a52:	83 e0       	ldi	r24, 0x03	; 3
    2a54:	66 e0       	ldi	r22, 0x06	; 6
    2a56:	41 e0       	ldi	r20, 0x01	; 1
    2a58:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_voidSetPinDirection>
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	aa ef       	ldi	r26, 0xFA	; 250
    2a62:	b3 e4       	ldi	r27, 0x43	; 67
    2a64:	8b 87       	std	Y+11, r24	; 0x0b
    2a66:	9c 87       	std	Y+12, r25	; 0x0c
    2a68:	ad 87       	std	Y+13, r26	; 0x0d
    2a6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a70:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a72:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a74:	20 e0       	ldi	r18, 0x00	; 0
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	4a ef       	ldi	r20, 0xFA	; 250
    2a7a:	54 e4       	ldi	r21, 0x44	; 68
    2a7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a80:	dc 01       	movw	r26, r24
    2a82:	cb 01       	movw	r24, r22
    2a84:	8f 83       	std	Y+7, r24	; 0x07
    2a86:	98 87       	std	Y+8, r25	; 0x08
    2a88:	a9 87       	std	Y+9, r26	; 0x09
    2a8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a8c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a8e:	78 85       	ldd	r23, Y+8	; 0x08
    2a90:	89 85       	ldd	r24, Y+9	; 0x09
    2a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a94:	20 e0       	ldi	r18, 0x00	; 0
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	40 e8       	ldi	r20, 0x80	; 128
    2a9a:	5f e3       	ldi	r21, 0x3F	; 63
    2a9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aa0:	88 23       	and	r24, r24
    2aa2:	2c f4       	brge	.+10     	; 0x2aae <main+0xbe>
		__ticks = 1;
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	9e 83       	std	Y+6, r25	; 0x06
    2aaa:	8d 83       	std	Y+5, r24	; 0x05
    2aac:	3f c0       	rjmp	.+126    	; 0x2b2c <main+0x13c>
	else if (__tmp > 65535)
    2aae:	6f 81       	ldd	r22, Y+7	; 0x07
    2ab0:	78 85       	ldd	r23, Y+8	; 0x08
    2ab2:	89 85       	ldd	r24, Y+9	; 0x09
    2ab4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	3f ef       	ldi	r19, 0xFF	; 255
    2aba:	4f e7       	ldi	r20, 0x7F	; 127
    2abc:	57 e4       	ldi	r21, 0x47	; 71
    2abe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ac2:	18 16       	cp	r1, r24
    2ac4:	4c f5       	brge	.+82     	; 0x2b18 <main+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ac8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aca:	8d 85       	ldd	r24, Y+13	; 0x0d
    2acc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	40 e2       	ldi	r20, 0x20	; 32
    2ad4:	51 e4       	ldi	r21, 0x41	; 65
    2ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ada:	dc 01       	movw	r26, r24
    2adc:	cb 01       	movw	r24, r22
    2ade:	bc 01       	movw	r22, r24
    2ae0:	cd 01       	movw	r24, r26
    2ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	cb 01       	movw	r24, r22
    2aea:	9e 83       	std	Y+6, r25	; 0x06
    2aec:	8d 83       	std	Y+5, r24	; 0x05
    2aee:	0f c0       	rjmp	.+30     	; 0x2b0e <main+0x11e>
    2af0:	88 ec       	ldi	r24, 0xC8	; 200
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	9c 83       	std	Y+4, r25	; 0x04
    2af6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2af8:	8b 81       	ldd	r24, Y+3	; 0x03
    2afa:	9c 81       	ldd	r25, Y+4	; 0x04
    2afc:	01 97       	sbiw	r24, 0x01	; 1
    2afe:	f1 f7       	brne	.-4      	; 0x2afc <main+0x10c>
    2b00:	9c 83       	std	Y+4, r25	; 0x04
    2b02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b04:	8d 81       	ldd	r24, Y+5	; 0x05
    2b06:	9e 81       	ldd	r25, Y+6	; 0x06
    2b08:	01 97       	sbiw	r24, 0x01	; 1
    2b0a:	9e 83       	std	Y+6, r25	; 0x06
    2b0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b10:	9e 81       	ldd	r25, Y+6	; 0x06
    2b12:	00 97       	sbiw	r24, 0x00	; 0
    2b14:	69 f7       	brne	.-38     	; 0x2af0 <main+0x100>
    2b16:	14 c0       	rjmp	.+40     	; 0x2b40 <main+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b18:	6f 81       	ldd	r22, Y+7	; 0x07
    2b1a:	78 85       	ldd	r23, Y+8	; 0x08
    2b1c:	89 85       	ldd	r24, Y+9	; 0x09
    2b1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b24:	dc 01       	movw	r26, r24
    2b26:	cb 01       	movw	r24, r22
    2b28:	9e 83       	std	Y+6, r25	; 0x06
    2b2a:	8d 83       	std	Y+5, r24	; 0x05
    2b2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b30:	9a 83       	std	Y+2, r25	; 0x02
    2b32:	89 83       	std	Y+1, r24	; 0x01
    2b34:	89 81       	ldd	r24, Y+1	; 0x01
    2b36:	9a 81       	ldd	r25, Y+2	; 0x02
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	f1 f7       	brne	.-4      	; 0x2b38 <main+0x148>
    2b3c:	9a 83       	std	Y+2, r25	; 0x02
    2b3e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(500);

	Receive=UART_u8ReceiveData();
    2b40:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <UART_u8ReceiveData>
    2b44:	80 93 c0 01 	sts	0x01C0, r24

			while(1){

if(Receive=='A'){
    2b48:	80 91 c0 01 	lds	r24, 0x01C0
    2b4c:	81 34       	cpi	r24, 0x41	; 65
    2b4e:	31 f4       	brne	.+12     	; 0x2b5c <main+0x16c>
	start();
    2b50:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <start>
flag=1;
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	80 93 c1 01 	sts	0x01C1, r24
    2b5a:	f6 cf       	rjmp	.-20     	; 0x2b48 <main+0x158>
}
else if(flag==0){
    2b5c:	80 91 c1 01 	lds	r24, 0x01C1
    2b60:	88 23       	and	r24, r24
    2b62:	91 f7       	brne	.-28     	; 0x2b48 <main+0x158>
Receive=UART_u8ReceiveData();
    2b64:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <UART_u8ReceiveData>
    2b68:	80 93 c0 01 	sts	0x01C0, r24
    2b6c:	ed cf       	rjmp	.-38     	; 0x2b48 <main+0x158>

00002b6e <start>:
}



/*FUNCTION TO START THE WHOLE PROJECT*/
void start(void){
    2b6e:	df 93       	push	r29
    2b70:	cf 93       	push	r28
    2b72:	cd b7       	in	r28, 0x3d	; 61
    2b74:	de b7       	in	r29, 0x3e	; 62
    2b76:	6c 97       	sbiw	r28, 0x1c	; 28
    2b78:	0f b6       	in	r0, 0x3f	; 63
    2b7a:	f8 94       	cli
    2b7c:	de bf       	out	0x3e, r29	; 62
    2b7e:	0f be       	out	0x3f, r0	; 63
    2b80:	cd bf       	out	0x3d, r28	; 61

	//_________________________controlling fan using temperature sensor______________________

				/*take analog value from temperature sensor , converting it into degree*/

temperature = ADC_u16GetDigitalValue( ADC_Channel_0);
    2b82:	80 e0       	ldi	r24, 0x00	; 0
    2b84:	0e 94 31 07 	call	0xe62	; 0xe62 <ADC_u16GetDigitalValue>
    2b88:	90 93 bf 01 	sts	0x01BF, r25
    2b8c:	80 93 be 01 	sts	0x01BE, r24
temperature = ( ((u32)temperature*5000)/(u16)1023 ) / 10;         //degree
    2b90:	80 91 be 01 	lds	r24, 0x01BE
    2b94:	90 91 bf 01 	lds	r25, 0x01BF
    2b98:	cc 01       	movw	r24, r24
    2b9a:	a0 e0       	ldi	r26, 0x00	; 0
    2b9c:	b0 e0       	ldi	r27, 0x00	; 0
    2b9e:	28 e8       	ldi	r18, 0x88	; 136
    2ba0:	33 e1       	ldi	r19, 0x13	; 19
    2ba2:	40 e0       	ldi	r20, 0x00	; 0
    2ba4:	50 e0       	ldi	r21, 0x00	; 0
    2ba6:	bc 01       	movw	r22, r24
    2ba8:	cd 01       	movw	r24, r26
    2baa:	0e 94 1f 18 	call	0x303e	; 0x303e <__mulsi3>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	26 ef       	ldi	r18, 0xF6	; 246
    2bb4:	37 e2       	ldi	r19, 0x27	; 39
    2bb6:	40 e0       	ldi	r20, 0x00	; 0
    2bb8:	50 e0       	ldi	r21, 0x00	; 0
    2bba:	bc 01       	movw	r22, r24
    2bbc:	cd 01       	movw	r24, r26
    2bbe:	0e 94 3e 18 	call	0x307c	; 0x307c <__udivmodsi4>
    2bc2:	da 01       	movw	r26, r20
    2bc4:	c9 01       	movw	r24, r18
    2bc6:	90 93 bf 01 	sts	0x01BF, r25
    2bca:	80 93 be 01 	sts	0x01BE, r24

/*display temperature value over an LCD*/
LCD_voidSendCommand(CLEAR);
    2bce:	81 e0       	ldi	r24, 0x01	; 1
    2bd0:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <LCD_voidSendCommand>
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	a0 e0       	ldi	r26, 0x00	; 0
    2bda:	b0 e4       	ldi	r27, 0x40	; 64
    2bdc:	89 8f       	std	Y+25, r24	; 0x19
    2bde:	9a 8f       	std	Y+26, r25	; 0x1a
    2be0:	ab 8f       	std	Y+27, r26	; 0x1b
    2be2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be4:	69 8d       	ldd	r22, Y+25	; 0x19
    2be6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2be8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	4a ef       	ldi	r20, 0xFA	; 250
    2bf2:	54 e4       	ldi	r21, 0x44	; 68
    2bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	8d 8b       	std	Y+21, r24	; 0x15
    2bfe:	9e 8b       	std	Y+22, r25	; 0x16
    2c00:	af 8b       	std	Y+23, r26	; 0x17
    2c02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c04:	6d 89       	ldd	r22, Y+21	; 0x15
    2c06:	7e 89       	ldd	r23, Y+22	; 0x16
    2c08:	8f 89       	ldd	r24, Y+23	; 0x17
    2c0a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	40 e8       	ldi	r20, 0x80	; 128
    2c12:	5f e3       	ldi	r21, 0x3F	; 63
    2c14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c18:	88 23       	and	r24, r24
    2c1a:	2c f4       	brge	.+10     	; 0x2c26 <start+0xb8>
		__ticks = 1;
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	9c 8b       	std	Y+20, r25	; 0x14
    2c22:	8b 8b       	std	Y+19, r24	; 0x13
    2c24:	3f c0       	rjmp	.+126    	; 0x2ca4 <start+0x136>
	else if (__tmp > 65535)
    2c26:	6d 89       	ldd	r22, Y+21	; 0x15
    2c28:	7e 89       	ldd	r23, Y+22	; 0x16
    2c2a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c2c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c2e:	20 e0       	ldi	r18, 0x00	; 0
    2c30:	3f ef       	ldi	r19, 0xFF	; 255
    2c32:	4f e7       	ldi	r20, 0x7F	; 127
    2c34:	57 e4       	ldi	r21, 0x47	; 71
    2c36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c3a:	18 16       	cp	r1, r24
    2c3c:	4c f5       	brge	.+82     	; 0x2c90 <start+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c3e:	69 8d       	ldd	r22, Y+25	; 0x19
    2c40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	40 e2       	ldi	r20, 0x20	; 32
    2c4c:	51 e4       	ldi	r21, 0x41	; 65
    2c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	bc 01       	movw	r22, r24
    2c58:	cd 01       	movw	r24, r26
    2c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5e:	dc 01       	movw	r26, r24
    2c60:	cb 01       	movw	r24, r22
    2c62:	9c 8b       	std	Y+20, r25	; 0x14
    2c64:	8b 8b       	std	Y+19, r24	; 0x13
    2c66:	0f c0       	rjmp	.+30     	; 0x2c86 <start+0x118>
    2c68:	88 ec       	ldi	r24, 0xC8	; 200
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	9a 8b       	std	Y+18, r25	; 0x12
    2c6e:	89 8b       	std	Y+17, r24	; 0x11
    2c70:	89 89       	ldd	r24, Y+17	; 0x11
    2c72:	9a 89       	ldd	r25, Y+18	; 0x12
    2c74:	01 97       	sbiw	r24, 0x01	; 1
    2c76:	f1 f7       	brne	.-4      	; 0x2c74 <start+0x106>
    2c78:	9a 8b       	std	Y+18, r25	; 0x12
    2c7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c7c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c7e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c80:	01 97       	sbiw	r24, 0x01	; 1
    2c82:	9c 8b       	std	Y+20, r25	; 0x14
    2c84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c86:	8b 89       	ldd	r24, Y+19	; 0x13
    2c88:	9c 89       	ldd	r25, Y+20	; 0x14
    2c8a:	00 97       	sbiw	r24, 0x00	; 0
    2c8c:	69 f7       	brne	.-38     	; 0x2c68 <start+0xfa>
    2c8e:	14 c0       	rjmp	.+40     	; 0x2cb8 <start+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c90:	6d 89       	ldd	r22, Y+21	; 0x15
    2c92:	7e 89       	ldd	r23, Y+22	; 0x16
    2c94:	8f 89       	ldd	r24, Y+23	; 0x17
    2c96:	98 8d       	ldd	r25, Y+24	; 0x18
    2c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	9c 8b       	std	Y+20, r25	; 0x14
    2ca2:	8b 8b       	std	Y+19, r24	; 0x13
    2ca4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ca6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ca8:	98 8b       	std	Y+16, r25	; 0x10
    2caa:	8f 87       	std	Y+15, r24	; 0x0f
    2cac:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cae:	98 89       	ldd	r25, Y+16	; 0x10
    2cb0:	01 97       	sbiw	r24, 0x01	; 1
    2cb2:	f1 f7       	brne	.-4      	; 0x2cb0 <start+0x142>
    2cb4:	98 8b       	std	Y+16, r25	; 0x10
    2cb6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
    LCD_voidSendString("Temp = ");
    2cb8:	80 e6       	ldi	r24, 0x60	; 96
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_voidSendString>
	LCD_voidSendNumber(temperature);
    2cc0:	80 91 be 01 	lds	r24, 0x01BE
    2cc4:	90 91 bf 01 	lds	r25, 0x01BF
    2cc8:	cc 01       	movw	r24, r24
    2cca:	a0 e0       	ldi	r26, 0x00	; 0
    2ccc:	b0 e0       	ldi	r27, 0x00	; 0
    2cce:	bc 01       	movw	r22, r24
    2cd0:	cd 01       	movw	r24, r26
    2cd2:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <LCD_voidSendNumber>
	LCD_voidSendString("C");
    2cd6:	88 e6       	ldi	r24, 0x68	; 104
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_voidSendString>

/*control motor of fan depending on the temperature*/
if ((temperature >= 20) && (temperature <= 25))
    2cde:	80 91 be 01 	lds	r24, 0x01BE
    2ce2:	90 91 bf 01 	lds	r25, 0x01BF
    2ce6:	84 31       	cpi	r24, 0x14	; 20
    2ce8:	91 05       	cpc	r25, r1
    2cea:	c8 f0       	brcs	.+50     	; 0x2d1e <start+0x1b0>
    2cec:	80 91 be 01 	lds	r24, 0x01BE
    2cf0:	90 91 bf 01 	lds	r25, 0x01BF
    2cf4:	8a 31       	cpi	r24, 0x1A	; 26
    2cf6:	91 05       	cpc	r25, r1
    2cf8:	90 f4       	brcc	.+36     	; 0x2d1e <start+0x1b0>
{
	TIM0_voidPWMGenerator(50, TIM0_OC0_CLR_CMP_SET_OVF );
    2cfa:	82 e3       	ldi	r24, 0x32	; 50
    2cfc:	62 e0       	ldi	r22, 0x02	; 2
    2cfe:	0e 94 cf 11 	call	0x239e	; 0x239e <TIM0_voidPWMGenerator>
	LCD_voidSetLocation(2,0);
    2d02:	82 e0       	ldi	r24, 0x02	; 2
    2d04:	60 e0       	ldi	r22, 0x00	; 0
    2d06:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_voidSetLocation>
	LCD_voidSendString("Fan : half speed");
    2d0a:	8a e6       	ldi	r24, 0x6A	; 106
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_voidSendString>
	DIO_voidSetPinValue(DIO_PORTB , DIO_PIN5 , DIO_LOW);
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	65 e0       	ldi	r22, 0x05	; 5
    2d16:	40 e0       	ldi	r20, 0x00	; 0
    2d18:	0e 94 79 08 	call	0x10f2	; 0x10f2 <DIO_voidSetPinValue>
    2d1c:	6a c0       	rjmp	.+212    	; 0x2df2 <start+0x284>
}

else if ((temperature > 25) && (temperature <= 30))
    2d1e:	80 91 be 01 	lds	r24, 0x01BE
    2d22:	90 91 bf 01 	lds	r25, 0x01BF
    2d26:	8a 31       	cpi	r24, 0x1A	; 26
    2d28:	91 05       	cpc	r25, r1
    2d2a:	c8 f0       	brcs	.+50     	; 0x2d5e <start+0x1f0>
    2d2c:	80 91 be 01 	lds	r24, 0x01BE
    2d30:	90 91 bf 01 	lds	r25, 0x01BF
    2d34:	8f 31       	cpi	r24, 0x1F	; 31
    2d36:	91 05       	cpc	r25, r1
    2d38:	90 f4       	brcc	.+36     	; 0x2d5e <start+0x1f0>
{
	TIM0_voidPWMGenerator(75, TIM0_OC0_CLR_CMP_SET_OVF );
    2d3a:	8b e4       	ldi	r24, 0x4B	; 75
    2d3c:	62 e0       	ldi	r22, 0x02	; 2
    2d3e:	0e 94 cf 11 	call	0x239e	; 0x239e <TIM0_voidPWMGenerator>
	LCD_voidSetLocation(2,0);
    2d42:	82 e0       	ldi	r24, 0x02	; 2
    2d44:	60 e0       	ldi	r22, 0x00	; 0
    2d46:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_voidSetLocation>
	LCD_voidSendString("Fan : 75% speed");
    2d4a:	8b e7       	ldi	r24, 0x7B	; 123
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_voidSendString>
	DIO_voidSetPinValue(DIO_PORTB , DIO_PIN5 , DIO_LOW);
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	65 e0       	ldi	r22, 0x05	; 5
    2d56:	40 e0       	ldi	r20, 0x00	; 0
    2d58:	0e 94 79 08 	call	0x10f2	; 0x10f2 <DIO_voidSetPinValue>
    2d5c:	4a c0       	rjmp	.+148    	; 0x2df2 <start+0x284>
}

else if ((temperature > 30) && (temperature <= 45))   //high temperatureerature
    2d5e:	80 91 be 01 	lds	r24, 0x01BE
    2d62:	90 91 bf 01 	lds	r25, 0x01BF
    2d66:	8f 31       	cpi	r24, 0x1F	; 31
    2d68:	91 05       	cpc	r25, r1
    2d6a:	c8 f0       	brcs	.+50     	; 0x2d9e <start+0x230>
    2d6c:	80 91 be 01 	lds	r24, 0x01BE
    2d70:	90 91 bf 01 	lds	r25, 0x01BF
    2d74:	8e 32       	cpi	r24, 0x2E	; 46
    2d76:	91 05       	cpc	r25, r1
    2d78:	90 f4       	brcc	.+36     	; 0x2d9e <start+0x230>
{
	TIM0_voidPWMGenerator(100, TIM0_OC0_CLR_CMP_SET_OVF );
    2d7a:	84 e6       	ldi	r24, 0x64	; 100
    2d7c:	62 e0       	ldi	r22, 0x02	; 2
    2d7e:	0e 94 cf 11 	call	0x239e	; 0x239e <TIM0_voidPWMGenerator>
	LCD_voidSetLocation(2,0);
    2d82:	82 e0       	ldi	r24, 0x02	; 2
    2d84:	60 e0       	ldi	r22, 0x00	; 0
    2d86:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_voidSetLocation>
	LCD_voidSendString("Fan : full speed");
    2d8a:	8b e8       	ldi	r24, 0x8B	; 139
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_voidSendString>
	DIO_voidSetPinValue(DIO_PORTB , DIO_PIN5 , DIO_LOW);
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	65 e0       	ldi	r22, 0x05	; 5
    2d96:	40 e0       	ldi	r20, 0x00	; 0
    2d98:	0e 94 79 08 	call	0x10f2	; 0x10f2 <DIO_voidSetPinValue>
    2d9c:	2a c0       	rjmp	.+84     	; 0x2df2 <start+0x284>
}

/*very high temperature(fire warning)*/
else if(temperature > 45)
    2d9e:	80 91 be 01 	lds	r24, 0x01BE
    2da2:	90 91 bf 01 	lds	r25, 0x01BF
    2da6:	8e 32       	cpi	r24, 0x2E	; 46
    2da8:	91 05       	cpc	r25, r1
    2daa:	90 f0       	brcs	.+36     	; 0x2dd0 <start+0x262>
{
	TIM0_voidPWMGenerator(0,  TIM0_OC0_CLR_CMP_SET_OVF);
    2dac:	80 e0       	ldi	r24, 0x00	; 0
    2dae:	62 e0       	ldi	r22, 0x02	; 2
    2db0:	0e 94 cf 11 	call	0x239e	; 0x239e <TIM0_voidPWMGenerator>
	LCD_voidSetLocation(2,0);
    2db4:	82 e0       	ldi	r24, 0x02	; 2
    2db6:	60 e0       	ldi	r22, 0x00	; 0
    2db8:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_voidSetLocation>
	LCD_voidSendString("Fire warning!!");
    2dbc:	8c e9       	ldi	r24, 0x9C	; 156
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_voidSendString>
	DIO_voidSetPinValue(DIO_PORTB , DIO_PIN5 , DIO_HIGH); //red led ON
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	65 e0       	ldi	r22, 0x05	; 5
    2dc8:	41 e0       	ldi	r20, 0x01	; 1
    2dca:	0e 94 79 08 	call	0x10f2	; 0x10f2 <DIO_voidSetPinValue>
    2dce:	11 c0       	rjmp	.+34     	; 0x2df2 <start+0x284>
	//USART_voidSendData('1');
}

else
{
	TIM0_voidPWMGenerator(0,  TIM0_OC0_CLR_CMP_SET_OVF);
    2dd0:	80 e0       	ldi	r24, 0x00	; 0
    2dd2:	62 e0       	ldi	r22, 0x02	; 2
    2dd4:	0e 94 cf 11 	call	0x239e	; 0x239e <TIM0_voidPWMGenerator>
	LCD_voidSetLocation(2,0);
    2dd8:	82 e0       	ldi	r24, 0x02	; 2
    2dda:	60 e0       	ldi	r22, 0x00	; 0
    2ddc:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_voidSetLocation>
	LCD_voidSendString("Fan OFF");
    2de0:	8b ea       	ldi	r24, 0xAB	; 171
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_voidSendString>
	DIO_voidSetPinValue(DIO_PORTB , DIO_PIN5 , DIO_LOW);
    2de8:	81 e0       	ldi	r24, 0x01	; 1
    2dea:	65 e0       	ldi	r22, 0x05	; 5
    2dec:	40 e0       	ldi	r20, 0x00	; 0
    2dee:	0e 94 79 08 	call	0x10f2	; 0x10f2 <DIO_voidSetPinValue>
    2df2:	80 e0       	ldi	r24, 0x00	; 0
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	aa ef       	ldi	r26, 0xFA	; 250
    2df8:	b3 e4       	ldi	r27, 0x43	; 67
    2dfa:	8b 87       	std	Y+11, r24	; 0x0b
    2dfc:	9c 87       	std	Y+12, r25	; 0x0c
    2dfe:	ad 87       	std	Y+13, r26	; 0x0d
    2e00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e02:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e04:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e0a:	20 e0       	ldi	r18, 0x00	; 0
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	4a ef       	ldi	r20, 0xFA	; 250
    2e10:	54 e4       	ldi	r21, 0x44	; 68
    2e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e16:	dc 01       	movw	r26, r24
    2e18:	cb 01       	movw	r24, r22
    2e1a:	8f 83       	std	Y+7, r24	; 0x07
    2e1c:	98 87       	std	Y+8, r25	; 0x08
    2e1e:	a9 87       	std	Y+9, r26	; 0x09
    2e20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e22:	6f 81       	ldd	r22, Y+7	; 0x07
    2e24:	78 85       	ldd	r23, Y+8	; 0x08
    2e26:	89 85       	ldd	r24, Y+9	; 0x09
    2e28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	40 e8       	ldi	r20, 0x80	; 128
    2e30:	5f e3       	ldi	r21, 0x3F	; 63
    2e32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e36:	88 23       	and	r24, r24
    2e38:	2c f4       	brge	.+10     	; 0x2e44 <start+0x2d6>
		__ticks = 1;
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	9e 83       	std	Y+6, r25	; 0x06
    2e40:	8d 83       	std	Y+5, r24	; 0x05
    2e42:	3f c0       	rjmp	.+126    	; 0x2ec2 <start+0x354>
	else if (__tmp > 65535)
    2e44:	6f 81       	ldd	r22, Y+7	; 0x07
    2e46:	78 85       	ldd	r23, Y+8	; 0x08
    2e48:	89 85       	ldd	r24, Y+9	; 0x09
    2e4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e4c:	20 e0       	ldi	r18, 0x00	; 0
    2e4e:	3f ef       	ldi	r19, 0xFF	; 255
    2e50:	4f e7       	ldi	r20, 0x7F	; 127
    2e52:	57 e4       	ldi	r21, 0x47	; 71
    2e54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e58:	18 16       	cp	r1, r24
    2e5a:	4c f5       	brge	.+82     	; 0x2eae <start+0x340>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e60:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e62:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e64:	20 e0       	ldi	r18, 0x00	; 0
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	40 e2       	ldi	r20, 0x20	; 32
    2e6a:	51 e4       	ldi	r21, 0x41	; 65
    2e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	bc 01       	movw	r22, r24
    2e76:	cd 01       	movw	r24, r26
    2e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	cb 01       	movw	r24, r22
    2e80:	9e 83       	std	Y+6, r25	; 0x06
    2e82:	8d 83       	std	Y+5, r24	; 0x05
    2e84:	0f c0       	rjmp	.+30     	; 0x2ea4 <start+0x336>
    2e86:	88 ec       	ldi	r24, 0xC8	; 200
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	9c 83       	std	Y+4, r25	; 0x04
    2e8c:	8b 83       	std	Y+3, r24	; 0x03
    2e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e90:	9c 81       	ldd	r25, Y+4	; 0x04
    2e92:	01 97       	sbiw	r24, 0x01	; 1
    2e94:	f1 f7       	brne	.-4      	; 0x2e92 <start+0x324>
    2e96:	9c 83       	std	Y+4, r25	; 0x04
    2e98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e9e:	01 97       	sbiw	r24, 0x01	; 1
    2ea0:	9e 83       	std	Y+6, r25	; 0x06
    2ea2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea8:	00 97       	sbiw	r24, 0x00	; 0
    2eaa:	69 f7       	brne	.-38     	; 0x2e86 <start+0x318>
    2eac:	14 c0       	rjmp	.+40     	; 0x2ed6 <start+0x368>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eae:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb0:	78 85       	ldd	r23, Y+8	; 0x08
    2eb2:	89 85       	ldd	r24, Y+9	; 0x09
    2eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	9e 83       	std	Y+6, r25	; 0x06
    2ec0:	8d 83       	std	Y+5, r24	; 0x05
    2ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec6:	9a 83       	std	Y+2, r25	; 0x02
    2ec8:	89 83       	std	Y+1, r24	; 0x01
    2eca:	89 81       	ldd	r24, Y+1	; 0x01
    2ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ece:	01 97       	sbiw	r24, 0x01	; 1
    2ed0:	f1 f7       	brne	.-4      	; 0x2ece <start+0x360>
    2ed2:	9a 83       	std	Y+2, r25	; 0x02
    2ed4:	89 83       	std	Y+1, r24	; 0x01

//_____________controlling leds of 3 Rooms using 3 LDR (one in each room)__________________
//___________________________ROOM_1___________________________
/*take value of LDR of room1 , converting them into m_volt*/

LDR_room1 = ADC_u16GetDigitalValue(ADC_Channel_2);
    2ed6:	82 e0       	ldi	r24, 0x02	; 2
    2ed8:	0e 94 31 07 	call	0xe62	; 0xe62 <ADC_u16GetDigitalValue>
    2edc:	90 93 c7 01 	sts	0x01C7, r25
    2ee0:	80 93 c6 01 	sts	0x01C6, r24
LDR_room1 = ((u32)LDR_room1*5000)/(u16)1023  ; //m-volt
    2ee4:	80 91 c6 01 	lds	r24, 0x01C6
    2ee8:	90 91 c7 01 	lds	r25, 0x01C7
    2eec:	cc 01       	movw	r24, r24
    2eee:	a0 e0       	ldi	r26, 0x00	; 0
    2ef0:	b0 e0       	ldi	r27, 0x00	; 0
    2ef2:	28 e8       	ldi	r18, 0x88	; 136
    2ef4:	33 e1       	ldi	r19, 0x13	; 19
    2ef6:	40 e0       	ldi	r20, 0x00	; 0
    2ef8:	50 e0       	ldi	r21, 0x00	; 0
    2efa:	bc 01       	movw	r22, r24
    2efc:	cd 01       	movw	r24, r26
    2efe:	0e 94 1f 18 	call	0x303e	; 0x303e <__mulsi3>
    2f02:	dc 01       	movw	r26, r24
    2f04:	cb 01       	movw	r24, r22
    2f06:	2f ef       	ldi	r18, 0xFF	; 255
    2f08:	33 e0       	ldi	r19, 0x03	; 3
    2f0a:	40 e0       	ldi	r20, 0x00	; 0
    2f0c:	50 e0       	ldi	r21, 0x00	; 0
    2f0e:	bc 01       	movw	r22, r24
    2f10:	cd 01       	movw	r24, r26
    2f12:	0e 94 3e 18 	call	0x307c	; 0x307c <__udivmodsi4>
    2f16:	da 01       	movw	r26, r20
    2f18:	c9 01       	movw	r24, r18
    2f1a:	90 93 c7 01 	sts	0x01C7, r25
    2f1e:	80 93 c6 01 	sts	0x01C6, r24

/*condition for led to turn it ON or OFF depending on readings of LDR of room1*/
 if (LDR_room1 < 2500)
    2f22:	80 91 c6 01 	lds	r24, 0x01C6
    2f26:	90 91 c7 01 	lds	r25, 0x01C7
    2f2a:	29 e0       	ldi	r18, 0x09	; 9
    2f2c:	84 3c       	cpi	r24, 0xC4	; 196
    2f2e:	92 07       	cpc	r25, r18
    2f30:	30 f4       	brcc	.+12     	; 0x2f3e <start+0x3d0>
{
	DIO_voidSetPinValue(DIO_PORTD ,DIO_PIN3 , DIO_HIGH);
    2f32:	83 e0       	ldi	r24, 0x03	; 3
    2f34:	63 e0       	ldi	r22, 0x03	; 3
    2f36:	41 e0       	ldi	r20, 0x01	; 1
    2f38:	0e 94 79 08 	call	0x10f2	; 0x10f2 <DIO_voidSetPinValue>
    2f3c:	05 c0       	rjmp	.+10     	; 0x2f48 <start+0x3da>
}
else
{
	DIO_voidSetPinValue(DIO_PORTD ,DIO_PIN3 , DIO_LOW);
    2f3e:	83 e0       	ldi	r24, 0x03	; 3
    2f40:	63 e0       	ldi	r22, 0x03	; 3
    2f42:	40 e0       	ldi	r20, 0x00	; 0
    2f44:	0e 94 79 08 	call	0x10f2	; 0x10f2 <DIO_voidSetPinValue>
}
//___________________________ROOM_2____________________________
/*take value of LDR of room2 , converting them into m_volt*/
LDR_room2 =ADC_u16GetDigitalValue(ADC_Channel_3);
    2f48:	83 e0       	ldi	r24, 0x03	; 3
    2f4a:	0e 94 31 07 	call	0xe62	; 0xe62 <ADC_u16GetDigitalValue>
    2f4e:	90 93 c9 01 	sts	0x01C9, r25
    2f52:	80 93 c8 01 	sts	0x01C8, r24
LDR_room2 = ((u32)LDR_room2*5000)/(u16)1023  ; //m-volt
    2f56:	80 91 c8 01 	lds	r24, 0x01C8
    2f5a:	90 91 c9 01 	lds	r25, 0x01C9
    2f5e:	cc 01       	movw	r24, r24
    2f60:	a0 e0       	ldi	r26, 0x00	; 0
    2f62:	b0 e0       	ldi	r27, 0x00	; 0
    2f64:	28 e8       	ldi	r18, 0x88	; 136
    2f66:	33 e1       	ldi	r19, 0x13	; 19
    2f68:	40 e0       	ldi	r20, 0x00	; 0
    2f6a:	50 e0       	ldi	r21, 0x00	; 0
    2f6c:	bc 01       	movw	r22, r24
    2f6e:	cd 01       	movw	r24, r26
    2f70:	0e 94 1f 18 	call	0x303e	; 0x303e <__mulsi3>
    2f74:	dc 01       	movw	r26, r24
    2f76:	cb 01       	movw	r24, r22
    2f78:	2f ef       	ldi	r18, 0xFF	; 255
    2f7a:	33 e0       	ldi	r19, 0x03	; 3
    2f7c:	40 e0       	ldi	r20, 0x00	; 0
    2f7e:	50 e0       	ldi	r21, 0x00	; 0
    2f80:	bc 01       	movw	r22, r24
    2f82:	cd 01       	movw	r24, r26
    2f84:	0e 94 3e 18 	call	0x307c	; 0x307c <__udivmodsi4>
    2f88:	da 01       	movw	r26, r20
    2f8a:	c9 01       	movw	r24, r18
    2f8c:	90 93 c9 01 	sts	0x01C9, r25
    2f90:	80 93 c8 01 	sts	0x01C8, r24

/*condition for led to turn it ON or OFF depending on readings of LDR of room2*/
if (LDR_room2 < 2500)
    2f94:	80 91 c8 01 	lds	r24, 0x01C8
    2f98:	90 91 c9 01 	lds	r25, 0x01C9
    2f9c:	29 e0       	ldi	r18, 0x09	; 9
    2f9e:	84 3c       	cpi	r24, 0xC4	; 196
    2fa0:	92 07       	cpc	r25, r18
    2fa2:	30 f4       	brcc	.+12     	; 0x2fb0 <start+0x442>
{
	DIO_voidSetPinValue(DIO_PORTD ,DIO_PIN7 , DIO_HIGH);
    2fa4:	83 e0       	ldi	r24, 0x03	; 3
    2fa6:	67 e0       	ldi	r22, 0x07	; 7
    2fa8:	41 e0       	ldi	r20, 0x01	; 1
    2faa:	0e 94 79 08 	call	0x10f2	; 0x10f2 <DIO_voidSetPinValue>
    2fae:	05 c0       	rjmp	.+10     	; 0x2fba <start+0x44c>
}
else
{
	DIO_voidSetPinValue(DIO_PORTD ,DIO_PIN7 , DIO_LOW);
    2fb0:	83 e0       	ldi	r24, 0x03	; 3
    2fb2:	67 e0       	ldi	r22, 0x07	; 7
    2fb4:	40 e0       	ldi	r20, 0x00	; 0
    2fb6:	0e 94 79 08 	call	0x10f2	; 0x10f2 <DIO_voidSetPinValue>
}
//___________________________ROOM_3____________________________
/*take value of LDR of room3 , converting them into m_volt*/
LDR_room3 = ADC_u16GetDigitalValue(ADC_Channel_4);
    2fba:	84 e0       	ldi	r24, 0x04	; 4
    2fbc:	0e 94 31 07 	call	0xe62	; 0xe62 <ADC_u16GetDigitalValue>
    2fc0:	90 93 cb 01 	sts	0x01CB, r25
    2fc4:	80 93 ca 01 	sts	0x01CA, r24
LDR_room3 = ((u32)LDR_room3*5000)/(u16)1023  ; //m-volt
    2fc8:	80 91 ca 01 	lds	r24, 0x01CA
    2fcc:	90 91 cb 01 	lds	r25, 0x01CB
    2fd0:	cc 01       	movw	r24, r24
    2fd2:	a0 e0       	ldi	r26, 0x00	; 0
    2fd4:	b0 e0       	ldi	r27, 0x00	; 0
    2fd6:	28 e8       	ldi	r18, 0x88	; 136
    2fd8:	33 e1       	ldi	r19, 0x13	; 19
    2fda:	40 e0       	ldi	r20, 0x00	; 0
    2fdc:	50 e0       	ldi	r21, 0x00	; 0
    2fde:	bc 01       	movw	r22, r24
    2fe0:	cd 01       	movw	r24, r26
    2fe2:	0e 94 1f 18 	call	0x303e	; 0x303e <__mulsi3>
    2fe6:	dc 01       	movw	r26, r24
    2fe8:	cb 01       	movw	r24, r22
    2fea:	2f ef       	ldi	r18, 0xFF	; 255
    2fec:	33 e0       	ldi	r19, 0x03	; 3
    2fee:	40 e0       	ldi	r20, 0x00	; 0
    2ff0:	50 e0       	ldi	r21, 0x00	; 0
    2ff2:	bc 01       	movw	r22, r24
    2ff4:	cd 01       	movw	r24, r26
    2ff6:	0e 94 3e 18 	call	0x307c	; 0x307c <__udivmodsi4>
    2ffa:	da 01       	movw	r26, r20
    2ffc:	c9 01       	movw	r24, r18
    2ffe:	90 93 cb 01 	sts	0x01CB, r25
    3002:	80 93 ca 01 	sts	0x01CA, r24

/*condition for led to turn it ON or OFF depending on readings of LDR of room3*/
if (LDR_room3 < 2500)
    3006:	80 91 ca 01 	lds	r24, 0x01CA
    300a:	90 91 cb 01 	lds	r25, 0x01CB
    300e:	29 e0       	ldi	r18, 0x09	; 9
    3010:	84 3c       	cpi	r24, 0xC4	; 196
    3012:	92 07       	cpc	r25, r18
    3014:	30 f4       	brcc	.+12     	; 0x3022 <start+0x4b4>
{
	DIO_voidSetPinValue(DIO_PORTD ,DIO_PIN6 , DIO_HIGH);
    3016:	83 e0       	ldi	r24, 0x03	; 3
    3018:	66 e0       	ldi	r22, 0x06	; 6
    301a:	41 e0       	ldi	r20, 0x01	; 1
    301c:	0e 94 79 08 	call	0x10f2	; 0x10f2 <DIO_voidSetPinValue>
    3020:	05 c0       	rjmp	.+10     	; 0x302c <start+0x4be>
}
else
{
	DIO_voidSetPinValue(DIO_PORTD ,DIO_PIN6 , DIO_LOW);
    3022:	83 e0       	ldi	r24, 0x03	; 3
    3024:	66 e0       	ldi	r22, 0x06	; 6
    3026:	40 e0       	ldi	r20, 0x00	; 0
    3028:	0e 94 79 08 	call	0x10f2	; 0x10f2 <DIO_voidSetPinValue>
}
}
    302c:	6c 96       	adiw	r28, 0x1c	; 28
    302e:	0f b6       	in	r0, 0x3f	; 63
    3030:	f8 94       	cli
    3032:	de bf       	out	0x3e, r29	; 62
    3034:	0f be       	out	0x3f, r0	; 63
    3036:	cd bf       	out	0x3d, r28	; 61
    3038:	cf 91       	pop	r28
    303a:	df 91       	pop	r29
    303c:	08 95       	ret

0000303e <__mulsi3>:
    303e:	62 9f       	mul	r22, r18
    3040:	d0 01       	movw	r26, r0
    3042:	73 9f       	mul	r23, r19
    3044:	f0 01       	movw	r30, r0
    3046:	82 9f       	mul	r24, r18
    3048:	e0 0d       	add	r30, r0
    304a:	f1 1d       	adc	r31, r1
    304c:	64 9f       	mul	r22, r20
    304e:	e0 0d       	add	r30, r0
    3050:	f1 1d       	adc	r31, r1
    3052:	92 9f       	mul	r25, r18
    3054:	f0 0d       	add	r31, r0
    3056:	83 9f       	mul	r24, r19
    3058:	f0 0d       	add	r31, r0
    305a:	74 9f       	mul	r23, r20
    305c:	f0 0d       	add	r31, r0
    305e:	65 9f       	mul	r22, r21
    3060:	f0 0d       	add	r31, r0
    3062:	99 27       	eor	r25, r25
    3064:	72 9f       	mul	r23, r18
    3066:	b0 0d       	add	r27, r0
    3068:	e1 1d       	adc	r30, r1
    306a:	f9 1f       	adc	r31, r25
    306c:	63 9f       	mul	r22, r19
    306e:	b0 0d       	add	r27, r0
    3070:	e1 1d       	adc	r30, r1
    3072:	f9 1f       	adc	r31, r25
    3074:	bd 01       	movw	r22, r26
    3076:	cf 01       	movw	r24, r30
    3078:	11 24       	eor	r1, r1
    307a:	08 95       	ret

0000307c <__udivmodsi4>:
    307c:	a1 e2       	ldi	r26, 0x21	; 33
    307e:	1a 2e       	mov	r1, r26
    3080:	aa 1b       	sub	r26, r26
    3082:	bb 1b       	sub	r27, r27
    3084:	fd 01       	movw	r30, r26
    3086:	0d c0       	rjmp	.+26     	; 0x30a2 <__udivmodsi4_ep>

00003088 <__udivmodsi4_loop>:
    3088:	aa 1f       	adc	r26, r26
    308a:	bb 1f       	adc	r27, r27
    308c:	ee 1f       	adc	r30, r30
    308e:	ff 1f       	adc	r31, r31
    3090:	a2 17       	cp	r26, r18
    3092:	b3 07       	cpc	r27, r19
    3094:	e4 07       	cpc	r30, r20
    3096:	f5 07       	cpc	r31, r21
    3098:	20 f0       	brcs	.+8      	; 0x30a2 <__udivmodsi4_ep>
    309a:	a2 1b       	sub	r26, r18
    309c:	b3 0b       	sbc	r27, r19
    309e:	e4 0b       	sbc	r30, r20
    30a0:	f5 0b       	sbc	r31, r21

000030a2 <__udivmodsi4_ep>:
    30a2:	66 1f       	adc	r22, r22
    30a4:	77 1f       	adc	r23, r23
    30a6:	88 1f       	adc	r24, r24
    30a8:	99 1f       	adc	r25, r25
    30aa:	1a 94       	dec	r1
    30ac:	69 f7       	brne	.-38     	; 0x3088 <__udivmodsi4_loop>
    30ae:	60 95       	com	r22
    30b0:	70 95       	com	r23
    30b2:	80 95       	com	r24
    30b4:	90 95       	com	r25
    30b6:	9b 01       	movw	r18, r22
    30b8:	ac 01       	movw	r20, r24
    30ba:	bd 01       	movw	r22, r26
    30bc:	cf 01       	movw	r24, r30
    30be:	08 95       	ret

000030c0 <__prologue_saves__>:
    30c0:	2f 92       	push	r2
    30c2:	3f 92       	push	r3
    30c4:	4f 92       	push	r4
    30c6:	5f 92       	push	r5
    30c8:	6f 92       	push	r6
    30ca:	7f 92       	push	r7
    30cc:	8f 92       	push	r8
    30ce:	9f 92       	push	r9
    30d0:	af 92       	push	r10
    30d2:	bf 92       	push	r11
    30d4:	cf 92       	push	r12
    30d6:	df 92       	push	r13
    30d8:	ef 92       	push	r14
    30da:	ff 92       	push	r15
    30dc:	0f 93       	push	r16
    30de:	1f 93       	push	r17
    30e0:	cf 93       	push	r28
    30e2:	df 93       	push	r29
    30e4:	cd b7       	in	r28, 0x3d	; 61
    30e6:	de b7       	in	r29, 0x3e	; 62
    30e8:	ca 1b       	sub	r28, r26
    30ea:	db 0b       	sbc	r29, r27
    30ec:	0f b6       	in	r0, 0x3f	; 63
    30ee:	f8 94       	cli
    30f0:	de bf       	out	0x3e, r29	; 62
    30f2:	0f be       	out	0x3f, r0	; 63
    30f4:	cd bf       	out	0x3d, r28	; 61
    30f6:	09 94       	ijmp

000030f8 <__epilogue_restores__>:
    30f8:	2a 88       	ldd	r2, Y+18	; 0x12
    30fa:	39 88       	ldd	r3, Y+17	; 0x11
    30fc:	48 88       	ldd	r4, Y+16	; 0x10
    30fe:	5f 84       	ldd	r5, Y+15	; 0x0f
    3100:	6e 84       	ldd	r6, Y+14	; 0x0e
    3102:	7d 84       	ldd	r7, Y+13	; 0x0d
    3104:	8c 84       	ldd	r8, Y+12	; 0x0c
    3106:	9b 84       	ldd	r9, Y+11	; 0x0b
    3108:	aa 84       	ldd	r10, Y+10	; 0x0a
    310a:	b9 84       	ldd	r11, Y+9	; 0x09
    310c:	c8 84       	ldd	r12, Y+8	; 0x08
    310e:	df 80       	ldd	r13, Y+7	; 0x07
    3110:	ee 80       	ldd	r14, Y+6	; 0x06
    3112:	fd 80       	ldd	r15, Y+5	; 0x05
    3114:	0c 81       	ldd	r16, Y+4	; 0x04
    3116:	1b 81       	ldd	r17, Y+3	; 0x03
    3118:	aa 81       	ldd	r26, Y+2	; 0x02
    311a:	b9 81       	ldd	r27, Y+1	; 0x01
    311c:	ce 0f       	add	r28, r30
    311e:	d1 1d       	adc	r29, r1
    3120:	0f b6       	in	r0, 0x3f	; 63
    3122:	f8 94       	cli
    3124:	de bf       	out	0x3e, r29	; 62
    3126:	0f be       	out	0x3f, r0	; 63
    3128:	cd bf       	out	0x3d, r28	; 61
    312a:	ed 01       	movw	r28, r26
    312c:	08 95       	ret

0000312e <_exit>:
    312e:	f8 94       	cli

00003130 <__stop_program>:
    3130:	ff cf       	rjmp	.-2      	; 0x3130 <__stop_program>
