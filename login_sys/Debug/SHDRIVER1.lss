
SHDRIVER1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003468  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00800060  00003468  000034fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000c4  008000c4  00003560  2**0
                  ALLOC
  3 .stab         00002844  00000000  00000000  00003560  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010b4  00000000  00000000  00005da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00006fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00007147  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000918c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a28d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b210  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b390  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b652  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bee0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 3e 12 	jmp	0x247c	; 0x247c <__vector_6>
      1c:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 d8 11 	jmp	0x23b0	; 0x23b0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3c       	cpi	r26, 0xC4	; 196
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 ec       	ldi	r26, 0xC4	; 196
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3c       	cpi	r26, 0xC6	; 198
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <main>
      8a:	0c 94 32 1a 	jmp	0x3464	; 0x3464 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 ea       	ldi	r26, 0xA4	; 164
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 17 1a 	jmp	0x342e	; 0x342e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 23 1a 	jmp	0x3446	; 0x3446 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 23 1a 	jmp	0x3446	; 0x3446 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 ea       	ldi	r24, 0xA4	; 164
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 17 1a 	jmp	0x342e	; 0x342e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 03 1a 	jmp	0x3406	; 0x3406 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	64 ea       	ldi	r22, 0xA4	; 164
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 1f 1a 	jmp	0x343e	; 0x343e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 23 1a 	jmp	0x3446	; 0x3446 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 23 1a 	jmp	0x3446	; 0x3446 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 23 1a 	jmp	0x3446	; 0x3446 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 27 1a 	jmp	0x344e	; 0x344e <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_voidSetPinDirection>:
#include <avr/io.h>
#include "STD_Types.h"
#include "BIT_Math.h"
#include "DIO.h"

void DIO_voidSetPinDirection (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction){ 		//DDRA,B,C,D
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	27 97       	sbiw	r28, 0x07	; 7
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	89 83       	std	Y+1, r24	; 0x01
     cb4:	6a 83       	std	Y+2, r22	; 0x02
     cb6:	4b 83       	std	Y+3, r20	; 0x03
	if( Copy_u8Pin <8){
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	88 30       	cpi	r24, 0x08	; 8
     cbc:	08 f0       	brcs	.+2      	; 0xcc0 <DIO_voidSetPinDirection+0x22>
     cbe:	ea c0       	rjmp	.+468    	; 0xe94 <DIO_voidSetPinDirection+0x1f6>
		
		if(Copy_u8Direction == DIO_OUTPUT){
     cc0:	8b 81       	ldd	r24, Y+3	; 0x03
     cc2:	81 30       	cpi	r24, 0x01	; 1
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <DIO_voidSetPinDirection+0x2a>
     cc6:	6f c0       	rjmp	.+222    	; 0xda6 <DIO_voidSetPinDirection+0x108>
			switch(Copy_u8Port)
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	3f 83       	std	Y+7, r19	; 0x07
     cd0:	2e 83       	std	Y+6, r18	; 0x06
     cd2:	8e 81       	ldd	r24, Y+6	; 0x06
     cd4:	9f 81       	ldd	r25, Y+7	; 0x07
     cd6:	81 30       	cpi	r24, 0x01	; 1
     cd8:	91 05       	cpc	r25, r1
     cda:	49 f1       	breq	.+82     	; 0xd2e <DIO_voidSetPinDirection+0x90>
     cdc:	2e 81       	ldd	r18, Y+6	; 0x06
     cde:	3f 81       	ldd	r19, Y+7	; 0x07
     ce0:	22 30       	cpi	r18, 0x02	; 2
     ce2:	31 05       	cpc	r19, r1
     ce4:	2c f4       	brge	.+10     	; 0xcf0 <DIO_voidSetPinDirection+0x52>
     ce6:	8e 81       	ldd	r24, Y+6	; 0x06
     ce8:	9f 81       	ldd	r25, Y+7	; 0x07
     cea:	00 97       	sbiw	r24, 0x00	; 0
     cec:	61 f0       	breq	.+24     	; 0xd06 <DIO_voidSetPinDirection+0x68>
     cee:	d2 c0       	rjmp	.+420    	; 0xe94 <DIO_voidSetPinDirection+0x1f6>
     cf0:	2e 81       	ldd	r18, Y+6	; 0x06
     cf2:	3f 81       	ldd	r19, Y+7	; 0x07
     cf4:	22 30       	cpi	r18, 0x02	; 2
     cf6:	31 05       	cpc	r19, r1
     cf8:	71 f1       	breq	.+92     	; 0xd56 <DIO_voidSetPinDirection+0xb8>
     cfa:	8e 81       	ldd	r24, Y+6	; 0x06
     cfc:	9f 81       	ldd	r25, Y+7	; 0x07
     cfe:	83 30       	cpi	r24, 0x03	; 3
     d00:	91 05       	cpc	r25, r1
     d02:	e9 f1       	breq	.+122    	; 0xd7e <DIO_voidSetPinDirection+0xe0>
     d04:	c7 c0       	rjmp	.+398    	; 0xe94 <DIO_voidSetPinDirection+0x1f6>
			{
				case DIO_PORTA :	SET_BIT(DDRA, Copy_u8Pin); break;
     d06:	aa e3       	ldi	r26, 0x3A	; 58
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	ea e3       	ldi	r30, 0x3A	; 58
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	48 2f       	mov	r20, r24
     d12:	8a 81       	ldd	r24, Y+2	; 0x02
     d14:	28 2f       	mov	r18, r24
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	02 2e       	mov	r0, r18
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <DIO_voidSetPinDirection+0x86>
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	0a 94       	dec	r0
     d26:	e2 f7       	brpl	.-8      	; 0xd20 <DIO_voidSetPinDirection+0x82>
     d28:	84 2b       	or	r24, r20
     d2a:	8c 93       	st	X, r24
     d2c:	b3 c0       	rjmp	.+358    	; 0xe94 <DIO_voidSetPinDirection+0x1f6>
				case DIO_PORTB :	SET_BIT(DDRB, Copy_u8Pin); break;
     d2e:	a7 e3       	ldi	r26, 0x37	; 55
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e7 e3       	ldi	r30, 0x37	; 55
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	48 2f       	mov	r20, r24
     d3a:	8a 81       	ldd	r24, Y+2	; 0x02
     d3c:	28 2f       	mov	r18, r24
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	02 2e       	mov	r0, r18
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <DIO_voidSetPinDirection+0xae>
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	0a 94       	dec	r0
     d4e:	e2 f7       	brpl	.-8      	; 0xd48 <DIO_voidSetPinDirection+0xaa>
     d50:	84 2b       	or	r24, r20
     d52:	8c 93       	st	X, r24
     d54:	9f c0       	rjmp	.+318    	; 0xe94 <DIO_voidSetPinDirection+0x1f6>
				case DIO_PORTC :	SET_BIT(DDRC, Copy_u8Pin); break;
     d56:	a4 e3       	ldi	r26, 0x34	; 52
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e4 e3       	ldi	r30, 0x34	; 52
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	48 2f       	mov	r20, r24
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	02 2e       	mov	r0, r18
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <DIO_voidSetPinDirection+0xd6>
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	0a 94       	dec	r0
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <DIO_voidSetPinDirection+0xd2>
     d78:	84 2b       	or	r24, r20
     d7a:	8c 93       	st	X, r24
     d7c:	8b c0       	rjmp	.+278    	; 0xe94 <DIO_voidSetPinDirection+0x1f6>
				case DIO_PORTD :	SET_BIT(DDRD, Copy_u8Pin); break;
     d7e:	a1 e3       	ldi	r26, 0x31	; 49
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e1 e3       	ldi	r30, 0x31	; 49
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	48 2f       	mov	r20, r24
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	28 2f       	mov	r18, r24
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	02 2e       	mov	r0, r18
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <DIO_voidSetPinDirection+0xfe>
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	0a 94       	dec	r0
     d9e:	e2 f7       	brpl	.-8      	; 0xd98 <DIO_voidSetPinDirection+0xfa>
     da0:	84 2b       	or	r24, r20
     da2:	8c 93       	st	X, r24
     da4:	77 c0       	rjmp	.+238    	; 0xe94 <DIO_voidSetPinDirection+0x1f6>
				default		   :		/* do nothing */	   break;
			}
			
		}
		else if(Copy_u8Direction == DIO_INPUT){
     da6:	8b 81       	ldd	r24, Y+3	; 0x03
     da8:	88 23       	and	r24, r24
     daa:	09 f0       	breq	.+2      	; 0xdae <DIO_voidSetPinDirection+0x110>
     dac:	73 c0       	rjmp	.+230    	; 0xe94 <DIO_voidSetPinDirection+0x1f6>
			switch(Copy_u8Port)
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	3d 83       	std	Y+5, r19	; 0x05
     db6:	2c 83       	std	Y+4, r18	; 0x04
     db8:	8c 81       	ldd	r24, Y+4	; 0x04
     dba:	9d 81       	ldd	r25, Y+5	; 0x05
     dbc:	81 30       	cpi	r24, 0x01	; 1
     dbe:	91 05       	cpc	r25, r1
     dc0:	59 f1       	breq	.+86     	; 0xe18 <DIO_voidSetPinDirection+0x17a>
     dc2:	2c 81       	ldd	r18, Y+4	; 0x04
     dc4:	3d 81       	ldd	r19, Y+5	; 0x05
     dc6:	22 30       	cpi	r18, 0x02	; 2
     dc8:	31 05       	cpc	r19, r1
     dca:	2c f4       	brge	.+10     	; 0xdd6 <DIO_voidSetPinDirection+0x138>
     dcc:	8c 81       	ldd	r24, Y+4	; 0x04
     dce:	9d 81       	ldd	r25, Y+5	; 0x05
     dd0:	00 97       	sbiw	r24, 0x00	; 0
     dd2:	69 f0       	breq	.+26     	; 0xdee <DIO_voidSetPinDirection+0x150>
     dd4:	5f c0       	rjmp	.+190    	; 0xe94 <DIO_voidSetPinDirection+0x1f6>
     dd6:	2c 81       	ldd	r18, Y+4	; 0x04
     dd8:	3d 81       	ldd	r19, Y+5	; 0x05
     dda:	22 30       	cpi	r18, 0x02	; 2
     ddc:	31 05       	cpc	r19, r1
     dde:	89 f1       	breq	.+98     	; 0xe42 <DIO_voidSetPinDirection+0x1a4>
     de0:	8c 81       	ldd	r24, Y+4	; 0x04
     de2:	9d 81       	ldd	r25, Y+5	; 0x05
     de4:	83 30       	cpi	r24, 0x03	; 3
     de6:	91 05       	cpc	r25, r1
     de8:	09 f4       	brne	.+2      	; 0xdec <DIO_voidSetPinDirection+0x14e>
     dea:	40 c0       	rjmp	.+128    	; 0xe6c <DIO_voidSetPinDirection+0x1ce>
     dec:	53 c0       	rjmp	.+166    	; 0xe94 <DIO_voidSetPinDirection+0x1f6>
			{
				case DIO_PORTA :	CLR_BIT(DDRA, Copy_u8Pin); break;
     dee:	aa e3       	ldi	r26, 0x3A	; 58
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	ea e3       	ldi	r30, 0x3A	; 58
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	48 2f       	mov	r20, r24
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	02 2e       	mov	r0, r18
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <DIO_voidSetPinDirection+0x16e>
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	0a 94       	dec	r0
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <DIO_voidSetPinDirection+0x16a>
     e10:	80 95       	com	r24
     e12:	84 23       	and	r24, r20
     e14:	8c 93       	st	X, r24
     e16:	3e c0       	rjmp	.+124    	; 0xe94 <DIO_voidSetPinDirection+0x1f6>
				case DIO_PORTB :	CLR_BIT(DDRB, Copy_u8Pin); break;
     e18:	a7 e3       	ldi	r26, 0x37	; 55
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	e7 e3       	ldi	r30, 0x37	; 55
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	48 2f       	mov	r20, r24
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	02 2e       	mov	r0, r18
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <DIO_voidSetPinDirection+0x198>
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	0a 94       	dec	r0
     e38:	e2 f7       	brpl	.-8      	; 0xe32 <DIO_voidSetPinDirection+0x194>
     e3a:	80 95       	com	r24
     e3c:	84 23       	and	r24, r20
     e3e:	8c 93       	st	X, r24
     e40:	29 c0       	rjmp	.+82     	; 0xe94 <DIO_voidSetPinDirection+0x1f6>
				case DIO_PORTC :	CLR_BIT(DDRC, Copy_u8Pin); break;
     e42:	a4 e3       	ldi	r26, 0x34	; 52
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e4 e3       	ldi	r30, 0x34	; 52
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	48 2f       	mov	r20, r24
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	02 2e       	mov	r0, r18
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <DIO_voidSetPinDirection+0x1c2>
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	0a 94       	dec	r0
     e62:	e2 f7       	brpl	.-8      	; 0xe5c <DIO_voidSetPinDirection+0x1be>
     e64:	80 95       	com	r24
     e66:	84 23       	and	r24, r20
     e68:	8c 93       	st	X, r24
     e6a:	14 c0       	rjmp	.+40     	; 0xe94 <DIO_voidSetPinDirection+0x1f6>
				case DIO_PORTD :	CLR_BIT(DDRD, Copy_u8Pin); break;
     e6c:	a1 e3       	ldi	r26, 0x31	; 49
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e1 e3       	ldi	r30, 0x31	; 49
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	48 2f       	mov	r20, r24
     e78:	8a 81       	ldd	r24, Y+2	; 0x02
     e7a:	28 2f       	mov	r18, r24
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	02 2e       	mov	r0, r18
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <DIO_voidSetPinDirection+0x1ec>
     e86:	88 0f       	add	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	0a 94       	dec	r0
     e8c:	e2 f7       	brpl	.-8      	; 0xe86 <DIO_voidSetPinDirection+0x1e8>
     e8e:	80 95       	com	r24
     e90:	84 23       	and	r24, r20
     e92:	8c 93       	st	X, r24
	}
	else{
		/* do nothing */
	}
	
}
     e94:	27 96       	adiw	r28, 0x07	; 7
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	f8 94       	cli
     e9a:	de bf       	out	0x3e, r29	; 62
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	cd bf       	out	0x3d, r28	; 61
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	08 95       	ret

00000ea6 <DIO_voidSetPinValue>:


void DIO_voidSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value){ 		//PORT
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
     eae:	27 97       	sbiw	r28, 0x07	; 7
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	f8 94       	cli
     eb4:	de bf       	out	0x3e, r29	; 62
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	cd bf       	out	0x3d, r28	; 61
     eba:	89 83       	std	Y+1, r24	; 0x01
     ebc:	6a 83       	std	Y+2, r22	; 0x02
     ebe:	4b 83       	std	Y+3, r20	; 0x03
	if( Copy_u8Pin <8){
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	88 30       	cpi	r24, 0x08	; 8
     ec4:	08 f0       	brcs	.+2      	; 0xec8 <DIO_voidSetPinValue+0x22>
     ec6:	ea c0       	rjmp	.+468    	; 0x109c <DIO_voidSetPinValue+0x1f6>
		
		if(Copy_u8Value == DIO_HIGH){
     ec8:	8b 81       	ldd	r24, Y+3	; 0x03
     eca:	81 30       	cpi	r24, 0x01	; 1
     ecc:	09 f0       	breq	.+2      	; 0xed0 <DIO_voidSetPinValue+0x2a>
     ece:	6f c0       	rjmp	.+222    	; 0xfae <DIO_voidSetPinValue+0x108>
			switch(Copy_u8Port)
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	3f 83       	std	Y+7, r19	; 0x07
     ed8:	2e 83       	std	Y+6, r18	; 0x06
     eda:	8e 81       	ldd	r24, Y+6	; 0x06
     edc:	9f 81       	ldd	r25, Y+7	; 0x07
     ede:	81 30       	cpi	r24, 0x01	; 1
     ee0:	91 05       	cpc	r25, r1
     ee2:	49 f1       	breq	.+82     	; 0xf36 <DIO_voidSetPinValue+0x90>
     ee4:	2e 81       	ldd	r18, Y+6	; 0x06
     ee6:	3f 81       	ldd	r19, Y+7	; 0x07
     ee8:	22 30       	cpi	r18, 0x02	; 2
     eea:	31 05       	cpc	r19, r1
     eec:	2c f4       	brge	.+10     	; 0xef8 <DIO_voidSetPinValue+0x52>
     eee:	8e 81       	ldd	r24, Y+6	; 0x06
     ef0:	9f 81       	ldd	r25, Y+7	; 0x07
     ef2:	00 97       	sbiw	r24, 0x00	; 0
     ef4:	61 f0       	breq	.+24     	; 0xf0e <DIO_voidSetPinValue+0x68>
     ef6:	d2 c0       	rjmp	.+420    	; 0x109c <DIO_voidSetPinValue+0x1f6>
     ef8:	2e 81       	ldd	r18, Y+6	; 0x06
     efa:	3f 81       	ldd	r19, Y+7	; 0x07
     efc:	22 30       	cpi	r18, 0x02	; 2
     efe:	31 05       	cpc	r19, r1
     f00:	71 f1       	breq	.+92     	; 0xf5e <DIO_voidSetPinValue+0xb8>
     f02:	8e 81       	ldd	r24, Y+6	; 0x06
     f04:	9f 81       	ldd	r25, Y+7	; 0x07
     f06:	83 30       	cpi	r24, 0x03	; 3
     f08:	91 05       	cpc	r25, r1
     f0a:	e9 f1       	breq	.+122    	; 0xf86 <DIO_voidSetPinValue+0xe0>
     f0c:	c7 c0       	rjmp	.+398    	; 0x109c <DIO_voidSetPinValue+0x1f6>
			{
				case DIO_PORTA :	SET_BIT(PORTA, Copy_u8Pin); break;
     f0e:	ab e3       	ldi	r26, 0x3B	; 59
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	eb e3       	ldi	r30, 0x3B	; 59
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 2e       	mov	r0, r18
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <DIO_voidSetPinValue+0x86>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	0a 94       	dec	r0
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <DIO_voidSetPinValue+0x82>
     f30:	84 2b       	or	r24, r20
     f32:	8c 93       	st	X, r24
     f34:	b3 c0       	rjmp	.+358    	; 0x109c <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTB :	SET_BIT(PORTB, Copy_u8Pin); break;
     f36:	a8 e3       	ldi	r26, 0x38	; 56
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e8 e3       	ldi	r30, 0x38	; 56
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	48 2f       	mov	r20, r24
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 2e       	mov	r0, r18
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <DIO_voidSetPinValue+0xae>
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	0a 94       	dec	r0
     f56:	e2 f7       	brpl	.-8      	; 0xf50 <DIO_voidSetPinValue+0xaa>
     f58:	84 2b       	or	r24, r20
     f5a:	8c 93       	st	X, r24
     f5c:	9f c0       	rjmp	.+318    	; 0x109c <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTC :	SET_BIT(PORTC, Copy_u8Pin); break;
     f5e:	a5 e3       	ldi	r26, 0x35	; 53
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e5 e3       	ldi	r30, 0x35	; 53
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	48 2f       	mov	r20, r24
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	02 2e       	mov	r0, r18
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <DIO_voidSetPinValue+0xd6>
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	0a 94       	dec	r0
     f7e:	e2 f7       	brpl	.-8      	; 0xf78 <DIO_voidSetPinValue+0xd2>
     f80:	84 2b       	or	r24, r20
     f82:	8c 93       	st	X, r24
     f84:	8b c0       	rjmp	.+278    	; 0x109c <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTD :	SET_BIT(PORTD, Copy_u8Pin); break;
     f86:	a2 e3       	ldi	r26, 0x32	; 50
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e2 e3       	ldi	r30, 0x32	; 50
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	48 2f       	mov	r20, r24
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	02 2e       	mov	r0, r18
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <DIO_voidSetPinValue+0xfe>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	0a 94       	dec	r0
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <DIO_voidSetPinValue+0xfa>
     fa8:	84 2b       	or	r24, r20
     faa:	8c 93       	st	X, r24
     fac:	77 c0       	rjmp	.+238    	; 0x109c <DIO_voidSetPinValue+0x1f6>
				default		   :		/* do nothing */	    break;
			}
			
		}
		else if(Copy_u8Value == DIO_LOW){
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	88 23       	and	r24, r24
     fb2:	09 f0       	breq	.+2      	; 0xfb6 <DIO_voidSetPinValue+0x110>
     fb4:	73 c0       	rjmp	.+230    	; 0x109c <DIO_voidSetPinValue+0x1f6>
			switch(Copy_u8Port)
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	3d 83       	std	Y+5, r19	; 0x05
     fbe:	2c 83       	std	Y+4, r18	; 0x04
     fc0:	8c 81       	ldd	r24, Y+4	; 0x04
     fc2:	9d 81       	ldd	r25, Y+5	; 0x05
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	91 05       	cpc	r25, r1
     fc8:	59 f1       	breq	.+86     	; 0x1020 <DIO_voidSetPinValue+0x17a>
     fca:	2c 81       	ldd	r18, Y+4	; 0x04
     fcc:	3d 81       	ldd	r19, Y+5	; 0x05
     fce:	22 30       	cpi	r18, 0x02	; 2
     fd0:	31 05       	cpc	r19, r1
     fd2:	2c f4       	brge	.+10     	; 0xfde <DIO_voidSetPinValue+0x138>
     fd4:	8c 81       	ldd	r24, Y+4	; 0x04
     fd6:	9d 81       	ldd	r25, Y+5	; 0x05
     fd8:	00 97       	sbiw	r24, 0x00	; 0
     fda:	69 f0       	breq	.+26     	; 0xff6 <DIO_voidSetPinValue+0x150>
     fdc:	5f c0       	rjmp	.+190    	; 0x109c <DIO_voidSetPinValue+0x1f6>
     fde:	2c 81       	ldd	r18, Y+4	; 0x04
     fe0:	3d 81       	ldd	r19, Y+5	; 0x05
     fe2:	22 30       	cpi	r18, 0x02	; 2
     fe4:	31 05       	cpc	r19, r1
     fe6:	89 f1       	breq	.+98     	; 0x104a <DIO_voidSetPinValue+0x1a4>
     fe8:	8c 81       	ldd	r24, Y+4	; 0x04
     fea:	9d 81       	ldd	r25, Y+5	; 0x05
     fec:	83 30       	cpi	r24, 0x03	; 3
     fee:	91 05       	cpc	r25, r1
     ff0:	09 f4       	brne	.+2      	; 0xff4 <DIO_voidSetPinValue+0x14e>
     ff2:	40 c0       	rjmp	.+128    	; 0x1074 <DIO_voidSetPinValue+0x1ce>
     ff4:	53 c0       	rjmp	.+166    	; 0x109c <DIO_voidSetPinValue+0x1f6>
			{
				case DIO_PORTA :	CLR_BIT(PORTA, Copy_u8Pin); break;
     ff6:	ab e3       	ldi	r26, 0x3B	; 59
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	eb e3       	ldi	r30, 0x3B	; 59
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_voidSetPinValue+0x16e>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_voidSetPinValue+0x16a>
    1018:	80 95       	com	r24
    101a:	84 23       	and	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	3e c0       	rjmp	.+124    	; 0x109c <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTB :	CLR_BIT(PORTB, Copy_u8Pin); break;
    1020:	a8 e3       	ldi	r26, 0x38	; 56
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e8 e3       	ldi	r30, 0x38	; 56
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <DIO_voidSetPinValue+0x198>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <DIO_voidSetPinValue+0x194>
    1042:	80 95       	com	r24
    1044:	84 23       	and	r24, r20
    1046:	8c 93       	st	X, r24
    1048:	29 c0       	rjmp	.+82     	; 0x109c <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTC :	CLR_BIT(PORTC, Copy_u8Pin); break;
    104a:	a5 e3       	ldi	r26, 0x35	; 53
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e5 e3       	ldi	r30, 0x35	; 53
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 2e       	mov	r0, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <DIO_voidSetPinValue+0x1c2>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	0a 94       	dec	r0
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <DIO_voidSetPinValue+0x1be>
    106c:	80 95       	com	r24
    106e:	84 23       	and	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	14 c0       	rjmp	.+40     	; 0x109c <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTD :	CLR_BIT(PORTD, Copy_u8Pin); break;
    1074:	a2 e3       	ldi	r26, 0x32	; 50
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e2 e3       	ldi	r30, 0x32	; 50
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 2e       	mov	r0, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <DIO_voidSetPinValue+0x1ec>
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	0a 94       	dec	r0
    1094:	e2 f7       	brpl	.-8      	; 0x108e <DIO_voidSetPinValue+0x1e8>
    1096:	80 95       	com	r24
    1098:	84 23       	and	r24, r20
    109a:	8c 93       	st	X, r24
		}	
	}
	else{
		/* do nothing */
	}
}
    109c:	27 96       	adiw	r28, 0x07	; 7
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin){		// PINA,B,C,D
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <DIO_u8GetPinValue+0x6>
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <DIO_u8GetPinValue+0x8>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <DIO_u8GetPinValue+0xa>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	if( Copy_u8Pin <8){
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	88 30       	cpi	r24, 0x08	; 8
    10c4:	08 f0       	brcs	.+2      	; 0x10c8 <DIO_u8GetPinValue+0x1a>
    10c6:	6f c0       	rjmp	.+222    	; 0x11a6 <DIO_u8GetPinValue+0xf8>
		switch(Copy_u8Port)
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	3d 83       	std	Y+5, r19	; 0x05
    10d0:	2c 83       	std	Y+4, r18	; 0x04
    10d2:	4c 81       	ldd	r20, Y+4	; 0x04
    10d4:	5d 81       	ldd	r21, Y+5	; 0x05
    10d6:	41 30       	cpi	r20, 0x01	; 1
    10d8:	51 05       	cpc	r21, r1
    10da:	49 f1       	breq	.+82     	; 0x112e <DIO_u8GetPinValue+0x80>
    10dc:	8c 81       	ldd	r24, Y+4	; 0x04
    10de:	9d 81       	ldd	r25, Y+5	; 0x05
    10e0:	82 30       	cpi	r24, 0x02	; 2
    10e2:	91 05       	cpc	r25, r1
    10e4:	34 f4       	brge	.+12     	; 0x10f2 <DIO_u8GetPinValue+0x44>
    10e6:	2c 81       	ldd	r18, Y+4	; 0x04
    10e8:	3d 81       	ldd	r19, Y+5	; 0x05
    10ea:	21 15       	cp	r18, r1
    10ec:	31 05       	cpc	r19, r1
    10ee:	61 f0       	breq	.+24     	; 0x1108 <DIO_u8GetPinValue+0x5a>
    10f0:	57 c0       	rjmp	.+174    	; 0x11a0 <DIO_u8GetPinValue+0xf2>
    10f2:	4c 81       	ldd	r20, Y+4	; 0x04
    10f4:	5d 81       	ldd	r21, Y+5	; 0x05
    10f6:	42 30       	cpi	r20, 0x02	; 2
    10f8:	51 05       	cpc	r21, r1
    10fa:	61 f1       	breq	.+88     	; 0x1154 <DIO_u8GetPinValue+0xa6>
    10fc:	8c 81       	ldd	r24, Y+4	; 0x04
    10fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1100:	83 30       	cpi	r24, 0x03	; 3
    1102:	91 05       	cpc	r25, r1
    1104:	d1 f1       	breq	.+116    	; 0x117a <DIO_u8GetPinValue+0xcc>
    1106:	4c c0       	rjmp	.+152    	; 0x11a0 <DIO_u8GetPinValue+0xf2>
		{
			case DIO_PORTA :	return GET_BIT(PINA, Copy_u8Pin);
    1108:	e9 e3       	ldi	r30, 0x39	; 57
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	88 2f       	mov	r24, r24
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	a9 01       	movw	r20, r18
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <DIO_u8GetPinValue+0x72>
    111c:	55 95       	asr	r21
    111e:	47 95       	ror	r20
    1120:	8a 95       	dec	r24
    1122:	e2 f7       	brpl	.-8      	; 0x111c <DIO_u8GetPinValue+0x6e>
    1124:	ca 01       	movw	r24, r20
    1126:	58 2f       	mov	r21, r24
    1128:	51 70       	andi	r21, 0x01	; 1
    112a:	5b 83       	std	Y+3, r21	; 0x03
    112c:	3d c0       	rjmp	.+122    	; 0x11a8 <DIO_u8GetPinValue+0xfa>
			case DIO_PORTB :	return GET_BIT(PINB, Copy_u8Pin);
    112e:	e6 e3       	ldi	r30, 0x36	; 54
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	88 2f       	mov	r24, r24
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	a9 01       	movw	r20, r18
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <DIO_u8GetPinValue+0x98>
    1142:	55 95       	asr	r21
    1144:	47 95       	ror	r20
    1146:	8a 95       	dec	r24
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <DIO_u8GetPinValue+0x94>
    114a:	ca 01       	movw	r24, r20
    114c:	58 2f       	mov	r21, r24
    114e:	51 70       	andi	r21, 0x01	; 1
    1150:	5b 83       	std	Y+3, r21	; 0x03
    1152:	2a c0       	rjmp	.+84     	; 0x11a8 <DIO_u8GetPinValue+0xfa>
			case DIO_PORTC :	return GET_BIT(PINC, Copy_u8Pin);
    1154:	e3 e3       	ldi	r30, 0x33	; 51
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	88 2f       	mov	r24, r24
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	a9 01       	movw	r20, r18
    1166:	02 c0       	rjmp	.+4      	; 0x116c <DIO_u8GetPinValue+0xbe>
    1168:	55 95       	asr	r21
    116a:	47 95       	ror	r20
    116c:	8a 95       	dec	r24
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <DIO_u8GetPinValue+0xba>
    1170:	ca 01       	movw	r24, r20
    1172:	58 2f       	mov	r21, r24
    1174:	51 70       	andi	r21, 0x01	; 1
    1176:	5b 83       	std	Y+3, r21	; 0x03
    1178:	17 c0       	rjmp	.+46     	; 0x11a8 <DIO_u8GetPinValue+0xfa>
			case DIO_PORTD :	return GET_BIT(PIND, Copy_u8Pin);
    117a:	e0 e3       	ldi	r30, 0x30	; 48
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	88 2f       	mov	r24, r24
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	a9 01       	movw	r20, r18
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <DIO_u8GetPinValue+0xe4>
    118e:	55 95       	asr	r21
    1190:	47 95       	ror	r20
    1192:	8a 95       	dec	r24
    1194:	e2 f7       	brpl	.-8      	; 0x118e <DIO_u8GetPinValue+0xe0>
    1196:	ca 01       	movw	r24, r20
    1198:	58 2f       	mov	r21, r24
    119a:	51 70       	andi	r21, 0x01	; 1
    119c:	5b 83       	std	Y+3, r21	; 0x03
    119e:	04 c0       	rjmp	.+8      	; 0x11a8 <DIO_u8GetPinValue+0xfa>
			default		   :	return 0xff;/* as a wrong entry */
    11a0:	8f ef       	ldi	r24, 0xFF	; 255
    11a2:	8b 83       	std	Y+3, r24	; 0x03
    11a4:	01 c0       	rjmp	.+2      	; 0x11a8 <DIO_u8GetPinValue+0xfa>
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <DIO_u8GetPinValue+0xfe>
	}
	else{
		/* do nothing */
	}
	
}
    11a8:	9b 81       	ldd	r25, Y+3	; 0x03
    11aa:	9e 83       	std	Y+6, r25	; 0x06
    11ac:	8e 81       	ldd	r24, Y+6	; 0x06
    11ae:	26 96       	adiw	r28, 0x06	; 6
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	cd bf       	out	0x3d, r28	; 61
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <DIO_voidSetPortDirection>:


void DIO_voidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction){ // Copy_u8Direction = 0b11100000
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <DIO_voidSetPortDirection+0x6>
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <DIO_voidSetPortDirection+0x8>
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	89 83       	std	Y+1, r24	; 0x01
    11ce:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	3c 83       	std	Y+4, r19	; 0x04
    11d8:	2b 83       	std	Y+3, r18	; 0x03
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	9c 81       	ldd	r25, Y+4	; 0x04
    11de:	81 30       	cpi	r24, 0x01	; 1
    11e0:	91 05       	cpc	r25, r1
    11e2:	d1 f0       	breq	.+52     	; 0x1218 <DIO_voidSetPortDirection+0x58>
    11e4:	2b 81       	ldd	r18, Y+3	; 0x03
    11e6:	3c 81       	ldd	r19, Y+4	; 0x04
    11e8:	22 30       	cpi	r18, 0x02	; 2
    11ea:	31 05       	cpc	r19, r1
    11ec:	2c f4       	brge	.+10     	; 0x11f8 <DIO_voidSetPortDirection+0x38>
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	9c 81       	ldd	r25, Y+4	; 0x04
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	61 f0       	breq	.+24     	; 0x120e <DIO_voidSetPortDirection+0x4e>
    11f6:	1e c0       	rjmp	.+60     	; 0x1234 <DIO_voidSetPortDirection+0x74>
    11f8:	2b 81       	ldd	r18, Y+3	; 0x03
    11fa:	3c 81       	ldd	r19, Y+4	; 0x04
    11fc:	22 30       	cpi	r18, 0x02	; 2
    11fe:	31 05       	cpc	r19, r1
    1200:	81 f0       	breq	.+32     	; 0x1222 <DIO_voidSetPortDirection+0x62>
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	9c 81       	ldd	r25, Y+4	; 0x04
    1206:	83 30       	cpi	r24, 0x03	; 3
    1208:	91 05       	cpc	r25, r1
    120a:	81 f0       	breq	.+32     	; 0x122c <DIO_voidSetPortDirection+0x6c>
    120c:	13 c0       	rjmp	.+38     	; 0x1234 <DIO_voidSetPortDirection+0x74>
	{
		case DIO_PORTA :	DDRA = Copy_u8Direction; break;
    120e:	ea e3       	ldi	r30, 0x3A	; 58
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	80 83       	st	Z, r24
    1216:	0e c0       	rjmp	.+28     	; 0x1234 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTB :	DDRB = Copy_u8Direction; break;
    1218:	e7 e3       	ldi	r30, 0x37	; 55
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	80 83       	st	Z, r24
    1220:	09 c0       	rjmp	.+18     	; 0x1234 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTC :	DDRC = Copy_u8Direction; break;
    1222:	e4 e3       	ldi	r30, 0x34	; 52
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	80 83       	st	Z, r24
    122a:	04 c0       	rjmp	.+8      	; 0x1234 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTD :	DDRD = Copy_u8Direction; break;
    122c:	e1 e3       	ldi	r30, 0x31	; 49
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	80 83       	st	Z, r24
		default		   :		/* do nothing */	 break;
	}
	
}
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	08 95       	ret

00001242 <DIO_voidSetPortValue>:


void DIO_voidSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value){
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	00 d0       	rcall	.+0      	; 0x1248 <DIO_voidSetPortValue+0x6>
    1248:	00 d0       	rcall	.+0      	; 0x124a <DIO_voidSetPortValue+0x8>
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	89 83       	std	Y+1, r24	; 0x01
    1250:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	3c 83       	std	Y+4, r19	; 0x04
    125a:	2b 83       	std	Y+3, r18	; 0x03
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	9c 81       	ldd	r25, Y+4	; 0x04
    1260:	81 30       	cpi	r24, 0x01	; 1
    1262:	91 05       	cpc	r25, r1
    1264:	d1 f0       	breq	.+52     	; 0x129a <DIO_voidSetPortValue+0x58>
    1266:	2b 81       	ldd	r18, Y+3	; 0x03
    1268:	3c 81       	ldd	r19, Y+4	; 0x04
    126a:	22 30       	cpi	r18, 0x02	; 2
    126c:	31 05       	cpc	r19, r1
    126e:	2c f4       	brge	.+10     	; 0x127a <DIO_voidSetPortValue+0x38>
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	9c 81       	ldd	r25, Y+4	; 0x04
    1274:	00 97       	sbiw	r24, 0x00	; 0
    1276:	61 f0       	breq	.+24     	; 0x1290 <DIO_voidSetPortValue+0x4e>
    1278:	1e c0       	rjmp	.+60     	; 0x12b6 <DIO_voidSetPortValue+0x74>
    127a:	2b 81       	ldd	r18, Y+3	; 0x03
    127c:	3c 81       	ldd	r19, Y+4	; 0x04
    127e:	22 30       	cpi	r18, 0x02	; 2
    1280:	31 05       	cpc	r19, r1
    1282:	81 f0       	breq	.+32     	; 0x12a4 <DIO_voidSetPortValue+0x62>
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	9c 81       	ldd	r25, Y+4	; 0x04
    1288:	83 30       	cpi	r24, 0x03	; 3
    128a:	91 05       	cpc	r25, r1
    128c:	81 f0       	breq	.+32     	; 0x12ae <DIO_voidSetPortValue+0x6c>
    128e:	13 c0       	rjmp	.+38     	; 0x12b6 <DIO_voidSetPortValue+0x74>
	{
		case DIO_PORTA :	PORTA = Copy_u8Value; break;
    1290:	eb e3       	ldi	r30, 0x3B	; 59
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	80 83       	st	Z, r24
    1298:	0e c0       	rjmp	.+28     	; 0x12b6 <DIO_voidSetPortValue+0x74>
		case DIO_PORTB :	PORTB = Copy_u8Value; break;
    129a:	e8 e3       	ldi	r30, 0x38	; 56
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	80 83       	st	Z, r24
    12a2:	09 c0       	rjmp	.+18     	; 0x12b6 <DIO_voidSetPortValue+0x74>
		case DIO_PORTC :	PORTC = Copy_u8Value; break;
    12a4:	e5 e3       	ldi	r30, 0x35	; 53
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	80 83       	st	Z, r24
    12ac:	04 c0       	rjmp	.+8      	; 0x12b6 <DIO_voidSetPortValue+0x74>
		case DIO_PORTD :	PORTD = Copy_u8Value; break;
    12ae:	e2 e3       	ldi	r30, 0x32	; 50
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	80 83       	st	Z, r24
		default		   :		/* do nothing */  break;
	}	
	
} 
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	08 95       	ret

000012c4 <DIO_voidTogglePin>:


void DIO_voidTogglePin(u8 Copy_u8Port, u8 Copy_u8Pin){
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	00 d0       	rcall	.+0      	; 0x12ca <DIO_voidTogglePin+0x6>
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
    12ce:	89 83       	std	Y+1, r24	; 0x01
    12d0:	6a 83       	std	Y+2, r22	; 0x02
	
	/* Complete this func */
	
}
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	08 95       	ret

000012dc <KPD_voidInit>:

u8 KPD_Au8RowPins[4] = {KPD_R1_PIN, KPD_R2_PIN, KPD_R3_PIN, KPD_R4_PIN};     // rows -> output
u8 KPD_Au8ColPins[4] = {KPD_C1_PIN, KPD_C2_PIN, KPD_C3_PIN, KPD_C4_PIN};	// columns -> input


void KPD_voidInit(void){
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	0f 92       	push	r0
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62

	u8 Local_u8Count;
	for (Local_u8Count = 0; Local_u8Count < 8; ++Local_u8Count) {
    12e6:	19 82       	std	Y+1, r1	; 0x01
    12e8:	20 c0       	rjmp	.+64     	; 0x132a <KPD_voidInit+0x4e>
		if (Local_u8Count < 4) {
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	84 30       	cpi	r24, 0x04	; 4
    12ee:	68 f4       	brcc	.+26     	; 0x130a <KPD_voidInit+0x2e>
			DIO_voidSetPinDirection(KPD_PORT, KPD_Au8RowPins[Local_u8Count], DIO_OUTPUT);
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	88 2f       	mov	r24, r24
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	fc 01       	movw	r30, r24
    12f8:	e4 54       	subi	r30, 0x44	; 68
    12fa:	ff 4f       	sbci	r31, 0xFF	; 255
    12fc:	90 81       	ld	r25, Z
    12fe:	82 e0       	ldi	r24, 0x02	; 2
    1300:	69 2f       	mov	r22, r25
    1302:	41 e0       	ldi	r20, 0x01	; 1
    1304:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinDirection>
    1308:	0d c0       	rjmp	.+26     	; 0x1324 <KPD_voidInit+0x48>

		} else {
			DIO_voidSetPinDirection(KPD_PORT, KPD_Au8ColPins[Local_u8Count-4], DIO_INPUT);
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	88 2f       	mov	r24, r24
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	04 97       	sbiw	r24, 0x04	; 4
    1312:	fc 01       	movw	r30, r24
    1314:	e0 54       	subi	r30, 0x40	; 64
    1316:	ff 4f       	sbci	r31, 0xFF	; 255
    1318:	90 81       	ld	r25, Z
    131a:	82 e0       	ldi	r24, 0x02	; 2
    131c:	69 2f       	mov	r22, r25
    131e:	40 e0       	ldi	r20, 0x00	; 0
    1320:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinDirection>


void KPD_voidInit(void){

	u8 Local_u8Count;
	for (Local_u8Count = 0; Local_u8Count < 8; ++Local_u8Count) {
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	8f 5f       	subi	r24, 0xFF	; 255
    1328:	89 83       	std	Y+1, r24	; 0x01
    132a:	89 81       	ldd	r24, Y+1	; 0x01
    132c:	88 30       	cpi	r24, 0x08	; 8
    132e:	e8 f2       	brcs	.-70     	; 0x12ea <KPD_voidInit+0xe>
			DIO_voidSetPinDirection(KPD_PORT, KPD_Au8ColPins[Local_u8Count-4], DIO_INPUT);
		}

	}

	DIO_voidSetPortValue(KPD_PORT, 0xff);
    1330:	82 e0       	ldi	r24, 0x02	; 2
    1332:	6f ef       	ldi	r22, 0xFF	; 255
    1334:	0e 94 21 09 	call	0x1242	; 0x1242 <DIO_voidSetPortValue>

}
    1338:	0f 90       	pop	r0
    133a:	cf 91       	pop	r28
    133c:	df 91       	pop	r29
    133e:	08 95       	ret

00001340 <KPD_u8GetPressedKey>:


u8 KPD_u8GetPressedKey(void){
    1340:	df 93       	push	r29
    1342:	cf 93       	push	r28
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	63 97       	sbiw	r28, 0x13	; 19
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	f8 94       	cli
    134e:	de bf       	out	0x3e, r29	; 62
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	cd bf       	out	0x3d, r28	; 61

	u8 Local_u8RowCount, Local_u8ColCount, Local_u8Pressed , Local_u8Flag =0;
    1354:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_u8ReturnedVal = KPD_CHECK_BUTTON_PRESSED_OR_NOT;
    1356:	8f ef       	ldi	r24, 0xFF	; 255
    1358:	8f 87       	std	Y+15, r24	; 0x0f

	for (Local_u8RowCount = 0; Local_u8RowCount < 4; ++Local_u8RowCount) {
    135a:	1b 8a       	std	Y+19, r1	; 0x13
    135c:	dd c0       	rjmp	.+442    	; 0x1518 <KPD_u8GetPressedKey+0x1d8>
		/* applay zero voltage individually on rows*/
		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_LOW);
    135e:	8b 89       	ldd	r24, Y+19	; 0x13
    1360:	88 2f       	mov	r24, r24
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	fc 01       	movw	r30, r24
    1366:	e4 54       	subi	r30, 0x44	; 68
    1368:	ff 4f       	sbci	r31, 0xFF	; 255
    136a:	90 81       	ld	r25, Z
    136c:	82 e0       	ldi	r24, 0x02	; 2
    136e:	69 2f       	mov	r22, r25
    1370:	40 e0       	ldi	r20, 0x00	; 0
    1372:	0e 94 53 07 	call	0xea6	; 0xea6 <DIO_voidSetPinValue>

		for (Local_u8ColCount = 0; Local_u8ColCount < 4; ++Local_u8ColCount) {
    1376:	1a 8a       	std	Y+18, r1	; 0x12
    1378:	b9 c0       	rjmp	.+370    	; 0x14ec <KPD_u8GetPressedKey+0x1ac>
			/* check if any button was pressed*/
			Local_u8Pressed = DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]);
    137a:	8a 89       	ldd	r24, Y+18	; 0x12
    137c:	88 2f       	mov	r24, r24
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	fc 01       	movw	r30, r24
    1382:	e0 54       	subi	r30, 0x40	; 64
    1384:	ff 4f       	sbci	r31, 0xFF	; 255
    1386:	90 81       	ld	r25, Z
    1388:	82 e0       	ldi	r24, 0x02	; 2
    138a:	69 2f       	mov	r22, r25
    138c:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_u8GetPinValue>
    1390:	89 8b       	std	Y+17, r24	; 0x11
			if(Local_u8Pressed == 0){
    1392:	89 89       	ldd	r24, Y+17	; 0x11
    1394:	88 23       	and	r24, r24
    1396:	09 f0       	breq	.+2      	; 0x139a <KPD_u8GetPressedKey+0x5a>
    1398:	a6 c0       	rjmp	.+332    	; 0x14e6 <KPD_u8GetPressedKey+0x1a6>
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	a8 ec       	ldi	r26, 0xC8	; 200
    13a0:	b1 e4       	ldi	r27, 0x41	; 65
    13a2:	8b 87       	std	Y+11, r24	; 0x0b
    13a4:	9c 87       	std	Y+12, r25	; 0x0c
    13a6:	ad 87       	std	Y+13, r26	; 0x0d
    13a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    13b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	4a ef       	ldi	r20, 0xFA	; 250
    13b8:	54 e4       	ldi	r21, 0x44	; 68
    13ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	8f 83       	std	Y+7, r24	; 0x07
    13c4:	98 87       	std	Y+8, r25	; 0x08
    13c6:	a9 87       	std	Y+9, r26	; 0x09
    13c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13ca:	6f 81       	ldd	r22, Y+7	; 0x07
    13cc:	78 85       	ldd	r23, Y+8	; 0x08
    13ce:	89 85       	ldd	r24, Y+9	; 0x09
    13d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	40 e8       	ldi	r20, 0x80	; 128
    13d8:	5f e3       	ldi	r21, 0x3F	; 63
    13da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13de:	88 23       	and	r24, r24
    13e0:	2c f4       	brge	.+10     	; 0x13ec <KPD_u8GetPressedKey+0xac>
		__ticks = 1;
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	9e 83       	std	Y+6, r25	; 0x06
    13e8:	8d 83       	std	Y+5, r24	; 0x05
    13ea:	3f c0       	rjmp	.+126    	; 0x146a <KPD_u8GetPressedKey+0x12a>
	else if (__tmp > 65535)
    13ec:	6f 81       	ldd	r22, Y+7	; 0x07
    13ee:	78 85       	ldd	r23, Y+8	; 0x08
    13f0:	89 85       	ldd	r24, Y+9	; 0x09
    13f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	3f ef       	ldi	r19, 0xFF	; 255
    13f8:	4f e7       	ldi	r20, 0x7F	; 127
    13fa:	57 e4       	ldi	r21, 0x47	; 71
    13fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1400:	18 16       	cp	r1, r24
    1402:	4c f5       	brge	.+82     	; 0x1456 <KPD_u8GetPressedKey+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1404:	6b 85       	ldd	r22, Y+11	; 0x0b
    1406:	7c 85       	ldd	r23, Y+12	; 0x0c
    1408:	8d 85       	ldd	r24, Y+13	; 0x0d
    140a:	9e 85       	ldd	r25, Y+14	; 0x0e
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	40 e2       	ldi	r20, 0x20	; 32
    1412:	51 e4       	ldi	r21, 0x41	; 65
    1414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1418:	dc 01       	movw	r26, r24
    141a:	cb 01       	movw	r24, r22
    141c:	bc 01       	movw	r22, r24
    141e:	cd 01       	movw	r24, r26
    1420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	9e 83       	std	Y+6, r25	; 0x06
    142a:	8d 83       	std	Y+5, r24	; 0x05
    142c:	0f c0       	rjmp	.+30     	; 0x144c <KPD_u8GetPressedKey+0x10c>
    142e:	88 ec       	ldi	r24, 0xC8	; 200
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	9c 83       	std	Y+4, r25	; 0x04
    1434:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	9c 81       	ldd	r25, Y+4	; 0x04
    143a:	01 97       	sbiw	r24, 0x01	; 1
    143c:	f1 f7       	brne	.-4      	; 0x143a <KPD_u8GetPressedKey+0xfa>
    143e:	9c 83       	std	Y+4, r25	; 0x04
    1440:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1442:	8d 81       	ldd	r24, Y+5	; 0x05
    1444:	9e 81       	ldd	r25, Y+6	; 0x06
    1446:	01 97       	sbiw	r24, 0x01	; 1
    1448:	9e 83       	std	Y+6, r25	; 0x06
    144a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    144c:	8d 81       	ldd	r24, Y+5	; 0x05
    144e:	9e 81       	ldd	r25, Y+6	; 0x06
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	69 f7       	brne	.-38     	; 0x142e <KPD_u8GetPressedKey+0xee>
    1454:	14 c0       	rjmp	.+40     	; 0x147e <KPD_u8GetPressedKey+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1456:	6f 81       	ldd	r22, Y+7	; 0x07
    1458:	78 85       	ldd	r23, Y+8	; 0x08
    145a:	89 85       	ldd	r24, Y+9	; 0x09
    145c:	9a 85       	ldd	r25, Y+10	; 0x0a
    145e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	9e 83       	std	Y+6, r25	; 0x06
    1468:	8d 83       	std	Y+5, r24	; 0x05
    146a:	8d 81       	ldd	r24, Y+5	; 0x05
    146c:	9e 81       	ldd	r25, Y+6	; 0x06
    146e:	9a 83       	std	Y+2, r25	; 0x02
    1470:	89 83       	std	Y+1, r24	; 0x01
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	9a 81       	ldd	r25, Y+2	; 0x02
    1476:	01 97       	sbiw	r24, 0x01	; 1
    1478:	f1 f7       	brne	.-4      	; 0x1476 <KPD_u8GetPressedKey+0x136>
    147a:	9a 83       	std	Y+2, r25	; 0x02
    147c:	89 83       	std	Y+1, r24	; 0x01
				/* waite for debouncing*/
				_delay_ms(25);
				/* checking for noise*/
				Local_u8Pressed = DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]);
    147e:	8a 89       	ldd	r24, Y+18	; 0x12
    1480:	88 2f       	mov	r24, r24
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	fc 01       	movw	r30, r24
    1486:	e0 54       	subi	r30, 0x40	; 64
    1488:	ff 4f       	sbci	r31, 0xFF	; 255
    148a:	90 81       	ld	r25, Z
    148c:	82 e0       	ldi	r24, 0x02	; 2
    148e:	69 2f       	mov	r22, r25
    1490:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_u8GetPinValue>
    1494:	89 8b       	std	Y+17, r24	; 0x11
				if(Local_u8Pressed == 0){
    1496:	89 89       	ldd	r24, Y+17	; 0x11
    1498:	88 23       	and	r24, r24
    149a:	29 f5       	brne	.+74     	; 0x14e6 <KPD_u8GetPressedKey+0x1a6>
					Local_u8ReturnedVal = KPD_Au8Keys[Local_u8RowCount][Local_u8ColCount];
    149c:	8b 89       	ldd	r24, Y+19	; 0x13
    149e:	48 2f       	mov	r20, r24
    14a0:	50 e0       	ldi	r21, 0x00	; 0
    14a2:	8a 89       	ldd	r24, Y+18	; 0x12
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	ca 01       	movw	r24, r20
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	82 0f       	add	r24, r18
    14b4:	93 1f       	adc	r25, r19
    14b6:	fc 01       	movw	r30, r24
    14b8:	e4 55       	subi	r30, 0x54	; 84
    14ba:	ff 4f       	sbci	r31, 0xFF	; 255
    14bc:	80 81       	ld	r24, Z
    14be:	8f 87       	std	Y+15, r24	; 0x0f
    14c0:	0c c0       	rjmp	.+24     	; 0x14da <KPD_u8GetPressedKey+0x19a>

					/* handling long press*/
					while(Local_u8Pressed == 0){
						Local_u8Pressed = DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]);
    14c2:	8a 89       	ldd	r24, Y+18	; 0x12
    14c4:	88 2f       	mov	r24, r24
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	fc 01       	movw	r30, r24
    14ca:	e0 54       	subi	r30, 0x40	; 64
    14cc:	ff 4f       	sbci	r31, 0xFF	; 255
    14ce:	90 81       	ld	r25, Z
    14d0:	82 e0       	ldi	r24, 0x02	; 2
    14d2:	69 2f       	mov	r22, r25
    14d4:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_u8GetPinValue>
    14d8:	89 8b       	std	Y+17, r24	; 0x11
				Local_u8Pressed = DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]);
				if(Local_u8Pressed == 0){
					Local_u8ReturnedVal = KPD_Au8Keys[Local_u8RowCount][Local_u8ColCount];

					/* handling long press*/
					while(Local_u8Pressed == 0){
    14da:	89 89       	ldd	r24, Y+17	; 0x11
    14dc:	88 23       	and	r24, r24
    14de:	89 f3       	breq	.-30     	; 0x14c2 <KPD_u8GetPressedKey+0x182>
						Local_u8Pressed = DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColPins[Local_u8ColCount]);
					}
					Local_u8Flag =1;
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	88 8b       	std	Y+16, r24	; 0x10
    14e4:	07 c0       	rjmp	.+14     	; 0x14f4 <KPD_u8GetPressedKey+0x1b4>

	for (Local_u8RowCount = 0; Local_u8RowCount < 4; ++Local_u8RowCount) {
		/* applay zero voltage individually on rows*/
		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_LOW);

		for (Local_u8ColCount = 0; Local_u8ColCount < 4; ++Local_u8ColCount) {
    14e6:	8a 89       	ldd	r24, Y+18	; 0x12
    14e8:	8f 5f       	subi	r24, 0xFF	; 255
    14ea:	8a 8b       	std	Y+18, r24	; 0x12
    14ec:	8a 89       	ldd	r24, Y+18	; 0x12
    14ee:	84 30       	cpi	r24, 0x04	; 4
    14f0:	08 f4       	brcc	.+2      	; 0x14f4 <KPD_u8GetPressedKey+0x1b4>
    14f2:	43 cf       	rjmp	.-378    	; 0x137a <KPD_u8GetPressedKey+0x3a>
					break;
				}
			}
		}

		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_HIGH);
    14f4:	8b 89       	ldd	r24, Y+19	; 0x13
    14f6:	88 2f       	mov	r24, r24
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	fc 01       	movw	r30, r24
    14fc:	e4 54       	subi	r30, 0x44	; 68
    14fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1500:	90 81       	ld	r25, Z
    1502:	82 e0       	ldi	r24, 0x02	; 2
    1504:	69 2f       	mov	r22, r25
    1506:	41 e0       	ldi	r20, 0x01	; 1
    1508:	0e 94 53 07 	call	0xea6	; 0xea6 <DIO_voidSetPinValue>
		if (Local_u8Flag == 1) {break;}
    150c:	88 89       	ldd	r24, Y+16	; 0x10
    150e:	81 30       	cpi	r24, 0x01	; 1
    1510:	39 f0       	breq	.+14     	; 0x1520 <KPD_u8GetPressedKey+0x1e0>
u8 KPD_u8GetPressedKey(void){

	u8 Local_u8RowCount, Local_u8ColCount, Local_u8Pressed , Local_u8Flag =0;
	u8 Local_u8ReturnedVal = KPD_CHECK_BUTTON_PRESSED_OR_NOT;

	for (Local_u8RowCount = 0; Local_u8RowCount < 4; ++Local_u8RowCount) {
    1512:	8b 89       	ldd	r24, Y+19	; 0x13
    1514:	8f 5f       	subi	r24, 0xFF	; 255
    1516:	8b 8b       	std	Y+19, r24	; 0x13
    1518:	8b 89       	ldd	r24, Y+19	; 0x13
    151a:	84 30       	cpi	r24, 0x04	; 4
    151c:	08 f4       	brcc	.+2      	; 0x1520 <KPD_u8GetPressedKey+0x1e0>
    151e:	1f cf       	rjmp	.-450    	; 0x135e <KPD_u8GetPressedKey+0x1e>

		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowPins[Local_u8RowCount], DIO_HIGH);
		if (Local_u8Flag == 1) {break;}
	}

	return Local_u8ReturnedVal;
    1520:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1522:	63 96       	adiw	r28, 0x13	; 19
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

00001534 <LCD_voidInit>:
#include "STD_Types.h"
#include "BIT_Math.h"
#include "DIO.h"
#include "LCD.h"

void LCD_voidInit(void){
    1534:	0f 93       	push	r16
    1536:	1f 93       	push	r17
    1538:	df 93       	push	r29
    153a:	cf 93       	push	r28
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	cc 54       	subi	r28, 0x4C	; 76
    1542:	d0 40       	sbci	r29, 0x00	; 0
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	de bf       	out	0x3e, r29	; 62
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	cd bf       	out	0x3d, r28	; 61
	/* Data port -> output*/
	DIO_voidSetPortDirection(LCD_DATA_PORT, 0XFF);
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	6f ef       	ldi	r22, 0xFF	; 255
    1552:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_voidSetPortDirection>
	/* RS, RW, E  -> output */
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, RS, DIO_OUTPUT);
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	41 e0       	ldi	r20, 0x01	; 1
    155c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, RW, DIO_OUTPUT);
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	61 e0       	ldi	r22, 0x01	; 1
    1564:	41 e0       	ldi	r20, 0x01	; 1
    1566:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, EN, DIO_OUTPUT);
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	62 e0       	ldi	r22, 0x02	; 2
    156e:	41 e0       	ldi	r20, 0x01	; 1
    1570:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinDirection>
    1574:	fe 01       	movw	r30, r28
    1576:	e7 5b       	subi	r30, 0xB7	; 183
    1578:	ff 4f       	sbci	r31, 0xFF	; 255
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	ac e0       	ldi	r26, 0x0C	; 12
    1580:	b2 e4       	ldi	r27, 0x42	; 66
    1582:	80 83       	st	Z, r24
    1584:	91 83       	std	Z+1, r25	; 0x01
    1586:	a2 83       	std	Z+2, r26	; 0x02
    1588:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    158a:	8e 01       	movw	r16, r28
    158c:	0b 5b       	subi	r16, 0xBB	; 187
    158e:	1f 4f       	sbci	r17, 0xFF	; 255
    1590:	fe 01       	movw	r30, r28
    1592:	e7 5b       	subi	r30, 0xB7	; 183
    1594:	ff 4f       	sbci	r31, 0xFF	; 255
    1596:	60 81       	ld	r22, Z
    1598:	71 81       	ldd	r23, Z+1	; 0x01
    159a:	82 81       	ldd	r24, Z+2	; 0x02
    159c:	93 81       	ldd	r25, Z+3	; 0x03
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	4a ef       	ldi	r20, 0xFA	; 250
    15a4:	54 e4       	ldi	r21, 0x44	; 68
    15a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	f8 01       	movw	r30, r16
    15b0:	80 83       	st	Z, r24
    15b2:	91 83       	std	Z+1, r25	; 0x01
    15b4:	a2 83       	std	Z+2, r26	; 0x02
    15b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15b8:	fe 01       	movw	r30, r28
    15ba:	eb 5b       	subi	r30, 0xBB	; 187
    15bc:	ff 4f       	sbci	r31, 0xFF	; 255
    15be:	60 81       	ld	r22, Z
    15c0:	71 81       	ldd	r23, Z+1	; 0x01
    15c2:	82 81       	ldd	r24, Z+2	; 0x02
    15c4:	93 81       	ldd	r25, Z+3	; 0x03
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	40 e8       	ldi	r20, 0x80	; 128
    15cc:	5f e3       	ldi	r21, 0x3F	; 63
    15ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15d2:	88 23       	and	r24, r24
    15d4:	44 f4       	brge	.+16     	; 0x15e6 <LCD_voidInit+0xb2>
		__ticks = 1;
    15d6:	fe 01       	movw	r30, r28
    15d8:	ed 5b       	subi	r30, 0xBD	; 189
    15da:	ff 4f       	sbci	r31, 0xFF	; 255
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	91 83       	std	Z+1, r25	; 0x01
    15e2:	80 83       	st	Z, r24
    15e4:	64 c0       	rjmp	.+200    	; 0x16ae <LCD_voidInit+0x17a>
	else if (__tmp > 65535)
    15e6:	fe 01       	movw	r30, r28
    15e8:	eb 5b       	subi	r30, 0xBB	; 187
    15ea:	ff 4f       	sbci	r31, 0xFF	; 255
    15ec:	60 81       	ld	r22, Z
    15ee:	71 81       	ldd	r23, Z+1	; 0x01
    15f0:	82 81       	ldd	r24, Z+2	; 0x02
    15f2:	93 81       	ldd	r25, Z+3	; 0x03
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	3f ef       	ldi	r19, 0xFF	; 255
    15f8:	4f e7       	ldi	r20, 0x7F	; 127
    15fa:	57 e4       	ldi	r21, 0x47	; 71
    15fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1600:	18 16       	cp	r1, r24
    1602:	0c f0       	brlt	.+2      	; 0x1606 <LCD_voidInit+0xd2>
    1604:	43 c0       	rjmp	.+134    	; 0x168c <LCD_voidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1606:	fe 01       	movw	r30, r28
    1608:	e7 5b       	subi	r30, 0xB7	; 183
    160a:	ff 4f       	sbci	r31, 0xFF	; 255
    160c:	60 81       	ld	r22, Z
    160e:	71 81       	ldd	r23, Z+1	; 0x01
    1610:	82 81       	ldd	r24, Z+2	; 0x02
    1612:	93 81       	ldd	r25, Z+3	; 0x03
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	40 e2       	ldi	r20, 0x20	; 32
    161a:	51 e4       	ldi	r21, 0x41	; 65
    161c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	8e 01       	movw	r16, r28
    1626:	0d 5b       	subi	r16, 0xBD	; 189
    1628:	1f 4f       	sbci	r17, 0xFF	; 255
    162a:	bc 01       	movw	r22, r24
    162c:	cd 01       	movw	r24, r26
    162e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	f8 01       	movw	r30, r16
    1638:	91 83       	std	Z+1, r25	; 0x01
    163a:	80 83       	st	Z, r24
    163c:	1f c0       	rjmp	.+62     	; 0x167c <LCD_voidInit+0x148>
    163e:	fe 01       	movw	r30, r28
    1640:	ef 5b       	subi	r30, 0xBF	; 191
    1642:	ff 4f       	sbci	r31, 0xFF	; 255
    1644:	88 ec       	ldi	r24, 0xC8	; 200
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	91 83       	std	Z+1, r25	; 0x01
    164a:	80 83       	st	Z, r24
    164c:	fe 01       	movw	r30, r28
    164e:	ef 5b       	subi	r30, 0xBF	; 191
    1650:	ff 4f       	sbci	r31, 0xFF	; 255
    1652:	80 81       	ld	r24, Z
    1654:	91 81       	ldd	r25, Z+1	; 0x01
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	f1 f7       	brne	.-4      	; 0x1656 <LCD_voidInit+0x122>
    165a:	fe 01       	movw	r30, r28
    165c:	ef 5b       	subi	r30, 0xBF	; 191
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	91 83       	std	Z+1, r25	; 0x01
    1662:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1664:	de 01       	movw	r26, r28
    1666:	ad 5b       	subi	r26, 0xBD	; 189
    1668:	bf 4f       	sbci	r27, 0xFF	; 255
    166a:	fe 01       	movw	r30, r28
    166c:	ed 5b       	subi	r30, 0xBD	; 189
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	80 81       	ld	r24, Z
    1672:	91 81       	ldd	r25, Z+1	; 0x01
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	11 96       	adiw	r26, 0x01	; 1
    1678:	9c 93       	st	X, r25
    167a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    167c:	fe 01       	movw	r30, r28
    167e:	ed 5b       	subi	r30, 0xBD	; 189
    1680:	ff 4f       	sbci	r31, 0xFF	; 255
    1682:	80 81       	ld	r24, Z
    1684:	91 81       	ldd	r25, Z+1	; 0x01
    1686:	00 97       	sbiw	r24, 0x00	; 0
    1688:	d1 f6       	brne	.-76     	; 0x163e <LCD_voidInit+0x10a>
    168a:	24 c0       	rjmp	.+72     	; 0x16d4 <LCD_voidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    168c:	8e 01       	movw	r16, r28
    168e:	0d 5b       	subi	r16, 0xBD	; 189
    1690:	1f 4f       	sbci	r17, 0xFF	; 255
    1692:	fe 01       	movw	r30, r28
    1694:	eb 5b       	subi	r30, 0xBB	; 187
    1696:	ff 4f       	sbci	r31, 0xFF	; 255
    1698:	60 81       	ld	r22, Z
    169a:	71 81       	ldd	r23, Z+1	; 0x01
    169c:	82 81       	ldd	r24, Z+2	; 0x02
    169e:	93 81       	ldd	r25, Z+3	; 0x03
    16a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	f8 01       	movw	r30, r16
    16aa:	91 83       	std	Z+1, r25	; 0x01
    16ac:	80 83       	st	Z, r24
    16ae:	fe 01       	movw	r30, r28
    16b0:	ed 5b       	subi	r30, 0xBD	; 189
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	80 81       	ld	r24, Z
    16b6:	91 81       	ldd	r25, Z+1	; 0x01
    16b8:	fe 01       	movw	r30, r28
    16ba:	ff 96       	adiw	r30, 0x3f	; 63
    16bc:	91 83       	std	Z+1, r25	; 0x01
    16be:	80 83       	st	Z, r24
    16c0:	fe 01       	movw	r30, r28
    16c2:	ff 96       	adiw	r30, 0x3f	; 63
    16c4:	80 81       	ld	r24, Z
    16c6:	91 81       	ldd	r25, Z+1	; 0x01
    16c8:	01 97       	sbiw	r24, 0x01	; 1
    16ca:	f1 f7       	brne	.-4      	; 0x16c8 <LCD_voidInit+0x194>
    16cc:	fe 01       	movw	r30, r28
    16ce:	ff 96       	adiw	r30, 0x3f	; 63
    16d0:	91 83       	std	Z+1, r25	; 0x01
    16d2:	80 83       	st	Z, r24
	
	_delay_ms(35);
	LCD_voidSendCommand(FUNCTION_SET);
    16d4:	88 e3       	ldi	r24, 0x38	; 56
    16d6:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_voidSendCommand>
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	a8 e4       	ldi	r26, 0x48	; 72
    16e0:	b2 e4       	ldi	r27, 0x42	; 66
    16e2:	8b af       	std	Y+59, r24	; 0x3b
    16e4:	9c af       	std	Y+60, r25	; 0x3c
    16e6:	ad af       	std	Y+61, r26	; 0x3d
    16e8:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    16ea:	6b ad       	ldd	r22, Y+59	; 0x3b
    16ec:	7c ad       	ldd	r23, Y+60	; 0x3c
    16ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    16f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    16f2:	2b ea       	ldi	r18, 0xAB	; 171
    16f4:	3a ea       	ldi	r19, 0xAA	; 170
    16f6:	4a e2       	ldi	r20, 0x2A	; 42
    16f8:	50 e4       	ldi	r21, 0x40	; 64
    16fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	8f ab       	std	Y+55, r24	; 0x37
    1704:	98 af       	std	Y+56, r25	; 0x38
    1706:	a9 af       	std	Y+57, r26	; 0x39
    1708:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    170a:	6f a9       	ldd	r22, Y+55	; 0x37
    170c:	78 ad       	ldd	r23, Y+56	; 0x38
    170e:	89 ad       	ldd	r24, Y+57	; 0x39
    1710:	9a ad       	ldd	r25, Y+58	; 0x3a
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	40 e8       	ldi	r20, 0x80	; 128
    1718:	5f e3       	ldi	r21, 0x3F	; 63
    171a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    171e:	88 23       	and	r24, r24
    1720:	1c f4       	brge	.+6      	; 0x1728 <LCD_voidInit+0x1f4>
		__ticks = 1;
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	8e ab       	std	Y+54, r24	; 0x36
    1726:	91 c0       	rjmp	.+290    	; 0x184a <LCD_voidInit+0x316>
	else if (__tmp > 255)
    1728:	6f a9       	ldd	r22, Y+55	; 0x37
    172a:	78 ad       	ldd	r23, Y+56	; 0x38
    172c:	89 ad       	ldd	r24, Y+57	; 0x39
    172e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	4f e7       	ldi	r20, 0x7F	; 127
    1736:	53 e4       	ldi	r21, 0x43	; 67
    1738:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    173c:	18 16       	cp	r1, r24
    173e:	0c f0       	brlt	.+2      	; 0x1742 <LCD_voidInit+0x20e>
    1740:	7b c0       	rjmp	.+246    	; 0x1838 <LCD_voidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    1742:	6b ad       	ldd	r22, Y+59	; 0x3b
    1744:	7c ad       	ldd	r23, Y+60	; 0x3c
    1746:	8d ad       	ldd	r24, Y+61	; 0x3d
    1748:	9e ad       	ldd	r25, Y+62	; 0x3e
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	4a e7       	ldi	r20, 0x7A	; 122
    1750:	54 e4       	ldi	r21, 0x44	; 68
    1752:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	8a ab       	std	Y+50, r24	; 0x32
    175c:	9b ab       	std	Y+51, r25	; 0x33
    175e:	ac ab       	std	Y+52, r26	; 0x34
    1760:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1762:	6a a9       	ldd	r22, Y+50	; 0x32
    1764:	7b a9       	ldd	r23, Y+51	; 0x33
    1766:	8c a9       	ldd	r24, Y+52	; 0x34
    1768:	9d a9       	ldd	r25, Y+53	; 0x35
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	4a ef       	ldi	r20, 0xFA	; 250
    1770:	54 e4       	ldi	r21, 0x44	; 68
    1772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	8e a7       	std	Y+46, r24	; 0x2e
    177c:	9f a7       	std	Y+47, r25	; 0x2f
    177e:	a8 ab       	std	Y+48, r26	; 0x30
    1780:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1782:	6e a5       	ldd	r22, Y+46	; 0x2e
    1784:	7f a5       	ldd	r23, Y+47	; 0x2f
    1786:	88 a9       	ldd	r24, Y+48	; 0x30
    1788:	99 a9       	ldd	r25, Y+49	; 0x31
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	40 e8       	ldi	r20, 0x80	; 128
    1790:	5f e3       	ldi	r21, 0x3F	; 63
    1792:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1796:	88 23       	and	r24, r24
    1798:	2c f4       	brge	.+10     	; 0x17a4 <LCD_voidInit+0x270>
		__ticks = 1;
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	9d a7       	std	Y+45, r25	; 0x2d
    17a0:	8c a7       	std	Y+44, r24	; 0x2c
    17a2:	3f c0       	rjmp	.+126    	; 0x1822 <LCD_voidInit+0x2ee>
	else if (__tmp > 65535)
    17a4:	6e a5       	ldd	r22, Y+46	; 0x2e
    17a6:	7f a5       	ldd	r23, Y+47	; 0x2f
    17a8:	88 a9       	ldd	r24, Y+48	; 0x30
    17aa:	99 a9       	ldd	r25, Y+49	; 0x31
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	3f ef       	ldi	r19, 0xFF	; 255
    17b0:	4f e7       	ldi	r20, 0x7F	; 127
    17b2:	57 e4       	ldi	r21, 0x47	; 71
    17b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17b8:	18 16       	cp	r1, r24
    17ba:	4c f5       	brge	.+82     	; 0x180e <LCD_voidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17bc:	6a a9       	ldd	r22, Y+50	; 0x32
    17be:	7b a9       	ldd	r23, Y+51	; 0x33
    17c0:	8c a9       	ldd	r24, Y+52	; 0x34
    17c2:	9d a9       	ldd	r25, Y+53	; 0x35
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 e2       	ldi	r20, 0x20	; 32
    17ca:	51 e4       	ldi	r21, 0x41	; 65
    17cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	bc 01       	movw	r22, r24
    17d6:	cd 01       	movw	r24, r26
    17d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	9d a7       	std	Y+45, r25	; 0x2d
    17e2:	8c a7       	std	Y+44, r24	; 0x2c
    17e4:	0f c0       	rjmp	.+30     	; 0x1804 <LCD_voidInit+0x2d0>
    17e6:	88 ec       	ldi	r24, 0xC8	; 200
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	9b a7       	std	Y+43, r25	; 0x2b
    17ec:	8a a7       	std	Y+42, r24	; 0x2a
    17ee:	8a a5       	ldd	r24, Y+42	; 0x2a
    17f0:	9b a5       	ldd	r25, Y+43	; 0x2b
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	f1 f7       	brne	.-4      	; 0x17f2 <LCD_voidInit+0x2be>
    17f6:	9b a7       	std	Y+43, r25	; 0x2b
    17f8:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17fa:	8c a5       	ldd	r24, Y+44	; 0x2c
    17fc:	9d a5       	ldd	r25, Y+45	; 0x2d
    17fe:	01 97       	sbiw	r24, 0x01	; 1
    1800:	9d a7       	std	Y+45, r25	; 0x2d
    1802:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1804:	8c a5       	ldd	r24, Y+44	; 0x2c
    1806:	9d a5       	ldd	r25, Y+45	; 0x2d
    1808:	00 97       	sbiw	r24, 0x00	; 0
    180a:	69 f7       	brne	.-38     	; 0x17e6 <LCD_voidInit+0x2b2>
    180c:	24 c0       	rjmp	.+72     	; 0x1856 <LCD_voidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    180e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1810:	7f a5       	ldd	r23, Y+47	; 0x2f
    1812:	88 a9       	ldd	r24, Y+48	; 0x30
    1814:	99 a9       	ldd	r25, Y+49	; 0x31
    1816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	9d a7       	std	Y+45, r25	; 0x2d
    1820:	8c a7       	std	Y+44, r24	; 0x2c
    1822:	8c a5       	ldd	r24, Y+44	; 0x2c
    1824:	9d a5       	ldd	r25, Y+45	; 0x2d
    1826:	99 a7       	std	Y+41, r25	; 0x29
    1828:	88 a7       	std	Y+40, r24	; 0x28
    182a:	88 a5       	ldd	r24, Y+40	; 0x28
    182c:	99 a5       	ldd	r25, Y+41	; 0x29
    182e:	01 97       	sbiw	r24, 0x01	; 1
    1830:	f1 f7       	brne	.-4      	; 0x182e <LCD_voidInit+0x2fa>
    1832:	99 a7       	std	Y+41, r25	; 0x29
    1834:	88 a7       	std	Y+40, r24	; 0x28
    1836:	0f c0       	rjmp	.+30     	; 0x1856 <LCD_voidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1838:	6f a9       	ldd	r22, Y+55	; 0x37
    183a:	78 ad       	ldd	r23, Y+56	; 0x38
    183c:	89 ad       	ldd	r24, Y+57	; 0x39
    183e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1840:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	8e ab       	std	Y+54, r24	; 0x36
    184a:	8e a9       	ldd	r24, Y+54	; 0x36
    184c:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    184e:	8f a1       	ldd	r24, Y+39	; 0x27
    1850:	8a 95       	dec	r24
    1852:	f1 f7       	brne	.-4      	; 0x1850 <LCD_voidInit+0x31c>
    1854:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);
	LCD_voidSendCommand(DISPLAY_ON_OFF);
    1856:	8f e0       	ldi	r24, 0x0F	; 15
    1858:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_voidSendCommand>
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	a8 e4       	ldi	r26, 0x48	; 72
    1862:	b2 e4       	ldi	r27, 0x42	; 66
    1864:	8b a3       	std	Y+35, r24	; 0x23
    1866:	9c a3       	std	Y+36, r25	; 0x24
    1868:	ad a3       	std	Y+37, r26	; 0x25
    186a:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    186c:	6b a1       	ldd	r22, Y+35	; 0x23
    186e:	7c a1       	ldd	r23, Y+36	; 0x24
    1870:	8d a1       	ldd	r24, Y+37	; 0x25
    1872:	9e a1       	ldd	r25, Y+38	; 0x26
    1874:	2b ea       	ldi	r18, 0xAB	; 171
    1876:	3a ea       	ldi	r19, 0xAA	; 170
    1878:	4a e2       	ldi	r20, 0x2A	; 42
    187a:	50 e4       	ldi	r21, 0x40	; 64
    187c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	8f 8f       	std	Y+31, r24	; 0x1f
    1886:	98 a3       	std	Y+32, r25	; 0x20
    1888:	a9 a3       	std	Y+33, r26	; 0x21
    188a:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    188c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    188e:	78 a1       	ldd	r23, Y+32	; 0x20
    1890:	89 a1       	ldd	r24, Y+33	; 0x21
    1892:	9a a1       	ldd	r25, Y+34	; 0x22
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	40 e8       	ldi	r20, 0x80	; 128
    189a:	5f e3       	ldi	r21, 0x3F	; 63
    189c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18a0:	88 23       	and	r24, r24
    18a2:	1c f4       	brge	.+6      	; 0x18aa <LCD_voidInit+0x376>
		__ticks = 1;
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	8e 8f       	std	Y+30, r24	; 0x1e
    18a8:	91 c0       	rjmp	.+290    	; 0x19cc <LCD_voidInit+0x498>
	else if (__tmp > 255)
    18aa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    18ac:	78 a1       	ldd	r23, Y+32	; 0x20
    18ae:	89 a1       	ldd	r24, Y+33	; 0x21
    18b0:	9a a1       	ldd	r25, Y+34	; 0x22
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	4f e7       	ldi	r20, 0x7F	; 127
    18b8:	53 e4       	ldi	r21, 0x43	; 67
    18ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18be:	18 16       	cp	r1, r24
    18c0:	0c f0       	brlt	.+2      	; 0x18c4 <LCD_voidInit+0x390>
    18c2:	7b c0       	rjmp	.+246    	; 0x19ba <LCD_voidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    18c4:	6b a1       	ldd	r22, Y+35	; 0x23
    18c6:	7c a1       	ldd	r23, Y+36	; 0x24
    18c8:	8d a1       	ldd	r24, Y+37	; 0x25
    18ca:	9e a1       	ldd	r25, Y+38	; 0x26
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	4a e7       	ldi	r20, 0x7A	; 122
    18d2:	54 e4       	ldi	r21, 0x44	; 68
    18d4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	8a 8f       	std	Y+26, r24	; 0x1a
    18de:	9b 8f       	std	Y+27, r25	; 0x1b
    18e0:	ac 8f       	std	Y+28, r26	; 0x1c
    18e2:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    18e6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    18e8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    18ea:	9d 8d       	ldd	r25, Y+29	; 0x1d
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	4a ef       	ldi	r20, 0xFA	; 250
    18f2:	54 e4       	ldi	r21, 0x44	; 68
    18f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f8:	dc 01       	movw	r26, r24
    18fa:	cb 01       	movw	r24, r22
    18fc:	8e 8b       	std	Y+22, r24	; 0x16
    18fe:	9f 8b       	std	Y+23, r25	; 0x17
    1900:	a8 8f       	std	Y+24, r26	; 0x18
    1902:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1904:	6e 89       	ldd	r22, Y+22	; 0x16
    1906:	7f 89       	ldd	r23, Y+23	; 0x17
    1908:	88 8d       	ldd	r24, Y+24	; 0x18
    190a:	99 8d       	ldd	r25, Y+25	; 0x19
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	40 e8       	ldi	r20, 0x80	; 128
    1912:	5f e3       	ldi	r21, 0x3F	; 63
    1914:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1918:	88 23       	and	r24, r24
    191a:	2c f4       	brge	.+10     	; 0x1926 <LCD_voidInit+0x3f2>
		__ticks = 1;
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	9d 8b       	std	Y+21, r25	; 0x15
    1922:	8c 8b       	std	Y+20, r24	; 0x14
    1924:	3f c0       	rjmp	.+126    	; 0x19a4 <LCD_voidInit+0x470>
	else if (__tmp > 65535)
    1926:	6e 89       	ldd	r22, Y+22	; 0x16
    1928:	7f 89       	ldd	r23, Y+23	; 0x17
    192a:	88 8d       	ldd	r24, Y+24	; 0x18
    192c:	99 8d       	ldd	r25, Y+25	; 0x19
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	3f ef       	ldi	r19, 0xFF	; 255
    1932:	4f e7       	ldi	r20, 0x7F	; 127
    1934:	57 e4       	ldi	r21, 0x47	; 71
    1936:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    193a:	18 16       	cp	r1, r24
    193c:	4c f5       	brge	.+82     	; 0x1990 <LCD_voidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    193e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1940:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1942:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1944:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	40 e2       	ldi	r20, 0x20	; 32
    194c:	51 e4       	ldi	r21, 0x41	; 65
    194e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	bc 01       	movw	r22, r24
    1958:	cd 01       	movw	r24, r26
    195a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	9d 8b       	std	Y+21, r25	; 0x15
    1964:	8c 8b       	std	Y+20, r24	; 0x14
    1966:	0f c0       	rjmp	.+30     	; 0x1986 <LCD_voidInit+0x452>
    1968:	88 ec       	ldi	r24, 0xC8	; 200
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	9b 8b       	std	Y+19, r25	; 0x13
    196e:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1970:	8a 89       	ldd	r24, Y+18	; 0x12
    1972:	9b 89       	ldd	r25, Y+19	; 0x13
    1974:	01 97       	sbiw	r24, 0x01	; 1
    1976:	f1 f7       	brne	.-4      	; 0x1974 <LCD_voidInit+0x440>
    1978:	9b 8b       	std	Y+19, r25	; 0x13
    197a:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    197c:	8c 89       	ldd	r24, Y+20	; 0x14
    197e:	9d 89       	ldd	r25, Y+21	; 0x15
    1980:	01 97       	sbiw	r24, 0x01	; 1
    1982:	9d 8b       	std	Y+21, r25	; 0x15
    1984:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1986:	8c 89       	ldd	r24, Y+20	; 0x14
    1988:	9d 89       	ldd	r25, Y+21	; 0x15
    198a:	00 97       	sbiw	r24, 0x00	; 0
    198c:	69 f7       	brne	.-38     	; 0x1968 <LCD_voidInit+0x434>
    198e:	24 c0       	rjmp	.+72     	; 0x19d8 <LCD_voidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1990:	6e 89       	ldd	r22, Y+22	; 0x16
    1992:	7f 89       	ldd	r23, Y+23	; 0x17
    1994:	88 8d       	ldd	r24, Y+24	; 0x18
    1996:	99 8d       	ldd	r25, Y+25	; 0x19
    1998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	9d 8b       	std	Y+21, r25	; 0x15
    19a2:	8c 8b       	std	Y+20, r24	; 0x14
    19a4:	8c 89       	ldd	r24, Y+20	; 0x14
    19a6:	9d 89       	ldd	r25, Y+21	; 0x15
    19a8:	99 8b       	std	Y+17, r25	; 0x11
    19aa:	88 8b       	std	Y+16, r24	; 0x10
    19ac:	88 89       	ldd	r24, Y+16	; 0x10
    19ae:	99 89       	ldd	r25, Y+17	; 0x11
    19b0:	01 97       	sbiw	r24, 0x01	; 1
    19b2:	f1 f7       	brne	.-4      	; 0x19b0 <LCD_voidInit+0x47c>
    19b4:	99 8b       	std	Y+17, r25	; 0x11
    19b6:	88 8b       	std	Y+16, r24	; 0x10
    19b8:	0f c0       	rjmp	.+30     	; 0x19d8 <LCD_voidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19ba:	6f 8d       	ldd	r22, Y+31	; 0x1f
    19bc:	78 a1       	ldd	r23, Y+32	; 0x20
    19be:	89 a1       	ldd	r24, Y+33	; 0x21
    19c0:	9a a1       	ldd	r25, Y+34	; 0x22
    19c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	8e 8f       	std	Y+30, r24	; 0x1e
    19cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19ce:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19d2:	8a 95       	dec	r24
    19d4:	f1 f7       	brne	.-4      	; 0x19d2 <LCD_voidInit+0x49e>
    19d6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);
	LCD_voidSendCommand(CLEAR);
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_voidSendCommand>
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	a0 e0       	ldi	r26, 0x00	; 0
    19e4:	b0 e4       	ldi	r27, 0x40	; 64
    19e6:	8b 87       	std	Y+11, r24	; 0x0b
    19e8:	9c 87       	std	Y+12, r25	; 0x0c
    19ea:	ad 87       	std	Y+13, r26	; 0x0d
    19ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    19f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	4a ef       	ldi	r20, 0xFA	; 250
    19fc:	54 e4       	ldi	r21, 0x44	; 68
    19fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	8f 83       	std	Y+7, r24	; 0x07
    1a08:	98 87       	std	Y+8, r25	; 0x08
    1a0a:	a9 87       	std	Y+9, r26	; 0x09
    1a0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a10:	78 85       	ldd	r23, Y+8	; 0x08
    1a12:	89 85       	ldd	r24, Y+9	; 0x09
    1a14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	40 e8       	ldi	r20, 0x80	; 128
    1a1c:	5f e3       	ldi	r21, 0x3F	; 63
    1a1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a22:	88 23       	and	r24, r24
    1a24:	2c f4       	brge	.+10     	; 0x1a30 <LCD_voidInit+0x4fc>
		__ticks = 1;
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	9e 83       	std	Y+6, r25	; 0x06
    1a2c:	8d 83       	std	Y+5, r24	; 0x05
    1a2e:	3f c0       	rjmp	.+126    	; 0x1aae <LCD_voidInit+0x57a>
	else if (__tmp > 65535)
    1a30:	6f 81       	ldd	r22, Y+7	; 0x07
    1a32:	78 85       	ldd	r23, Y+8	; 0x08
    1a34:	89 85       	ldd	r24, Y+9	; 0x09
    1a36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	3f ef       	ldi	r19, 0xFF	; 255
    1a3c:	4f e7       	ldi	r20, 0x7F	; 127
    1a3e:	57 e4       	ldi	r21, 0x47	; 71
    1a40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a44:	18 16       	cp	r1, r24
    1a46:	4c f5       	brge	.+82     	; 0x1a9a <LCD_voidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	40 e2       	ldi	r20, 0x20	; 32
    1a56:	51 e4       	ldi	r21, 0x41	; 65
    1a58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	bc 01       	movw	r22, r24
    1a62:	cd 01       	movw	r24, r26
    1a64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	9e 83       	std	Y+6, r25	; 0x06
    1a6e:	8d 83       	std	Y+5, r24	; 0x05
    1a70:	0f c0       	rjmp	.+30     	; 0x1a90 <LCD_voidInit+0x55c>
    1a72:	88 ec       	ldi	r24, 0xC8	; 200
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	9c 83       	std	Y+4, r25	; 0x04
    1a78:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	f1 f7       	brne	.-4      	; 0x1a7e <LCD_voidInit+0x54a>
    1a82:	9c 83       	std	Y+4, r25	; 0x04
    1a84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a86:	8d 81       	ldd	r24, Y+5	; 0x05
    1a88:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8a:	01 97       	sbiw	r24, 0x01	; 1
    1a8c:	9e 83       	std	Y+6, r25	; 0x06
    1a8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a90:	8d 81       	ldd	r24, Y+5	; 0x05
    1a92:	9e 81       	ldd	r25, Y+6	; 0x06
    1a94:	00 97       	sbiw	r24, 0x00	; 0
    1a96:	69 f7       	brne	.-38     	; 0x1a72 <LCD_voidInit+0x53e>
    1a98:	14 c0       	rjmp	.+40     	; 0x1ac2 <LCD_voidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9c:	78 85       	ldd	r23, Y+8	; 0x08
    1a9e:	89 85       	ldd	r24, Y+9	; 0x09
    1aa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	9e 83       	std	Y+6, r25	; 0x06
    1aac:	8d 83       	std	Y+5, r24	; 0x05
    1aae:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab2:	9a 83       	std	Y+2, r25	; 0x02
    1ab4:	89 83       	std	Y+1, r24	; 0x01
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
    1ab8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	f1 f7       	brne	.-4      	; 0x1aba <LCD_voidInit+0x586>
    1abe:	9a 83       	std	Y+2, r25	; 0x02
    1ac0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1ac2:	c4 5b       	subi	r28, 0xB4	; 180
    1ac4:	df 4f       	sbci	r29, 0xFF	; 255
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	de bf       	out	0x3e, r29	; 62
    1acc:	0f be       	out	0x3f, r0	; 63
    1ace:	cd bf       	out	0x3d, r28	; 61
    1ad0:	cf 91       	pop	r28
    1ad2:	df 91       	pop	r29
    1ad4:	1f 91       	pop	r17
    1ad6:	0f 91       	pop	r16
    1ad8:	08 95       	ret

00001ada <LCD_voidSendCommand>:


void LCD_voidSendCommand(u8 Copy_u8Command){
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	cd b7       	in	r28, 0x3d	; 61
    1ae0:	de b7       	in	r29, 0x3e	; 62
    1ae2:	69 97       	sbiw	r28, 0x19	; 25
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	de bf       	out	0x3e, r29	; 62
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	cd bf       	out	0x3d, r28	; 61
    1aee:	89 8f       	std	Y+25, r24	; 0x19
	
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RS, DIO_LOW);
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	60 e0       	ldi	r22, 0x00	; 0
    1af4:	40 e0       	ldi	r20, 0x00	; 0
    1af6:	0e 94 53 07 	call	0xea6	; 0xea6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RW, DIO_LOW);
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	61 e0       	ldi	r22, 0x01	; 1
    1afe:	40 e0       	ldi	r20, 0x00	; 0
    1b00:	0e 94 53 07 	call	0xea6	; 0xea6 <DIO_voidSetPinValue>
	DIO_voidSetPortValue(LCD_DATA_PORT, Copy_u8Command);
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	69 8d       	ldd	r22, Y+25	; 0x19
    1b08:	0e 94 21 09 	call	0x1242	; 0x1242 <DIO_voidSetPortValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_HIGH);
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	62 e0       	ldi	r22, 0x02	; 2
    1b10:	41 e0       	ldi	r20, 0x01	; 1
    1b12:	0e 94 53 07 	call	0xea6	; 0xea6 <DIO_voidSetPinValue>
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	a0 e8       	ldi	r26, 0x80	; 128
    1b1c:	bf e3       	ldi	r27, 0x3F	; 63
    1b1e:	8d 8b       	std	Y+21, r24	; 0x15
    1b20:	9e 8b       	std	Y+22, r25	; 0x16
    1b22:	af 8b       	std	Y+23, r26	; 0x17
    1b24:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b26:	6d 89       	ldd	r22, Y+21	; 0x15
    1b28:	7e 89       	ldd	r23, Y+22	; 0x16
    1b2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b2e:	2b ea       	ldi	r18, 0xAB	; 171
    1b30:	3a ea       	ldi	r19, 0xAA	; 170
    1b32:	4a e2       	ldi	r20, 0x2A	; 42
    1b34:	50 e4       	ldi	r21, 0x40	; 64
    1b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	89 8b       	std	Y+17, r24	; 0x11
    1b40:	9a 8b       	std	Y+18, r25	; 0x12
    1b42:	ab 8b       	std	Y+19, r26	; 0x13
    1b44:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1b46:	69 89       	ldd	r22, Y+17	; 0x11
    1b48:	7a 89       	ldd	r23, Y+18	; 0x12
    1b4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	40 e8       	ldi	r20, 0x80	; 128
    1b54:	5f e3       	ldi	r21, 0x3F	; 63
    1b56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b5a:	88 23       	and	r24, r24
    1b5c:	1c f4       	brge	.+6      	; 0x1b64 <LCD_voidSendCommand+0x8a>
		__ticks = 1;
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	88 8b       	std	Y+16, r24	; 0x10
    1b62:	91 c0       	rjmp	.+290    	; 0x1c86 <LCD_voidSendCommand+0x1ac>
	else if (__tmp > 255)
    1b64:	69 89       	ldd	r22, Y+17	; 0x11
    1b66:	7a 89       	ldd	r23, Y+18	; 0x12
    1b68:	8b 89       	ldd	r24, Y+19	; 0x13
    1b6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	4f e7       	ldi	r20, 0x7F	; 127
    1b72:	53 e4       	ldi	r21, 0x43	; 67
    1b74:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b78:	18 16       	cp	r1, r24
    1b7a:	0c f0       	brlt	.+2      	; 0x1b7e <LCD_voidSendCommand+0xa4>
    1b7c:	7b c0       	rjmp	.+246    	; 0x1c74 <LCD_voidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1b7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b80:	7e 89       	ldd	r23, Y+22	; 0x16
    1b82:	8f 89       	ldd	r24, Y+23	; 0x17
    1b84:	98 8d       	ldd	r25, Y+24	; 0x18
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	4a e7       	ldi	r20, 0x7A	; 122
    1b8c:	54 e4       	ldi	r21, 0x44	; 68
    1b8e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	8c 87       	std	Y+12, r24	; 0x0c
    1b98:	9d 87       	std	Y+13, r25	; 0x0d
    1b9a:	ae 87       	std	Y+14, r26	; 0x0e
    1b9c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b9e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ba0:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ba2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ba4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	4a ef       	ldi	r20, 0xFA	; 250
    1bac:	54 e4       	ldi	r21, 0x44	; 68
    1bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	88 87       	std	Y+8, r24	; 0x08
    1bb8:	99 87       	std	Y+9, r25	; 0x09
    1bba:	aa 87       	std	Y+10, r26	; 0x0a
    1bbc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1bbe:	68 85       	ldd	r22, Y+8	; 0x08
    1bc0:	79 85       	ldd	r23, Y+9	; 0x09
    1bc2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bc4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	40 e8       	ldi	r20, 0x80	; 128
    1bcc:	5f e3       	ldi	r21, 0x3F	; 63
    1bce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bd2:	88 23       	and	r24, r24
    1bd4:	2c f4       	brge	.+10     	; 0x1be0 <LCD_voidSendCommand+0x106>
		__ticks = 1;
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	9f 83       	std	Y+7, r25	; 0x07
    1bdc:	8e 83       	std	Y+6, r24	; 0x06
    1bde:	3f c0       	rjmp	.+126    	; 0x1c5e <LCD_voidSendCommand+0x184>
	else if (__tmp > 65535)
    1be0:	68 85       	ldd	r22, Y+8	; 0x08
    1be2:	79 85       	ldd	r23, Y+9	; 0x09
    1be4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1be6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	3f ef       	ldi	r19, 0xFF	; 255
    1bec:	4f e7       	ldi	r20, 0x7F	; 127
    1bee:	57 e4       	ldi	r21, 0x47	; 71
    1bf0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bf4:	18 16       	cp	r1, r24
    1bf6:	4c f5       	brge	.+82     	; 0x1c4a <LCD_voidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf8:	6c 85       	ldd	r22, Y+12	; 0x0c
    1bfa:	7d 85       	ldd	r23, Y+13	; 0x0d
    1bfc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bfe:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	40 e2       	ldi	r20, 0x20	; 32
    1c06:	51 e4       	ldi	r21, 0x41	; 65
    1c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	bc 01       	movw	r22, r24
    1c12:	cd 01       	movw	r24, r26
    1c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	9f 83       	std	Y+7, r25	; 0x07
    1c1e:	8e 83       	std	Y+6, r24	; 0x06
    1c20:	0f c0       	rjmp	.+30     	; 0x1c40 <LCD_voidSendCommand+0x166>
    1c22:	88 ec       	ldi	r24, 0xC8	; 200
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	9d 83       	std	Y+5, r25	; 0x05
    1c28:	8c 83       	std	Y+4, r24	; 0x04
    1c2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	f1 f7       	brne	.-4      	; 0x1c2e <LCD_voidSendCommand+0x154>
    1c32:	9d 83       	std	Y+5, r25	; 0x05
    1c34:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c36:	8e 81       	ldd	r24, Y+6	; 0x06
    1c38:	9f 81       	ldd	r25, Y+7	; 0x07
    1c3a:	01 97       	sbiw	r24, 0x01	; 1
    1c3c:	9f 83       	std	Y+7, r25	; 0x07
    1c3e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c40:	8e 81       	ldd	r24, Y+6	; 0x06
    1c42:	9f 81       	ldd	r25, Y+7	; 0x07
    1c44:	00 97       	sbiw	r24, 0x00	; 0
    1c46:	69 f7       	brne	.-38     	; 0x1c22 <LCD_voidSendCommand+0x148>
    1c48:	24 c0       	rjmp	.+72     	; 0x1c92 <LCD_voidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c4a:	68 85       	ldd	r22, Y+8	; 0x08
    1c4c:	79 85       	ldd	r23, Y+9	; 0x09
    1c4e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c50:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	9f 83       	std	Y+7, r25	; 0x07
    1c5c:	8e 83       	std	Y+6, r24	; 0x06
    1c5e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c60:	9f 81       	ldd	r25, Y+7	; 0x07
    1c62:	9b 83       	std	Y+3, r25	; 0x03
    1c64:	8a 83       	std	Y+2, r24	; 0x02
    1c66:	8a 81       	ldd	r24, Y+2	; 0x02
    1c68:	9b 81       	ldd	r25, Y+3	; 0x03
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	f1 f7       	brne	.-4      	; 0x1c6a <LCD_voidSendCommand+0x190>
    1c6e:	9b 83       	std	Y+3, r25	; 0x03
    1c70:	8a 83       	std	Y+2, r24	; 0x02
    1c72:	0f c0       	rjmp	.+30     	; 0x1c92 <LCD_voidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c74:	69 89       	ldd	r22, Y+17	; 0x11
    1c76:	7a 89       	ldd	r23, Y+18	; 0x12
    1c78:	8b 89       	ldd	r24, Y+19	; 0x13
    1c7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	88 8b       	std	Y+16, r24	; 0x10
    1c86:	88 89       	ldd	r24, Y+16	; 0x10
    1c88:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	8a 95       	dec	r24
    1c8e:	f1 f7       	brne	.-4      	; 0x1c8c <LCD_voidSendCommand+0x1b2>
    1c90:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_LOW);	
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	62 e0       	ldi	r22, 0x02	; 2
    1c96:	40 e0       	ldi	r20, 0x00	; 0
    1c98:	0e 94 53 07 	call	0xea6	; 0xea6 <DIO_voidSetPinValue>
}
    1c9c:	69 96       	adiw	r28, 0x19	; 25
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	f8 94       	cli
    1ca2:	de bf       	out	0x3e, r29	; 62
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	cd bf       	out	0x3d, r28	; 61
    1ca8:	cf 91       	pop	r28
    1caa:	df 91       	pop	r29
    1cac:	08 95       	ret

00001cae <LCD_voidSendChar>:


void LCD_voidSendChar(u8 Copy_u8Char){
    1cae:	df 93       	push	r29
    1cb0:	cf 93       	push	r28
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
    1cb6:	69 97       	sbiw	r28, 0x19	; 25
    1cb8:	0f b6       	in	r0, 0x3f	; 63
    1cba:	f8 94       	cli
    1cbc:	de bf       	out	0x3e, r29	; 62
    1cbe:	0f be       	out	0x3f, r0	; 63
    1cc0:	cd bf       	out	0x3d, r28	; 61
    1cc2:	89 8f       	std	Y+25, r24	; 0x19
	
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RS, DIO_HIGH);
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	60 e0       	ldi	r22, 0x00	; 0
    1cc8:	41 e0       	ldi	r20, 0x01	; 1
    1cca:	0e 94 53 07 	call	0xea6	; 0xea6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RW, DIO_LOW);
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	61 e0       	ldi	r22, 0x01	; 1
    1cd2:	40 e0       	ldi	r20, 0x00	; 0
    1cd4:	0e 94 53 07 	call	0xea6	; 0xea6 <DIO_voidSetPinValue>
	DIO_voidSetPortValue(LCD_DATA_PORT, Copy_u8Char);
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	69 8d       	ldd	r22, Y+25	; 0x19
    1cdc:	0e 94 21 09 	call	0x1242	; 0x1242 <DIO_voidSetPortValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_HIGH);
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	62 e0       	ldi	r22, 0x02	; 2
    1ce4:	41 e0       	ldi	r20, 0x01	; 1
    1ce6:	0e 94 53 07 	call	0xea6	; 0xea6 <DIO_voidSetPinValue>
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	a0 e8       	ldi	r26, 0x80	; 128
    1cf0:	bf e3       	ldi	r27, 0x3F	; 63
    1cf2:	8d 8b       	std	Y+21, r24	; 0x15
    1cf4:	9e 8b       	std	Y+22, r25	; 0x16
    1cf6:	af 8b       	std	Y+23, r26	; 0x17
    1cf8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cfa:	6d 89       	ldd	r22, Y+21	; 0x15
    1cfc:	7e 89       	ldd	r23, Y+22	; 0x16
    1cfe:	8f 89       	ldd	r24, Y+23	; 0x17
    1d00:	98 8d       	ldd	r25, Y+24	; 0x18
    1d02:	2b ea       	ldi	r18, 0xAB	; 171
    1d04:	3a ea       	ldi	r19, 0xAA	; 170
    1d06:	4a e2       	ldi	r20, 0x2A	; 42
    1d08:	50 e4       	ldi	r21, 0x40	; 64
    1d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	89 8b       	std	Y+17, r24	; 0x11
    1d14:	9a 8b       	std	Y+18, r25	; 0x12
    1d16:	ab 8b       	std	Y+19, r26	; 0x13
    1d18:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1d1a:	69 89       	ldd	r22, Y+17	; 0x11
    1d1c:	7a 89       	ldd	r23, Y+18	; 0x12
    1d1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d20:	9c 89       	ldd	r25, Y+20	; 0x14
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	40 e8       	ldi	r20, 0x80	; 128
    1d28:	5f e3       	ldi	r21, 0x3F	; 63
    1d2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d2e:	88 23       	and	r24, r24
    1d30:	1c f4       	brge	.+6      	; 0x1d38 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	88 8b       	std	Y+16, r24	; 0x10
    1d36:	91 c0       	rjmp	.+290    	; 0x1e5a <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    1d38:	69 89       	ldd	r22, Y+17	; 0x11
    1d3a:	7a 89       	ldd	r23, Y+18	; 0x12
    1d3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	4f e7       	ldi	r20, 0x7F	; 127
    1d46:	53 e4       	ldi	r21, 0x43	; 67
    1d48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d4c:	18 16       	cp	r1, r24
    1d4e:	0c f0       	brlt	.+2      	; 0x1d52 <LCD_voidSendChar+0xa4>
    1d50:	7b c0       	rjmp	.+246    	; 0x1e48 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1d52:	6d 89       	ldd	r22, Y+21	; 0x15
    1d54:	7e 89       	ldd	r23, Y+22	; 0x16
    1d56:	8f 89       	ldd	r24, Y+23	; 0x17
    1d58:	98 8d       	ldd	r25, Y+24	; 0x18
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	4a e7       	ldi	r20, 0x7A	; 122
    1d60:	54 e4       	ldi	r21, 0x44	; 68
    1d62:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	8c 87       	std	Y+12, r24	; 0x0c
    1d6c:	9d 87       	std	Y+13, r25	; 0x0d
    1d6e:	ae 87       	std	Y+14, r26	; 0x0e
    1d70:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d72:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d74:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d76:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d78:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	4a ef       	ldi	r20, 0xFA	; 250
    1d80:	54 e4       	ldi	r21, 0x44	; 68
    1d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	88 87       	std	Y+8, r24	; 0x08
    1d8c:	99 87       	std	Y+9, r25	; 0x09
    1d8e:	aa 87       	std	Y+10, r26	; 0x0a
    1d90:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1d92:	68 85       	ldd	r22, Y+8	; 0x08
    1d94:	79 85       	ldd	r23, Y+9	; 0x09
    1d96:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d98:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	40 e8       	ldi	r20, 0x80	; 128
    1da0:	5f e3       	ldi	r21, 0x3F	; 63
    1da2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1da6:	88 23       	and	r24, r24
    1da8:	2c f4       	brge	.+10     	; 0x1db4 <LCD_voidSendChar+0x106>
		__ticks = 1;
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	9f 83       	std	Y+7, r25	; 0x07
    1db0:	8e 83       	std	Y+6, r24	; 0x06
    1db2:	3f c0       	rjmp	.+126    	; 0x1e32 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    1db4:	68 85       	ldd	r22, Y+8	; 0x08
    1db6:	79 85       	ldd	r23, Y+9	; 0x09
    1db8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dba:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	3f ef       	ldi	r19, 0xFF	; 255
    1dc0:	4f e7       	ldi	r20, 0x7F	; 127
    1dc2:	57 e4       	ldi	r21, 0x47	; 71
    1dc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dc8:	18 16       	cp	r1, r24
    1dca:	4c f5       	brge	.+82     	; 0x1e1e <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dcc:	6c 85       	ldd	r22, Y+12	; 0x0c
    1dce:	7d 85       	ldd	r23, Y+13	; 0x0d
    1dd0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dd2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e2       	ldi	r20, 0x20	; 32
    1dda:	51 e4       	ldi	r21, 0x41	; 65
    1ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	bc 01       	movw	r22, r24
    1de6:	cd 01       	movw	r24, r26
    1de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	9f 83       	std	Y+7, r25	; 0x07
    1df2:	8e 83       	std	Y+6, r24	; 0x06
    1df4:	0f c0       	rjmp	.+30     	; 0x1e14 <LCD_voidSendChar+0x166>
    1df6:	88 ec       	ldi	r24, 0xC8	; 200
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	9d 83       	std	Y+5, r25	; 0x05
    1dfc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1e00:	9d 81       	ldd	r25, Y+5	; 0x05
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	f1 f7       	brne	.-4      	; 0x1e02 <LCD_voidSendChar+0x154>
    1e06:	9d 83       	std	Y+5, r25	; 0x05
    1e08:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e0c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	9f 83       	std	Y+7, r25	; 0x07
    1e12:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e14:	8e 81       	ldd	r24, Y+6	; 0x06
    1e16:	9f 81       	ldd	r25, Y+7	; 0x07
    1e18:	00 97       	sbiw	r24, 0x00	; 0
    1e1a:	69 f7       	brne	.-38     	; 0x1df6 <LCD_voidSendChar+0x148>
    1e1c:	24 c0       	rjmp	.+72     	; 0x1e66 <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1e:	68 85       	ldd	r22, Y+8	; 0x08
    1e20:	79 85       	ldd	r23, Y+9	; 0x09
    1e22:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e24:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	9f 83       	std	Y+7, r25	; 0x07
    1e30:	8e 83       	std	Y+6, r24	; 0x06
    1e32:	8e 81       	ldd	r24, Y+6	; 0x06
    1e34:	9f 81       	ldd	r25, Y+7	; 0x07
    1e36:	9b 83       	std	Y+3, r25	; 0x03
    1e38:	8a 83       	std	Y+2, r24	; 0x02
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <LCD_voidSendChar+0x190>
    1e42:	9b 83       	std	Y+3, r25	; 0x03
    1e44:	8a 83       	std	Y+2, r24	; 0x02
    1e46:	0f c0       	rjmp	.+30     	; 0x1e66 <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e48:	69 89       	ldd	r22, Y+17	; 0x11
    1e4a:	7a 89       	ldd	r23, Y+18	; 0x12
    1e4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	88 8b       	std	Y+16, r24	; 0x10
    1e5a:	88 89       	ldd	r24, Y+16	; 0x10
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	8a 95       	dec	r24
    1e62:	f1 f7       	brne	.-4      	; 0x1e60 <LCD_voidSendChar+0x1b2>
    1e64:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_LOW);
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	62 e0       	ldi	r22, 0x02	; 2
    1e6a:	40 e0       	ldi	r20, 0x00	; 0
    1e6c:	0e 94 53 07 	call	0xea6	; 0xea6 <DIO_voidSetPinValue>
	
}
    1e70:	69 96       	adiw	r28, 0x19	; 25
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	de bf       	out	0x3e, r29	; 62
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	cd bf       	out	0x3d, r28	; 61
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	08 95       	ret

00001e82 <LCD_voidSendString>:

void LCD_voidSendString	(u8 *Copy_u8String){
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	00 d0       	rcall	.+0      	; 0x1e88 <LCD_voidSendString+0x6>
    1e88:	0f 92       	push	r0
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
    1e8e:	9b 83       	std	Y+3, r25	; 0x03
    1e90:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_U8Counter ;
	for (Local_U8Counter = 0 ; Copy_u8String[Local_U8Counter] != '\0' ; Local_U8Counter++){
    1e92:	19 82       	std	Y+1, r1	; 0x01
    1e94:	0e c0       	rjmp	.+28     	; 0x1eb2 <LCD_voidSendString+0x30>
		LCD_voidSendChar(Copy_u8String[Local_U8Counter]);}
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
    1e98:	28 2f       	mov	r18, r24
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	e2 0f       	add	r30, r18
    1ea4:	f3 1f       	adc	r31, r19
    1ea6:	80 81       	ld	r24, Z
    1ea8:	0e 94 57 0e 	call	0x1cae	; 0x1cae <LCD_voidSendChar>
}

void LCD_voidSendString	(u8 *Copy_u8String){

	u8 Local_U8Counter ;
	for (Local_U8Counter = 0 ; Copy_u8String[Local_U8Counter] != '\0' ; Local_U8Counter++){
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	8f 5f       	subi	r24, 0xFF	; 255
    1eb0:	89 83       	std	Y+1, r24	; 0x01
    1eb2:	89 81       	ldd	r24, Y+1	; 0x01
    1eb4:	28 2f       	mov	r18, r24
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	9b 81       	ldd	r25, Y+3	; 0x03
    1ebc:	fc 01       	movw	r30, r24
    1ebe:	e2 0f       	add	r30, r18
    1ec0:	f3 1f       	adc	r31, r19
    1ec2:	80 81       	ld	r24, Z
    1ec4:	88 23       	and	r24, r24
    1ec6:	39 f7       	brne	.-50     	; 0x1e96 <LCD_voidSendString+0x14>
		LCD_voidSendChar(Copy_u8String[Local_U8Counter]);}
	
	
}
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <LCD_voidSetLocation>:

void LCD_voidSetLocation(u8 Copy_u8LineNum, u8 Copy_u8CharNum){
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	00 d0       	rcall	.+0      	; 0x1eda <LCD_voidSetLocation+0x6>
    1eda:	00 d0       	rcall	.+0      	; 0x1edc <LCD_voidSetLocation+0x8>
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    1ee0:	89 83       	std	Y+1, r24	; 0x01
    1ee2:	6a 83       	std	Y+2, r22	; 0x02
	
	switch(Copy_u8LineNum)
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	28 2f       	mov	r18, r24
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	3c 83       	std	Y+4, r19	; 0x04
    1eec:	2b 83       	std	Y+3, r18	; 0x03
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef2:	81 30       	cpi	r24, 0x01	; 1
    1ef4:	91 05       	cpc	r25, r1
    1ef6:	31 f0       	breq	.+12     	; 0x1f04 <LCD_voidSetLocation+0x30>
    1ef8:	2b 81       	ldd	r18, Y+3	; 0x03
    1efa:	3c 81       	ldd	r19, Y+4	; 0x04
    1efc:	22 30       	cpi	r18, 0x02	; 2
    1efe:	31 05       	cpc	r19, r1
    1f00:	31 f0       	breq	.+12     	; 0x1f0e <LCD_voidSetLocation+0x3a>
    1f02:	09 c0       	rjmp	.+18     	; 0x1f16 <LCD_voidSetLocation+0x42>
	{
	case LCD_LINE1 : LCD_voidSendCommand(0x80 + Copy_u8CharNum); break;
    1f04:	8a 81       	ldd	r24, Y+2	; 0x02
    1f06:	80 58       	subi	r24, 0x80	; 128
    1f08:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_voidSendCommand>
    1f0c:	04 c0       	rjmp	.+8      	; 0x1f16 <LCD_voidSetLocation+0x42>

	case LCD_LINE2 : LCD_voidSendCommand(0xC0 + Copy_u8CharNum); break;
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f10:	80 54       	subi	r24, 0x40	; 64
    1f12:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_voidSendCommand>

	}
	
}
    1f16:	0f 90       	pop	r0
    1f18:	0f 90       	pop	r0
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
    1f1e:	cf 91       	pop	r28
    1f20:	df 91       	pop	r29
    1f22:	08 95       	ret

00001f24 <LCD_voidSendNumber>:

void LCD_voidSendNumber	(u32 Copy_u32Number){
    1f24:	0f 93       	push	r16
    1f26:	1f 93       	push	r17
    1f28:	df 93       	push	r29
    1f2a:	cf 93       	push	r28
    1f2c:	cd b7       	in	r28, 0x3d	; 61
    1f2e:	de b7       	in	r29, 0x3e	; 62
    1f30:	60 97       	sbiw	r28, 0x10	; 16
    1f32:	0f b6       	in	r0, 0x3f	; 63
    1f34:	f8 94       	cli
    1f36:	de bf       	out	0x3e, r29	; 62
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	cd bf       	out	0x3d, r28	; 61
    1f3c:	6d 87       	std	Y+13, r22	; 0x0d
    1f3e:	7e 87       	std	Y+14, r23	; 0x0e
    1f40:	8f 87       	std	Y+15, r24	; 0x0f
    1f42:	98 8b       	std	Y+16, r25	; 0x10
	u8 Local_u8ASingleNum[11], Local_u8Count = 9;
    1f44:	89 e0       	ldi	r24, 0x09	; 9
    1f46:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u32Number == 0) { LCD_voidSendChar('0');}
    1f48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f4c:	af 85       	ldd	r26, Y+15	; 0x0f
    1f4e:	b8 89       	ldd	r27, Y+16	; 0x10
    1f50:	00 97       	sbiw	r24, 0x00	; 0
    1f52:	a1 05       	cpc	r26, r1
    1f54:	b1 05       	cpc	r27, r1
    1f56:	21 f4       	brne	.+8      	; 0x1f60 <LCD_voidSendNumber+0x3c>
    1f58:	80 e3       	ldi	r24, 0x30	; 48
    1f5a:	0e 94 57 0e 	call	0x1cae	; 0x1cae <LCD_voidSendChar>
    1f5e:	44 c0       	rjmp	.+136    	; 0x1fe8 <LCD_voidSendNumber+0xc4>
	else{
		Local_u8ASingleNum[10] = '\0' ;
    1f60:	1c 86       	std	Y+12, r1	; 0x0c
    1f62:	2e c0       	rjmp	.+92     	; 0x1fc0 <LCD_voidSendNumber+0x9c>
		while (Copy_u32Number != 0)
		{
			Local_u8ASingleNum[Local_u8Count] = ((Copy_u32Number % 10) + '0') ;
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	08 2f       	mov	r16, r24
    1f68:	10 e0       	ldi	r17, 0x00	; 0
    1f6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f6e:	af 85       	ldd	r26, Y+15	; 0x0f
    1f70:	b8 89       	ldd	r27, Y+16	; 0x10
    1f72:	2a e0       	ldi	r18, 0x0A	; 10
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	40 e0       	ldi	r20, 0x00	; 0
    1f78:	50 e0       	ldi	r21, 0x00	; 0
    1f7a:	bc 01       	movw	r22, r24
    1f7c:	cd 01       	movw	r24, r26
    1f7e:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <__udivmodsi4>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	28 2f       	mov	r18, r24
    1f88:	20 5d       	subi	r18, 0xD0	; 208
    1f8a:	ce 01       	movw	r24, r28
    1f8c:	02 96       	adiw	r24, 0x02	; 2
    1f8e:	fc 01       	movw	r30, r24
    1f90:	e0 0f       	add	r30, r16
    1f92:	f1 1f       	adc	r31, r17
    1f94:	20 83       	st	Z, r18
			Copy_u32Number /= 10 ;
    1f96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f9a:	af 85       	ldd	r26, Y+15	; 0x0f
    1f9c:	b8 89       	ldd	r27, Y+16	; 0x10
    1f9e:	2a e0       	ldi	r18, 0x0A	; 10
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	40 e0       	ldi	r20, 0x00	; 0
    1fa4:	50 e0       	ldi	r21, 0x00	; 0
    1fa6:	bc 01       	movw	r22, r24
    1fa8:	cd 01       	movw	r24, r26
    1faa:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <__udivmodsi4>
    1fae:	da 01       	movw	r26, r20
    1fb0:	c9 01       	movw	r24, r18
    1fb2:	8d 87       	std	Y+13, r24	; 0x0d
    1fb4:	9e 87       	std	Y+14, r25	; 0x0e
    1fb6:	af 87       	std	Y+15, r26	; 0x0f
    1fb8:	b8 8b       	std	Y+16, r27	; 0x10
			Local_u8Count--;
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	81 50       	subi	r24, 0x01	; 1
    1fbe:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8ASingleNum[11], Local_u8Count = 9;
	
	if (Copy_u32Number == 0) { LCD_voidSendChar('0');}
	else{
		Local_u8ASingleNum[10] = '\0' ;
		while (Copy_u32Number != 0)
    1fc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc4:	af 85       	ldd	r26, Y+15	; 0x0f
    1fc6:	b8 89       	ldd	r27, Y+16	; 0x10
    1fc8:	00 97       	sbiw	r24, 0x00	; 0
    1fca:	a1 05       	cpc	r26, r1
    1fcc:	b1 05       	cpc	r27, r1
    1fce:	51 f6       	brne	.-108    	; 0x1f64 <LCD_voidSendNumber+0x40>
			Local_u8ASingleNum[Local_u8Count] = ((Copy_u32Number % 10) + '0') ;
			Copy_u32Number /= 10 ;
			Local_u8Count--;
		}
		/* send address of the first number in my array till the '\0' */
		LCD_voidSendString(Local_u8ASingleNum + Local_u8Count + 1);
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	88 2f       	mov	r24, r24
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	9c 01       	movw	r18, r24
    1fd8:	2f 5f       	subi	r18, 0xFF	; 255
    1fda:	3f 4f       	sbci	r19, 0xFF	; 255
    1fdc:	ce 01       	movw	r24, r28
    1fde:	02 96       	adiw	r24, 0x02	; 2
    1fe0:	82 0f       	add	r24, r18
    1fe2:	93 1f       	adc	r25, r19
    1fe4:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <LCD_voidSendString>
	}
}
    1fe8:	60 96       	adiw	r28, 0x10	; 16
    1fea:	0f b6       	in	r0, 0x3f	; 63
    1fec:	f8 94       	cli
    1fee:	de bf       	out	0x3e, r29	; 62
    1ff0:	0f be       	out	0x3f, r0	; 63
    1ff2:	cd bf       	out	0x3d, r28	; 61
    1ff4:	cf 91       	pop	r28
    1ff6:	df 91       	pop	r29
    1ff8:	1f 91       	pop	r17
    1ffa:	0f 91       	pop	r16
    1ffc:	08 95       	ret

00001ffe <LCD_voidDrawSpecialChar>:


void LCD_voidDrawSpecialChar(u8 Copy_u8CharIndex, u8 *Copy_u8SpecialChar){
    1ffe:	df 93       	push	r29
    2000:	cf 93       	push	r28
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
    2006:	6c 97       	sbiw	r28, 0x1c	; 28
    2008:	0f b6       	in	r0, 0x3f	; 63
    200a:	f8 94       	cli
    200c:	de bf       	out	0x3e, r29	; 62
    200e:	0f be       	out	0x3f, r0	; 63
    2010:	cd bf       	out	0x3d, r28	; 61
    2012:	8a 8f       	std	Y+26, r24	; 0x1a
    2014:	7c 8f       	std	Y+28, r23	; 0x1c
    2016:	6b 8f       	std	Y+27, r22	; 0x1b
	
	LCD_voidSendCommand(0b01000000+(Copy_u8CharIndex * 8));
    2018:	8a 8d       	ldd	r24, Y+26	; 0x1a
    201a:	88 2f       	mov	r24, r24
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	08 96       	adiw	r24, 0x08	; 8
    2020:	88 0f       	add	r24, r24
    2022:	99 1f       	adc	r25, r25
    2024:	88 0f       	add	r24, r24
    2026:	99 1f       	adc	r25, r25
    2028:	88 0f       	add	r24, r24
    202a:	99 1f       	adc	r25, r25
    202c:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_voidSendCommand>
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	a0 e2       	ldi	r26, 0x20	; 32
    2036:	b2 e4       	ldi	r27, 0x42	; 66
    2038:	8d 8b       	std	Y+21, r24	; 0x15
    203a:	9e 8b       	std	Y+22, r25	; 0x16
    203c:	af 8b       	std	Y+23, r26	; 0x17
    203e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2040:	6d 89       	ldd	r22, Y+21	; 0x15
    2042:	7e 89       	ldd	r23, Y+22	; 0x16
    2044:	8f 89       	ldd	r24, Y+23	; 0x17
    2046:	98 8d       	ldd	r25, Y+24	; 0x18
    2048:	2b ea       	ldi	r18, 0xAB	; 171
    204a:	3a ea       	ldi	r19, 0xAA	; 170
    204c:	4a e2       	ldi	r20, 0x2A	; 42
    204e:	50 e4       	ldi	r21, 0x40	; 64
    2050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	89 8b       	std	Y+17, r24	; 0x11
    205a:	9a 8b       	std	Y+18, r25	; 0x12
    205c:	ab 8b       	std	Y+19, r26	; 0x13
    205e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2060:	69 89       	ldd	r22, Y+17	; 0x11
    2062:	7a 89       	ldd	r23, Y+18	; 0x12
    2064:	8b 89       	ldd	r24, Y+19	; 0x13
    2066:	9c 89       	ldd	r25, Y+20	; 0x14
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	40 e8       	ldi	r20, 0x80	; 128
    206e:	5f e3       	ldi	r21, 0x3F	; 63
    2070:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2074:	88 23       	and	r24, r24
    2076:	1c f4       	brge	.+6      	; 0x207e <LCD_voidDrawSpecialChar+0x80>
		__ticks = 1;
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	88 8b       	std	Y+16, r24	; 0x10
    207c:	91 c0       	rjmp	.+290    	; 0x21a0 <LCD_voidDrawSpecialChar+0x1a2>
	else if (__tmp > 255)
    207e:	69 89       	ldd	r22, Y+17	; 0x11
    2080:	7a 89       	ldd	r23, Y+18	; 0x12
    2082:	8b 89       	ldd	r24, Y+19	; 0x13
    2084:	9c 89       	ldd	r25, Y+20	; 0x14
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	4f e7       	ldi	r20, 0x7F	; 127
    208c:	53 e4       	ldi	r21, 0x43	; 67
    208e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2092:	18 16       	cp	r1, r24
    2094:	0c f0       	brlt	.+2      	; 0x2098 <LCD_voidDrawSpecialChar+0x9a>
    2096:	7b c0       	rjmp	.+246    	; 0x218e <LCD_voidDrawSpecialChar+0x190>
	{
		_delay_ms(__us / 1000.0);
    2098:	6d 89       	ldd	r22, Y+21	; 0x15
    209a:	7e 89       	ldd	r23, Y+22	; 0x16
    209c:	8f 89       	ldd	r24, Y+23	; 0x17
    209e:	98 8d       	ldd	r25, Y+24	; 0x18
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	4a e7       	ldi	r20, 0x7A	; 122
    20a6:	54 e4       	ldi	r21, 0x44	; 68
    20a8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	8c 87       	std	Y+12, r24	; 0x0c
    20b2:	9d 87       	std	Y+13, r25	; 0x0d
    20b4:	ae 87       	std	Y+14, r26	; 0x0e
    20b6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b8:	6c 85       	ldd	r22, Y+12	; 0x0c
    20ba:	7d 85       	ldd	r23, Y+13	; 0x0d
    20bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    20be:	9f 85       	ldd	r25, Y+15	; 0x0f
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	4a ef       	ldi	r20, 0xFA	; 250
    20c6:	54 e4       	ldi	r21, 0x44	; 68
    20c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	88 87       	std	Y+8, r24	; 0x08
    20d2:	99 87       	std	Y+9, r25	; 0x09
    20d4:	aa 87       	std	Y+10, r26	; 0x0a
    20d6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    20d8:	68 85       	ldd	r22, Y+8	; 0x08
    20da:	79 85       	ldd	r23, Y+9	; 0x09
    20dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    20de:	9b 85       	ldd	r25, Y+11	; 0x0b
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	40 e8       	ldi	r20, 0x80	; 128
    20e6:	5f e3       	ldi	r21, 0x3F	; 63
    20e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20ec:	88 23       	and	r24, r24
    20ee:	2c f4       	brge	.+10     	; 0x20fa <LCD_voidDrawSpecialChar+0xfc>
		__ticks = 1;
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	9f 83       	std	Y+7, r25	; 0x07
    20f6:	8e 83       	std	Y+6, r24	; 0x06
    20f8:	3f c0       	rjmp	.+126    	; 0x2178 <LCD_voidDrawSpecialChar+0x17a>
	else if (__tmp > 65535)
    20fa:	68 85       	ldd	r22, Y+8	; 0x08
    20fc:	79 85       	ldd	r23, Y+9	; 0x09
    20fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2100:	9b 85       	ldd	r25, Y+11	; 0x0b
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	3f ef       	ldi	r19, 0xFF	; 255
    2106:	4f e7       	ldi	r20, 0x7F	; 127
    2108:	57 e4       	ldi	r21, 0x47	; 71
    210a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    210e:	18 16       	cp	r1, r24
    2110:	4c f5       	brge	.+82     	; 0x2164 <LCD_voidDrawSpecialChar+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2112:	6c 85       	ldd	r22, Y+12	; 0x0c
    2114:	7d 85       	ldd	r23, Y+13	; 0x0d
    2116:	8e 85       	ldd	r24, Y+14	; 0x0e
    2118:	9f 85       	ldd	r25, Y+15	; 0x0f
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	40 e2       	ldi	r20, 0x20	; 32
    2120:	51 e4       	ldi	r21, 0x41	; 65
    2122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	bc 01       	movw	r22, r24
    212c:	cd 01       	movw	r24, r26
    212e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	9f 83       	std	Y+7, r25	; 0x07
    2138:	8e 83       	std	Y+6, r24	; 0x06
    213a:	0f c0       	rjmp	.+30     	; 0x215a <LCD_voidDrawSpecialChar+0x15c>
    213c:	88 ec       	ldi	r24, 0xC8	; 200
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	9d 83       	std	Y+5, r25	; 0x05
    2142:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2144:	8c 81       	ldd	r24, Y+4	; 0x04
    2146:	9d 81       	ldd	r25, Y+5	; 0x05
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	f1 f7       	brne	.-4      	; 0x2148 <LCD_voidDrawSpecialChar+0x14a>
    214c:	9d 83       	std	Y+5, r25	; 0x05
    214e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2150:	8e 81       	ldd	r24, Y+6	; 0x06
    2152:	9f 81       	ldd	r25, Y+7	; 0x07
    2154:	01 97       	sbiw	r24, 0x01	; 1
    2156:	9f 83       	std	Y+7, r25	; 0x07
    2158:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    215a:	8e 81       	ldd	r24, Y+6	; 0x06
    215c:	9f 81       	ldd	r25, Y+7	; 0x07
    215e:	00 97       	sbiw	r24, 0x00	; 0
    2160:	69 f7       	brne	.-38     	; 0x213c <LCD_voidDrawSpecialChar+0x13e>
    2162:	24 c0       	rjmp	.+72     	; 0x21ac <LCD_voidDrawSpecialChar+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2164:	68 85       	ldd	r22, Y+8	; 0x08
    2166:	79 85       	ldd	r23, Y+9	; 0x09
    2168:	8a 85       	ldd	r24, Y+10	; 0x0a
    216a:	9b 85       	ldd	r25, Y+11	; 0x0b
    216c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	9f 83       	std	Y+7, r25	; 0x07
    2176:	8e 83       	std	Y+6, r24	; 0x06
    2178:	8e 81       	ldd	r24, Y+6	; 0x06
    217a:	9f 81       	ldd	r25, Y+7	; 0x07
    217c:	9b 83       	std	Y+3, r25	; 0x03
    217e:	8a 83       	std	Y+2, r24	; 0x02
    2180:	8a 81       	ldd	r24, Y+2	; 0x02
    2182:	9b 81       	ldd	r25, Y+3	; 0x03
    2184:	01 97       	sbiw	r24, 0x01	; 1
    2186:	f1 f7       	brne	.-4      	; 0x2184 <LCD_voidDrawSpecialChar+0x186>
    2188:	9b 83       	std	Y+3, r25	; 0x03
    218a:	8a 83       	std	Y+2, r24	; 0x02
    218c:	0f c0       	rjmp	.+30     	; 0x21ac <LCD_voidDrawSpecialChar+0x1ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    218e:	69 89       	ldd	r22, Y+17	; 0x11
    2190:	7a 89       	ldd	r23, Y+18	; 0x12
    2192:	8b 89       	ldd	r24, Y+19	; 0x13
    2194:	9c 89       	ldd	r25, Y+20	; 0x14
    2196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	88 8b       	std	Y+16, r24	; 0x10
    21a0:	88 89       	ldd	r24, Y+16	; 0x10
    21a2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	8a 95       	dec	r24
    21a8:	f1 f7       	brne	.-4      	; 0x21a6 <LCD_voidDrawSpecialChar+0x1a8>
    21aa:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(40);
	u8 LCD_U8Counter ;
	for (LCD_U8Counter=0 ; LCD_U8Counter<8 ; LCD_U8Counter++)
    21ac:	19 8e       	std	Y+25, r1	; 0x19
    21ae:	0e c0       	rjmp	.+28     	; 0x21cc <LCD_voidDrawSpecialChar+0x1ce>
	{
		LCD_voidSendChar(Copy_u8SpecialChar[LCD_U8Counter]);
    21b0:	89 8d       	ldd	r24, Y+25	; 0x19
    21b2:	28 2f       	mov	r18, r24
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21ba:	fc 01       	movw	r30, r24
    21bc:	e2 0f       	add	r30, r18
    21be:	f3 1f       	adc	r31, r19
    21c0:	80 81       	ld	r24, Z
    21c2:	0e 94 57 0e 	call	0x1cae	; 0x1cae <LCD_voidSendChar>
void LCD_voidDrawSpecialChar(u8 Copy_u8CharIndex, u8 *Copy_u8SpecialChar){
	
	LCD_voidSendCommand(0b01000000+(Copy_u8CharIndex * 8));
	_delay_us(40);
	u8 LCD_U8Counter ;
	for (LCD_U8Counter=0 ; LCD_U8Counter<8 ; LCD_U8Counter++)
    21c6:	89 8d       	ldd	r24, Y+25	; 0x19
    21c8:	8f 5f       	subi	r24, 0xFF	; 255
    21ca:	89 8f       	std	Y+25, r24	; 0x19
    21cc:	89 8d       	ldd	r24, Y+25	; 0x19
    21ce:	88 30       	cpi	r24, 0x08	; 8
    21d0:	78 f3       	brcs	.-34     	; 0x21b0 <LCD_voidDrawSpecialChar+0x1b2>
	{
		LCD_voidSendChar(Copy_u8SpecialChar[LCD_U8Counter]);
	}


}
    21d2:	6c 96       	adiw	r28, 0x1c	; 28
    21d4:	0f b6       	in	r0, 0x3f	; 63
    21d6:	f8 94       	cli
    21d8:	de bf       	out	0x3e, r29	; 62
    21da:	0f be       	out	0x3f, r0	; 63
    21dc:	cd bf       	out	0x3d, r28	; 61
    21de:	cf 91       	pop	r28
    21e0:	df 91       	pop	r29
    21e2:	08 95       	ret

000021e4 <LCD_voidSendSpecialChar>:

void LCD_voidSendSpecialChar(u8 Copy_u8CharIndex){
    21e4:	df 93       	push	r29
    21e6:	cf 93       	push	r28
    21e8:	0f 92       	push	r0
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
    21ee:	89 83       	std	Y+1, r24	; 0x01
	
	LCD_voidSendChar(Copy_u8CharIndex);
    21f0:	89 81       	ldd	r24, Y+1	; 0x01
    21f2:	0e 94 57 0e 	call	0x1cae	; 0x1cae <LCD_voidSendChar>
}
    21f6:	0f 90       	pop	r0
    21f8:	cf 91       	pop	r28
    21fa:	df 91       	pop	r29
    21fc:	08 95       	ret

000021fe <TMR1_SetCallBack>:
#include "TMR1_Interface.h"

void (*TMR1_GlobalPtr)(void) = '\0';

void TMR1_SetCallBack(void (*Ptr)(void))
{
    21fe:	df 93       	push	r29
    2200:	cf 93       	push	r28
    2202:	00 d0       	rcall	.+0      	; 0x2204 <TMR1_SetCallBack+0x6>
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
    2208:	9a 83       	std	Y+2, r25	; 0x02
    220a:	89 83       	std	Y+1, r24	; 0x01
	TMR1_GlobalPtr = Ptr;
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	9a 81       	ldd	r25, Y+2	; 0x02
    2210:	90 93 c5 00 	sts	0x00C5, r25
    2214:	80 93 c4 00 	sts	0x00C4, r24
}
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	cf 91       	pop	r28
    221e:	df 91       	pop	r29
    2220:	08 95       	ret

00002222 <TMR1_voidInit>:

void TMR1_voidInit(void)
{
    2222:	df 93       	push	r29
    2224:	cf 93       	push	r28
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
#if TMR1_Prescaler == TMR1_NO_Prescaler
	SET_BIT(TCCR1B , CS10);
	CLR_BIT(TCCR1B , CS11);
	CLR_BIT(TCCR1B , CS12);
#elif TMR1_Prescaler == TMR1_Prescaler_8
	CLR_BIT(TCCR1B , CS10);
    222a:	ae e4       	ldi	r26, 0x4E	; 78
    222c:	b0 e0       	ldi	r27, 0x00	; 0
    222e:	ee e4       	ldi	r30, 0x4E	; 78
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	80 81       	ld	r24, Z
    2234:	8e 7f       	andi	r24, 0xFE	; 254
    2236:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , CS11);
    2238:	ae e4       	ldi	r26, 0x4E	; 78
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	ee e4       	ldi	r30, 0x4E	; 78
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	82 60       	ori	r24, 0x02	; 2
    2244:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , CS12);
    2246:	ae e4       	ldi	r26, 0x4E	; 78
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	ee e4       	ldi	r30, 0x4E	; 78
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	8b 7f       	andi	r24, 0xFB	; 251
    2252:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , COM1B0);
    SET_BIT(TCCR1A , COM1A0);
	CLR_BIT(TCCR1A , COM1B1);
	CLR_BIT(TCCR1A , COM1A1);
#elif TMR1_CompareOutputMode == Clear_OC1A_OC1B
	CLR_BIT(TCCR1A , COM1B0);
    2254:	af e4       	ldi	r26, 0x4F	; 79
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	ef e4       	ldi	r30, 0x4F	; 79
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	8f 7e       	andi	r24, 0xEF	; 239
    2260:	8c 93       	st	X, r24
    CLR_BIT(TCCR1A , COM1A0);
    2262:	af e4       	ldi	r26, 0x4F	; 79
    2264:	b0 e0       	ldi	r27, 0x00	; 0
    2266:	ef e4       	ldi	r30, 0x4F	; 79
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	8f 7b       	andi	r24, 0xBF	; 191
    226e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , COM1B1);
    2270:	af e4       	ldi	r26, 0x4F	; 79
    2272:	b0 e0       	ldi	r27, 0x00	; 0
    2274:	ef e4       	ldi	r30, 0x4F	; 79
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	80 81       	ld	r24, Z
    227a:	80 62       	ori	r24, 0x20	; 32
    227c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , COM1A1);
    227e:	af e4       	ldi	r26, 0x4F	; 79
    2280:	b0 e0       	ldi	r27, 0x00	; 0
    2282:	ef e4       	ldi	r30, 0x4F	; 79
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	80 81       	ld	r24, Z
    2288:	80 68       	ori	r24, 0x80	; 128
    228a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , WGM13);
	/*Output Compare Match Interrupt Enable*/
	SET_BIT(TIMSK , OCIE1A);
	//SET_BIT(TIMSK , OCIE1B);
#elif TMR1_Mode == FastPWM
	CLR_BIT(TCCR1A , WGM10);
    228c:	af e4       	ldi	r26, 0x4F	; 79
    228e:	b0 e0       	ldi	r27, 0x00	; 0
    2290:	ef e4       	ldi	r30, 0x4F	; 79
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	80 81       	ld	r24, Z
    2296:	8e 7f       	andi	r24, 0xFE	; 254
    2298:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , WGM11);
    229a:	af e4       	ldi	r26, 0x4F	; 79
    229c:	b0 e0       	ldi	r27, 0x00	; 0
    229e:	ef e4       	ldi	r30, 0x4F	; 79
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	80 81       	ld	r24, Z
    22a4:	82 60       	ori	r24, 0x02	; 2
    22a6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , WGM12);
    22a8:	ae e4       	ldi	r26, 0x4E	; 78
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	ee e4       	ldi	r30, 0x4E	; 78
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	88 60       	ori	r24, 0x08	; 8
    22b4:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , WGM13);
    22b6:	ae e4       	ldi	r26, 0x4E	; 78
    22b8:	b0 e0       	ldi	r27, 0x00	; 0
    22ba:	ee e4       	ldi	r30, 0x4E	; 78
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	80 81       	ld	r24, Z
    22c0:	80 61       	ori	r24, 0x10	; 16
    22c2:	8c 93       	st	X, r24
	ICR1 = 20000;     //for servo
    22c4:	e6 e4       	ldi	r30, 0x46	; 70
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 e2       	ldi	r24, 0x20	; 32
    22ca:	9e e4       	ldi	r25, 0x4E	; 78
    22cc:	91 83       	std	Z+1, r25	; 0x01
    22ce:	80 83       	st	Z, r24
#endif

}
    22d0:	cf 91       	pop	r28
    22d2:	df 91       	pop	r29
    22d4:	08 95       	ret

000022d6 <TMR1_voidOCR1A>:

void TMR1_voidOCR1A(u16 Copy_u16OCR1AValue)
{
    22d6:	df 93       	push	r29
    22d8:	cf 93       	push	r28
    22da:	00 d0       	rcall	.+0      	; 0x22dc <TMR1_voidOCR1A+0x6>
    22dc:	cd b7       	in	r28, 0x3d	; 61
    22de:	de b7       	in	r29, 0x3e	; 62
    22e0:	9a 83       	std	Y+2, r25	; 0x02
    22e2:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16OCR1AValue;
    22e4:	ea e4       	ldi	r30, 0x4A	; 74
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	89 81       	ldd	r24, Y+1	; 0x01
    22ea:	9a 81       	ldd	r25, Y+2	; 0x02
    22ec:	91 83       	std	Z+1, r25	; 0x01
    22ee:	80 83       	st	Z, r24
}
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	cf 91       	pop	r28
    22f6:	df 91       	pop	r29
    22f8:	08 95       	ret

000022fa <TMR1_voidPreload>:

void TMR1_voidPreload(u16 Copy_u16Value)
{
    22fa:	df 93       	push	r29
    22fc:	cf 93       	push	r28
    22fe:	00 d0       	rcall	.+0      	; 0x2300 <TMR1_voidPreload+0x6>
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
    2304:	9a 83       	std	Y+2, r25	; 0x02
    2306:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Value;
    2308:	ec e4       	ldi	r30, 0x4C	; 76
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	9a 81       	ldd	r25, Y+2	; 0x02
    2310:	91 83       	std	Z+1, r25	; 0x01
    2312:	80 83       	st	Z, r24
}
    2314:	0f 90       	pop	r0
    2316:	0f 90       	pop	r0
    2318:	cf 91       	pop	r28
    231a:	df 91       	pop	r29
    231c:	08 95       	ret

0000231e <TMR1_u16ICR1>:

u16 TMR1_u16ICR1(void)
{
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    2326:	e6 e4       	ldi	r30, 0x46	; 70
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	91 81       	ldd	r25, Z+1	; 0x01
}
    232e:	cf 91       	pop	r28
    2330:	df 91       	pop	r29
    2332:	08 95       	ret

00002334 <TMR1_voidLoadCounterTop>:

void TMR1_voidLoadCounterTop(u16 copy_u8CounterTop)
{
    2334:	df 93       	push	r29
    2336:	cf 93       	push	r28
    2338:	00 d0       	rcall	.+0      	; 0x233a <TMR1_voidLoadCounterTop+0x6>
    233a:	cd b7       	in	r28, 0x3d	; 61
    233c:	de b7       	in	r29, 0x3e	; 62
    233e:	9a 83       	std	Y+2, r25	; 0x02
    2340:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = copy_u8CounterTop;
    2342:	e6 e4       	ldi	r30, 0x46	; 70
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	9a 81       	ldd	r25, Y+2	; 0x02
    234a:	91 83       	std	Z+1, r25	; 0x01
    234c:	80 83       	st	Z, r24
}
    234e:	0f 90       	pop	r0
    2350:	0f 90       	pop	r0
    2352:	cf 91       	pop	r28
    2354:	df 91       	pop	r29
    2356:	08 95       	ret

00002358 <TMR1_voidICU_EdgeSelect>:

void TMR1_voidICU_EdgeSelect(u16 Copy_u16EdgeSelect)
{
    2358:	df 93       	push	r29
    235a:	cf 93       	push	r28
    235c:	00 d0       	rcall	.+0      	; 0x235e <TMR1_voidICU_EdgeSelect+0x6>
    235e:	00 d0       	rcall	.+0      	; 0x2360 <TMR1_voidICU_EdgeSelect+0x8>
    2360:	cd b7       	in	r28, 0x3d	; 61
    2362:	de b7       	in	r29, 0x3e	; 62
    2364:	9a 83       	std	Y+2, r25	; 0x02
    2366:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u16EdgeSelect)
    2368:	89 81       	ldd	r24, Y+1	; 0x01
    236a:	9a 81       	ldd	r25, Y+2	; 0x02
    236c:	9c 83       	std	Y+4, r25	; 0x04
    236e:	8b 83       	std	Y+3, r24	; 0x03
    2370:	8b 81       	ldd	r24, Y+3	; 0x03
    2372:	9c 81       	ldd	r25, Y+4	; 0x04
    2374:	00 97       	sbiw	r24, 0x00	; 0
    2376:	31 f0       	breq	.+12     	; 0x2384 <TMR1_voidICU_EdgeSelect+0x2c>
    2378:	8b 81       	ldd	r24, Y+3	; 0x03
    237a:	9c 81       	ldd	r25, Y+4	; 0x04
    237c:	81 30       	cpi	r24, 0x01	; 1
    237e:	91 05       	cpc	r25, r1
    2380:	49 f0       	breq	.+18     	; 0x2394 <TMR1_voidICU_EdgeSelect+0x3c>
    2382:	0f c0       	rjmp	.+30     	; 0x23a2 <TMR1_voidICU_EdgeSelect+0x4a>
	{
	case RisingEdge :
		SET_BIT(TCCR1B , ICES1);
    2384:	ae e4       	ldi	r26, 0x4E	; 78
    2386:	b0 e0       	ldi	r27, 0x00	; 0
    2388:	ee e4       	ldi	r30, 0x4E	; 78
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	80 81       	ld	r24, Z
    238e:	80 64       	ori	r24, 0x40	; 64
    2390:	8c 93       	st	X, r24
    2392:	07 c0       	rjmp	.+14     	; 0x23a2 <TMR1_voidICU_EdgeSelect+0x4a>
		break;
	case FallingEdge :
		CLR_BIT(TCCR1B , ICES1);
    2394:	ae e4       	ldi	r26, 0x4E	; 78
    2396:	b0 e0       	ldi	r27, 0x00	; 0
    2398:	ee e4       	ldi	r30, 0x4E	; 78
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	80 81       	ld	r24, Z
    239e:	8f 7b       	andi	r24, 0xBF	; 191
    23a0:	8c 93       	st	X, r24
	}
}
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	0f 90       	pop	r0
    23a8:	0f 90       	pop	r0
    23aa:	cf 91       	pop	r28
    23ac:	df 91       	pop	r29
    23ae:	08 95       	ret

000023b0 <__vector_9>:
void __vector_9()__attribute__((signal));     //overflow
void __vector_9()
{
    23b0:	1f 92       	push	r1
    23b2:	0f 92       	push	r0
    23b4:	0f b6       	in	r0, 0x3f	; 63
    23b6:	0f 92       	push	r0
    23b8:	11 24       	eor	r1, r1
    23ba:	2f 93       	push	r18
    23bc:	3f 93       	push	r19
    23be:	4f 93       	push	r20
    23c0:	5f 93       	push	r21
    23c2:	6f 93       	push	r22
    23c4:	7f 93       	push	r23
    23c6:	8f 93       	push	r24
    23c8:	9f 93       	push	r25
    23ca:	af 93       	push	r26
    23cc:	bf 93       	push	r27
    23ce:	ef 93       	push	r30
    23d0:	ff 93       	push	r31
    23d2:	df 93       	push	r29
    23d4:	cf 93       	push	r28
    23d6:	cd b7       	in	r28, 0x3d	; 61
    23d8:	de b7       	in	r29, 0x3e	; 62
	if(TMR1_GlobalPtr != '\0')
    23da:	80 91 c4 00 	lds	r24, 0x00C4
    23de:	90 91 c5 00 	lds	r25, 0x00C5
    23e2:	00 97       	sbiw	r24, 0x00	; 0
    23e4:	29 f0       	breq	.+10     	; 0x23f0 <__vector_9+0x40>
	{
		TMR1_GlobalPtr();
    23e6:	e0 91 c4 00 	lds	r30, 0x00C4
    23ea:	f0 91 c5 00 	lds	r31, 0x00C5
    23ee:	09 95       	icall
	}
}
    23f0:	cf 91       	pop	r28
    23f2:	df 91       	pop	r29
    23f4:	ff 91       	pop	r31
    23f6:	ef 91       	pop	r30
    23f8:	bf 91       	pop	r27
    23fa:	af 91       	pop	r26
    23fc:	9f 91       	pop	r25
    23fe:	8f 91       	pop	r24
    2400:	7f 91       	pop	r23
    2402:	6f 91       	pop	r22
    2404:	5f 91       	pop	r21
    2406:	4f 91       	pop	r20
    2408:	3f 91       	pop	r19
    240a:	2f 91       	pop	r18
    240c:	0f 90       	pop	r0
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	0f 90       	pop	r0
    2412:	1f 90       	pop	r1
    2414:	18 95       	reti

00002416 <__vector_7>:

void __vector_7()__attribute__((signal));      //compare
void __vector_7()
{
    2416:	1f 92       	push	r1
    2418:	0f 92       	push	r0
    241a:	0f b6       	in	r0, 0x3f	; 63
    241c:	0f 92       	push	r0
    241e:	11 24       	eor	r1, r1
    2420:	2f 93       	push	r18
    2422:	3f 93       	push	r19
    2424:	4f 93       	push	r20
    2426:	5f 93       	push	r21
    2428:	6f 93       	push	r22
    242a:	7f 93       	push	r23
    242c:	8f 93       	push	r24
    242e:	9f 93       	push	r25
    2430:	af 93       	push	r26
    2432:	bf 93       	push	r27
    2434:	ef 93       	push	r30
    2436:	ff 93       	push	r31
    2438:	df 93       	push	r29
    243a:	cf 93       	push	r28
    243c:	cd b7       	in	r28, 0x3d	; 61
    243e:	de b7       	in	r29, 0x3e	; 62
	if(TMR1_GlobalPtr != '\0')
    2440:	80 91 c4 00 	lds	r24, 0x00C4
    2444:	90 91 c5 00 	lds	r25, 0x00C5
    2448:	00 97       	sbiw	r24, 0x00	; 0
    244a:	29 f0       	breq	.+10     	; 0x2456 <__vector_7+0x40>
	{
		TMR1_GlobalPtr();
    244c:	e0 91 c4 00 	lds	r30, 0x00C4
    2450:	f0 91 c5 00 	lds	r31, 0x00C5
    2454:	09 95       	icall
	}
}
    2456:	cf 91       	pop	r28
    2458:	df 91       	pop	r29
    245a:	ff 91       	pop	r31
    245c:	ef 91       	pop	r30
    245e:	bf 91       	pop	r27
    2460:	af 91       	pop	r26
    2462:	9f 91       	pop	r25
    2464:	8f 91       	pop	r24
    2466:	7f 91       	pop	r23
    2468:	6f 91       	pop	r22
    246a:	5f 91       	pop	r21
    246c:	4f 91       	pop	r20
    246e:	3f 91       	pop	r19
    2470:	2f 91       	pop	r18
    2472:	0f 90       	pop	r0
    2474:	0f be       	out	0x3f, r0	; 63
    2476:	0f 90       	pop	r0
    2478:	1f 90       	pop	r1
    247a:	18 95       	reti

0000247c <__vector_6>:

void __vector_6()__attribute__((signal));     //capture event
void __vector_6()
{
    247c:	1f 92       	push	r1
    247e:	0f 92       	push	r0
    2480:	0f b6       	in	r0, 0x3f	; 63
    2482:	0f 92       	push	r0
    2484:	11 24       	eor	r1, r1
    2486:	2f 93       	push	r18
    2488:	3f 93       	push	r19
    248a:	4f 93       	push	r20
    248c:	5f 93       	push	r21
    248e:	6f 93       	push	r22
    2490:	7f 93       	push	r23
    2492:	8f 93       	push	r24
    2494:	9f 93       	push	r25
    2496:	af 93       	push	r26
    2498:	bf 93       	push	r27
    249a:	ef 93       	push	r30
    249c:	ff 93       	push	r31
    249e:	df 93       	push	r29
    24a0:	cf 93       	push	r28
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
	if(TMR1_GlobalPtr != '\0')
    24a6:	80 91 c4 00 	lds	r24, 0x00C4
    24aa:	90 91 c5 00 	lds	r25, 0x00C5
    24ae:	00 97       	sbiw	r24, 0x00	; 0
    24b0:	29 f0       	breq	.+10     	; 0x24bc <__vector_6+0x40>
	{
		TMR1_GlobalPtr();
    24b2:	e0 91 c4 00 	lds	r30, 0x00C4
    24b6:	f0 91 c5 00 	lds	r31, 0x00C5
    24ba:	09 95       	icall
	}
}
    24bc:	cf 91       	pop	r28
    24be:	df 91       	pop	r29
    24c0:	ff 91       	pop	r31
    24c2:	ef 91       	pop	r30
    24c4:	bf 91       	pop	r27
    24c6:	af 91       	pop	r26
    24c8:	9f 91       	pop	r25
    24ca:	8f 91       	pop	r24
    24cc:	7f 91       	pop	r23
    24ce:	6f 91       	pop	r22
    24d0:	5f 91       	pop	r21
    24d2:	4f 91       	pop	r20
    24d4:	3f 91       	pop	r19
    24d6:	2f 91       	pop	r18
    24d8:	0f 90       	pop	r0
    24da:	0f be       	out	0x3f, r0	; 63
    24dc:	0f 90       	pop	r0
    24de:	1f 90       	pop	r1
    24e0:	18 95       	reti

000024e2 <UART_voidInit>:
#include "STD_Types.h"
#include <avr/io.h>
#include "UART.h"


void UART_voidInit	(void){
    24e2:	df 93       	push	r29
    24e4:	cf 93       	push	r28
    24e6:	00 d0       	rcall	.+0      	; 0x24e8 <UART_voidInit+0x6>
    24e8:	0f 92       	push	r0
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62

	u16 Local_u16BaudRate = 51;
    24ee:	83 e3       	ldi	r24, 0x33	; 51
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	9b 83       	std	Y+3, r25	; 0x03
    24f4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8UCSRCvalue = 0b10000000;
    24f6:	80 e8       	ldi	r24, 0x80	; 128
    24f8:	89 83       	std	Y+1, r24	; 0x01

	/*1- Set baud rate */
	UBRRL = (u8) Local_u16BaudRate;
    24fa:	e9 e2       	ldi	r30, 0x29	; 41
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2500:	80 83       	st	Z, r24
	UBRRH = (u8) (Local_u16BaudRate >> 8);
    2502:	e0 e4       	ldi	r30, 0x40	; 64
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	8a 81       	ldd	r24, Y+2	; 0x02
    2508:	9b 81       	ldd	r25, Y+3	; 0x03
    250a:	89 2f       	mov	r24, r25
    250c:	99 27       	eor	r25, r25
    250e:	80 83       	st	Z, r24

	/*2- Select normal speed */
	CLR_BIT(UCSRA, U2X);
    2510:	ab e2       	ldi	r26, 0x2B	; 43
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	eb e2       	ldi	r30, 0x2B	; 43
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	80 81       	ld	r24, Z
    251a:	8d 7f       	andi	r24, 0xFD	; 253
    251c:	8c 93       	st	X, r24

	/*3- disable Mluti-Processor mode */
	CLR_BIT(UCSRA, MPCM);
    251e:	ab e2       	ldi	r26, 0x2B	; 43
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	eb e2       	ldi	r30, 0x2B	; 43
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	8e 7f       	andi	r24, 0xFE	; 254
    252a:	8c 93       	st	X, r24

	/*4- enable receiver & Transmitter */
	SET_BIT(UCSRB, RXEN);
    252c:	aa e2       	ldi	r26, 0x2A	; 42
    252e:	b0 e0       	ldi	r27, 0x00	; 0
    2530:	ea e2       	ldi	r30, 0x2A	; 42
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	80 81       	ld	r24, Z
    2536:	80 61       	ori	r24, 0x10	; 16
    2538:	8c 93       	st	X, r24
	SET_BIT(UCSRB, TXEN);
    253a:	aa e2       	ldi	r26, 0x2A	; 42
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	ea e2       	ldi	r30, 0x2A	; 42
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	80 81       	ld	r24, Z
    2544:	88 60       	ori	r24, 0x08	; 8
    2546:	8c 93       	st	X, r24

	/*5- select 8 bite data */
	CLR_BIT(UCSRB, UCSZ2);
    2548:	aa e2       	ldi	r26, 0x2A	; 42
    254a:	b0 e0       	ldi	r27, 0x00	; 0
    254c:	ea e2       	ldi	r30, 0x2A	; 42
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	80 81       	ld	r24, Z
    2552:	8b 7f       	andi	r24, 0xFB	; 251
    2554:	8c 93       	st	X, r24
	SET_BIT(Local_u8UCSRCvalue, UCSZ1);
    2556:	89 81       	ldd	r24, Y+1	; 0x01
    2558:	84 60       	ori	r24, 0x04	; 4
    255a:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRCvalue, UCSZ0);
    255c:	89 81       	ldd	r24, Y+1	; 0x01
    255e:	82 60       	ori	r24, 0x02	; 2
    2560:	89 83       	std	Y+1, r24	; 0x01

	/*6- select Asynchronous */
	CLR_BIT(Local_u8UCSRCvalue, UMSEL);
    2562:	89 81       	ldd	r24, Y+1	; 0x01
    2564:	8f 7b       	andi	r24, 0xBF	; 191
    2566:	89 83       	std	Y+1, r24	; 0x01

	/*7- Disabled parity */
	CLR_BIT(Local_u8UCSRCvalue, UPM0);
    2568:	89 81       	ldd	r24, Y+1	; 0x01
    256a:	8f 7e       	andi	r24, 0xEF	; 239
    256c:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRCvalue, UPM1);
    256e:	89 81       	ldd	r24, Y+1	; 0x01
    2570:	8f 7d       	andi	r24, 0xDF	; 223
    2572:	89 83       	std	Y+1, r24	; 0x01

	/*8- Set 2 stop bits */
	SET_BIT(Local_u8UCSRCvalue, USBS);
    2574:	89 81       	ldd	r24, Y+1	; 0x01
    2576:	88 60       	ori	r24, 0x08	; 8
    2578:	89 83       	std	Y+1, r24	; 0x01

	/*9- disable clock polarity */
	CLR_BIT(Local_u8UCSRCvalue, UCPOL);
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	8e 7f       	andi	r24, 0xFE	; 254
    257e:	89 83       	std	Y+1, r24	; 0x01

	/*10- assign Local_u8UCSRCvalue to UCSRC */
	UCSRC = Local_u8UCSRCvalue;
    2580:	e0 e4       	ldi	r30, 0x40	; 64
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	80 83       	st	Z, r24

}
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	0f 90       	pop	r0
    258e:	cf 91       	pop	r28
    2590:	df 91       	pop	r29
    2592:	08 95       	ret

00002594 <UART_voidSendData>:


void UART_voidSendData	(u8 Copy_u8Data){
    2594:	df 93       	push	r29
    2596:	cf 93       	push	r28
    2598:	0f 92       	push	r0
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
    259e:	89 83       	std	Y+1, r24	; 0x01

	/* Wait for empty transmit buffer */
	while(GET_BIT(UCSRA, UDRE) == 0);
    25a0:	eb e2       	ldi	r30, 0x2B	; 43
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	82 95       	swap	r24
    25a8:	86 95       	lsr	r24
    25aa:	87 70       	andi	r24, 0x07	; 7
    25ac:	88 2f       	mov	r24, r24
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	81 70       	andi	r24, 0x01	; 1
    25b2:	90 70       	andi	r25, 0x00	; 0
    25b4:	00 97       	sbiw	r24, 0x00	; 0
    25b6:	a1 f3       	breq	.-24     	; 0x25a0 <UART_voidSendData+0xc>

	/* Put data into buffer, sends the data */
	UDR = Copy_u8Data;
    25b8:	ec e2       	ldi	r30, 0x2C	; 44
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	80 83       	st	Z, r24
}
    25c0:	0f 90       	pop	r0
    25c2:	cf 91       	pop	r28
    25c4:	df 91       	pop	r29
    25c6:	08 95       	ret

000025c8 <UART_u8ReceiveData>:


u8	 UART_u8ReceiveData (void){
    25c8:	df 93       	push	r29
    25ca:	cf 93       	push	r28
    25cc:	cd b7       	in	r28, 0x3d	; 61
    25ce:	de b7       	in	r29, 0x3e	; 62

	/* Wait for data to be received */
	while(GET_BIT(UCSRA, RXC) == 0);
    25d0:	eb e2       	ldi	r30, 0x2B	; 43
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	80 81       	ld	r24, Z
    25d6:	88 23       	and	r24, r24
    25d8:	dc f7       	brge	.-10     	; 0x25d0 <UART_u8ReceiveData+0x8>

	/* Get and return received data from buffer */
	return UDR;
    25da:	ec e2       	ldi	r30, 0x2C	; 44
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	80 81       	ld	r24, Z
}
    25e0:	cf 91       	pop	r28
    25e2:	df 91       	pop	r29
    25e4:	08 95       	ret

000025e6 <main>:
#include "TMR1_Interface.h"
#include "UART.h"
#include <util/delay.h>


int main(){
    25e6:	0f 93       	push	r16
    25e8:	1f 93       	push	r17
    25ea:	df 93       	push	r29
    25ec:	cf 93       	push	r28
    25ee:	cd b7       	in	r28, 0x3d	; 61
    25f0:	de b7       	in	r29, 0x3e	; 62
    25f2:	ca 59       	subi	r28, 0x9A	; 154
    25f4:	d0 40       	sbci	r29, 0x00	; 0
    25f6:	0f b6       	in	r0, 0x3f	; 63
    25f8:	f8 94       	cli
    25fa:	de bf       	out	0x3e, r29	; 62
    25fc:	0f be       	out	0x3f, r0	; 63
    25fe:	cd bf       	out	0x3d, r28	; 61


	u8 input, i=0, wrong = 0, warning = 0;
    2600:	fe 01       	movw	r30, r28
    2602:	e1 57       	subi	r30, 0x71	; 113
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	10 82       	st	Z, r1
    2608:	fe 01       	movw	r30, r28
    260a:	e2 57       	subi	r30, 0x72	; 114
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	10 82       	st	Z, r1
    2610:	fe 01       	movw	r30, r28
    2612:	e3 57       	subi	r30, 0x73	; 115
    2614:	ff 4f       	sbci	r31, 0xFF	; 255
    2616:	10 82       	st	Z, r1
	u8 currentPass[] = "1111";
    2618:	ce 01       	movw	r24, r28
    261a:	8f 56       	subi	r24, 0x6F	; 111
    261c:	9f 4f       	sbci	r25, 0xFF	; 255
    261e:	ca 56       	subi	r28, 0x6A	; 106
    2620:	df 4f       	sbci	r29, 0xFF	; 255
    2622:	99 83       	std	Y+1, r25	; 0x01
    2624:	88 83       	st	Y, r24
    2626:	c6 59       	subi	r28, 0x96	; 150
    2628:	d0 40       	sbci	r29, 0x00	; 0
    262a:	8f e9       	ldi	r24, 0x9F	; 159
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	c8 56       	subi	r28, 0x68	; 104
    2630:	df 4f       	sbci	r29, 0xFF	; 255
    2632:	99 83       	std	Y+1, r25	; 0x01
    2634:	88 83       	st	Y, r24
    2636:	c8 59       	subi	r28, 0x98	; 152
    2638:	d0 40       	sbci	r29, 0x00	; 0
    263a:	95 e0       	ldi	r25, 0x05	; 5
    263c:	c6 56       	subi	r28, 0x66	; 102
    263e:	df 4f       	sbci	r29, 0xFF	; 255
    2640:	98 83       	st	Y, r25
    2642:	ca 59       	subi	r28, 0x9A	; 154
    2644:	d0 40       	sbci	r29, 0x00	; 0
    2646:	c8 56       	subi	r28, 0x68	; 104
    2648:	df 4f       	sbci	r29, 0xFF	; 255
    264a:	e8 81       	ld	r30, Y
    264c:	f9 81       	ldd	r31, Y+1	; 0x01
    264e:	c8 59       	subi	r28, 0x98	; 152
    2650:	d0 40       	sbci	r29, 0x00	; 0
    2652:	00 80       	ld	r0, Z
    2654:	c8 56       	subi	r28, 0x68	; 104
    2656:	df 4f       	sbci	r29, 0xFF	; 255
    2658:	88 81       	ld	r24, Y
    265a:	99 81       	ldd	r25, Y+1	; 0x01
    265c:	c8 59       	subi	r28, 0x98	; 152
    265e:	d0 40       	sbci	r29, 0x00	; 0
    2660:	01 96       	adiw	r24, 0x01	; 1
    2662:	c8 56       	subi	r28, 0x68	; 104
    2664:	df 4f       	sbci	r29, 0xFF	; 255
    2666:	99 83       	std	Y+1, r25	; 0x01
    2668:	88 83       	st	Y, r24
    266a:	c8 59       	subi	r28, 0x98	; 152
    266c:	d0 40       	sbci	r29, 0x00	; 0
    266e:	ca 56       	subi	r28, 0x6A	; 106
    2670:	df 4f       	sbci	r29, 0xFF	; 255
    2672:	e8 81       	ld	r30, Y
    2674:	f9 81       	ldd	r31, Y+1	; 0x01
    2676:	c6 59       	subi	r28, 0x96	; 150
    2678:	d0 40       	sbci	r29, 0x00	; 0
    267a:	00 82       	st	Z, r0
    267c:	ca 56       	subi	r28, 0x6A	; 106
    267e:	df 4f       	sbci	r29, 0xFF	; 255
    2680:	88 81       	ld	r24, Y
    2682:	99 81       	ldd	r25, Y+1	; 0x01
    2684:	c6 59       	subi	r28, 0x96	; 150
    2686:	d0 40       	sbci	r29, 0x00	; 0
    2688:	01 96       	adiw	r24, 0x01	; 1
    268a:	ca 56       	subi	r28, 0x6A	; 106
    268c:	df 4f       	sbci	r29, 0xFF	; 255
    268e:	99 83       	std	Y+1, r25	; 0x01
    2690:	88 83       	st	Y, r24
    2692:	c6 59       	subi	r28, 0x96	; 150
    2694:	d0 40       	sbci	r29, 0x00	; 0
    2696:	c6 56       	subi	r28, 0x66	; 102
    2698:	df 4f       	sbci	r29, 0xFF	; 255
    269a:	98 81       	ld	r25, Y
    269c:	ca 59       	subi	r28, 0x9A	; 154
    269e:	d0 40       	sbci	r29, 0x00	; 0
    26a0:	91 50       	subi	r25, 0x01	; 1
    26a2:	c6 56       	subi	r28, 0x66	; 102
    26a4:	df 4f       	sbci	r29, 0xFF	; 255
    26a6:	98 83       	st	Y, r25
    26a8:	ca 59       	subi	r28, 0x9A	; 154
    26aa:	d0 40       	sbci	r29, 0x00	; 0
    26ac:	c6 56       	subi	r28, 0x66	; 102
    26ae:	df 4f       	sbci	r29, 0xFF	; 255
    26b0:	e8 81       	ld	r30, Y
    26b2:	ca 59       	subi	r28, 0x9A	; 154
    26b4:	d0 40       	sbci	r29, 0x00	; 0
    26b6:	ee 23       	and	r30, r30
    26b8:	31 f6       	brne	.-116    	; 0x2646 <main+0x60>


	// Initialization
	LCD_voidInit();
    26ba:	0e 94 9a 0a 	call	0x1534	; 0x1534 <LCD_voidInit>
	KPD_voidInit();
    26be:	0e 94 6e 09 	call	0x12dc	; 0x12dc <KPD_voidInit>
	TMR1_voidInit();
    26c2:	0e 94 11 11 	call	0x2222	; 0x2222 <TMR1_voidInit>
	UART_voidInit();
    26c6:	0e 94 71 12 	call	0x24e2	; 0x24e2 <UART_voidInit>

	// Servo motor setup
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN5, DIO_OUTPUT);
    26ca:	83 e0       	ldi	r24, 0x03	; 3
    26cc:	65 e0       	ldi	r22, 0x05	; 5
    26ce:	41 e0       	ldi	r20, 0x01	; 1
    26d0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinDirection>

	// Warning LED
	DIO_voidSetPinDirection(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	64 e0       	ldi	r22, 0x04	; 4
    26d8:	41 e0       	ldi	r20, 0x01	; 1
    26da:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinDirection>

	 LCD_voidSendString("Enter pass:");
    26de:	80 e6       	ldi	r24, 0x60	; 96
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <LCD_voidSendString>

	while(1)
	{

		input =KPD_u8GetPressedKey();
    26e6:	0e 94 a0 09 	call	0x1340	; 0x1340 <KPD_u8GetPressedKey>
    26ea:	fe 01       	movw	r30, r28
    26ec:	e0 57       	subi	r30, 0x70	; 112
    26ee:	ff 4f       	sbci	r31, 0xFF	; 255
    26f0:	80 83       	st	Z, r24
		if(input != KPD_CHECK_BUTTON_PRESSED_OR_NOT	)
    26f2:	fe 01       	movw	r30, r28
    26f4:	e0 57       	subi	r30, 0x70	; 112
    26f6:	ff 4f       	sbci	r31, 0xFF	; 255
    26f8:	80 81       	ld	r24, Z
    26fa:	8f 3f       	cpi	r24, 0xFF	; 255
    26fc:	a1 f3       	breq	.-24     	; 0x26e6 <main+0x100>
			//LCD_voidSetLocation(2,0);
			/* Reset key is pressed
			 * Reset password characters counter and reset flag
			 * Reset warning LED
			 */
			if (input == 'C')
    26fe:	fe 01       	movw	r30, r28
    2700:	e0 57       	subi	r30, 0x70	; 112
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	80 81       	ld	r24, Z
    2706:	83 34       	cpi	r24, 0x43	; 67
    2708:	09 f0       	breq	.+2      	; 0x270c <main+0x126>
    270a:	f2 c2       	rjmp	.+1508   	; 0x2cf0 <main+0x70a>
			{
				i = 0;
    270c:	fe 01       	movw	r30, r28
    270e:	e1 57       	subi	r30, 0x71	; 113
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	10 82       	st	Z, r1
				wrong = 0;
    2714:	fe 01       	movw	r30, r28
    2716:	e2 57       	subi	r30, 0x72	; 114
    2718:	ff 4f       	sbci	r31, 0xFF	; 255
    271a:	10 82       	st	Z, r1
				warning = 1;
    271c:	fe 01       	movw	r30, r28
    271e:	e3 57       	subi	r30, 0x73	; 115
    2720:	ff 4f       	sbci	r31, 0xFF	; 255
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	80 83       	st	Z, r24
				LCD_voidSendCommand(CLEAR);
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_voidSendCommand>
    272c:	fe 01       	movw	r30, r28
    272e:	e7 57       	subi	r30, 0x77	; 119
    2730:	ff 4f       	sbci	r31, 0xFF	; 255
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	a0 e0       	ldi	r26, 0x00	; 0
    2738:	b0 e4       	ldi	r27, 0x40	; 64
    273a:	80 83       	st	Z, r24
    273c:	91 83       	std	Z+1, r25	; 0x01
    273e:	a2 83       	std	Z+2, r26	; 0x02
    2740:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2742:	8e 01       	movw	r16, r28
    2744:	0b 57       	subi	r16, 0x7B	; 123
    2746:	1f 4f       	sbci	r17, 0xFF	; 255
    2748:	fe 01       	movw	r30, r28
    274a:	e7 57       	subi	r30, 0x77	; 119
    274c:	ff 4f       	sbci	r31, 0xFF	; 255
    274e:	60 81       	ld	r22, Z
    2750:	71 81       	ldd	r23, Z+1	; 0x01
    2752:	82 81       	ldd	r24, Z+2	; 0x02
    2754:	93 81       	ldd	r25, Z+3	; 0x03
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	4a ef       	ldi	r20, 0xFA	; 250
    275c:	54 e4       	ldi	r21, 0x44	; 68
    275e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	f8 01       	movw	r30, r16
    2768:	80 83       	st	Z, r24
    276a:	91 83       	std	Z+1, r25	; 0x01
    276c:	a2 83       	std	Z+2, r26	; 0x02
    276e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2770:	fe 01       	movw	r30, r28
    2772:	eb 57       	subi	r30, 0x7B	; 123
    2774:	ff 4f       	sbci	r31, 0xFF	; 255
    2776:	60 81       	ld	r22, Z
    2778:	71 81       	ldd	r23, Z+1	; 0x01
    277a:	82 81       	ldd	r24, Z+2	; 0x02
    277c:	93 81       	ldd	r25, Z+3	; 0x03
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	40 e8       	ldi	r20, 0x80	; 128
    2784:	5f e3       	ldi	r21, 0x3F	; 63
    2786:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    278a:	88 23       	and	r24, r24
    278c:	44 f4       	brge	.+16     	; 0x279e <main+0x1b8>
		__ticks = 1;
    278e:	fe 01       	movw	r30, r28
    2790:	ed 57       	subi	r30, 0x7D	; 125
    2792:	ff 4f       	sbci	r31, 0xFF	; 255
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	91 83       	std	Z+1, r25	; 0x01
    279a:	80 83       	st	Z, r24
    279c:	64 c0       	rjmp	.+200    	; 0x2866 <main+0x280>
	else if (__tmp > 65535)
    279e:	fe 01       	movw	r30, r28
    27a0:	eb 57       	subi	r30, 0x7B	; 123
    27a2:	ff 4f       	sbci	r31, 0xFF	; 255
    27a4:	60 81       	ld	r22, Z
    27a6:	71 81       	ldd	r23, Z+1	; 0x01
    27a8:	82 81       	ldd	r24, Z+2	; 0x02
    27aa:	93 81       	ldd	r25, Z+3	; 0x03
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	3f ef       	ldi	r19, 0xFF	; 255
    27b0:	4f e7       	ldi	r20, 0x7F	; 127
    27b2:	57 e4       	ldi	r21, 0x47	; 71
    27b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27b8:	18 16       	cp	r1, r24
    27ba:	0c f0       	brlt	.+2      	; 0x27be <main+0x1d8>
    27bc:	43 c0       	rjmp	.+134    	; 0x2844 <main+0x25e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27be:	fe 01       	movw	r30, r28
    27c0:	e7 57       	subi	r30, 0x77	; 119
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	60 81       	ld	r22, Z
    27c6:	71 81       	ldd	r23, Z+1	; 0x01
    27c8:	82 81       	ldd	r24, Z+2	; 0x02
    27ca:	93 81       	ldd	r25, Z+3	; 0x03
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	40 e2       	ldi	r20, 0x20	; 32
    27d2:	51 e4       	ldi	r21, 0x41	; 65
    27d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	8e 01       	movw	r16, r28
    27de:	0d 57       	subi	r16, 0x7D	; 125
    27e0:	1f 4f       	sbci	r17, 0xFF	; 255
    27e2:	bc 01       	movw	r22, r24
    27e4:	cd 01       	movw	r24, r26
    27e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	f8 01       	movw	r30, r16
    27f0:	91 83       	std	Z+1, r25	; 0x01
    27f2:	80 83       	st	Z, r24
    27f4:	1f c0       	rjmp	.+62     	; 0x2834 <main+0x24e>
    27f6:	fe 01       	movw	r30, r28
    27f8:	ef 57       	subi	r30, 0x7F	; 127
    27fa:	ff 4f       	sbci	r31, 0xFF	; 255
    27fc:	88 ec       	ldi	r24, 0xC8	; 200
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	91 83       	std	Z+1, r25	; 0x01
    2802:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2804:	fe 01       	movw	r30, r28
    2806:	ef 57       	subi	r30, 0x7F	; 127
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	80 81       	ld	r24, Z
    280c:	91 81       	ldd	r25, Z+1	; 0x01
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	f1 f7       	brne	.-4      	; 0x280e <main+0x228>
    2812:	fe 01       	movw	r30, r28
    2814:	ef 57       	subi	r30, 0x7F	; 127
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	91 83       	std	Z+1, r25	; 0x01
    281a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    281c:	de 01       	movw	r26, r28
    281e:	ad 57       	subi	r26, 0x7D	; 125
    2820:	bf 4f       	sbci	r27, 0xFF	; 255
    2822:	fe 01       	movw	r30, r28
    2824:	ed 57       	subi	r30, 0x7D	; 125
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	80 81       	ld	r24, Z
    282a:	91 81       	ldd	r25, Z+1	; 0x01
    282c:	01 97       	sbiw	r24, 0x01	; 1
    282e:	11 96       	adiw	r26, 0x01	; 1
    2830:	9c 93       	st	X, r25
    2832:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2834:	fe 01       	movw	r30, r28
    2836:	ed 57       	subi	r30, 0x7D	; 125
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	80 81       	ld	r24, Z
    283c:	91 81       	ldd	r25, Z+1	; 0x01
    283e:	00 97       	sbiw	r24, 0x00	; 0
    2840:	d1 f6       	brne	.-76     	; 0x27f6 <main+0x210>
    2842:	27 c0       	rjmp	.+78     	; 0x2892 <main+0x2ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2844:	8e 01       	movw	r16, r28
    2846:	0d 57       	subi	r16, 0x7D	; 125
    2848:	1f 4f       	sbci	r17, 0xFF	; 255
    284a:	fe 01       	movw	r30, r28
    284c:	eb 57       	subi	r30, 0x7B	; 123
    284e:	ff 4f       	sbci	r31, 0xFF	; 255
    2850:	60 81       	ld	r22, Z
    2852:	71 81       	ldd	r23, Z+1	; 0x01
    2854:	82 81       	ldd	r24, Z+2	; 0x02
    2856:	93 81       	ldd	r25, Z+3	; 0x03
    2858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	f8 01       	movw	r30, r16
    2862:	91 83       	std	Z+1, r25	; 0x01
    2864:	80 83       	st	Z, r24
    2866:	de 01       	movw	r26, r28
    2868:	a1 58       	subi	r26, 0x81	; 129
    286a:	bf 4f       	sbci	r27, 0xFF	; 255
    286c:	fe 01       	movw	r30, r28
    286e:	ed 57       	subi	r30, 0x7D	; 125
    2870:	ff 4f       	sbci	r31, 0xFF	; 255
    2872:	80 81       	ld	r24, Z
    2874:	91 81       	ldd	r25, Z+1	; 0x01
    2876:	8d 93       	st	X+, r24
    2878:	9c 93       	st	X, r25
    287a:	fe 01       	movw	r30, r28
    287c:	e1 58       	subi	r30, 0x81	; 129
    287e:	ff 4f       	sbci	r31, 0xFF	; 255
    2880:	80 81       	ld	r24, Z
    2882:	91 81       	ldd	r25, Z+1	; 0x01
    2884:	01 97       	sbiw	r24, 0x01	; 1
    2886:	f1 f7       	brne	.-4      	; 0x2884 <main+0x29e>
    2888:	fe 01       	movw	r30, r28
    288a:	e1 58       	subi	r30, 0x81	; 129
    288c:	ff 4f       	sbci	r31, 0xFF	; 255
    288e:	91 83       	std	Z+1, r25	; 0x01
    2890:	80 83       	st	Z, r24
			    _delay_ms(2);
			    LCD_voidSendString("RESET");
    2892:	8c e6       	ldi	r24, 0x6C	; 108
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <LCD_voidSendString>
                DIO_voidSetPinValue(DIO_PORTA, DIO_PIN4, DIO_HIGH);
    289a:	80 e0       	ldi	r24, 0x00	; 0
    289c:	64 e0       	ldi	r22, 0x04	; 4
    289e:	41 e0       	ldi	r20, 0x01	; 1
    28a0:	0e 94 53 07 	call	0xea6	; 0xea6 <DIO_voidSetPinValue>
    28a4:	fe 01       	movw	r30, r28
    28a6:	e5 58       	subi	r30, 0x85	; 133
    28a8:	ff 4f       	sbci	r31, 0xFF	; 255
    28aa:	80 e0       	ldi	r24, 0x00	; 0
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	aa e7       	ldi	r26, 0x7A	; 122
    28b0:	b3 e4       	ldi	r27, 0x43	; 67
    28b2:	80 83       	st	Z, r24
    28b4:	91 83       	std	Z+1, r25	; 0x01
    28b6:	a2 83       	std	Z+2, r26	; 0x02
    28b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ba:	8e 01       	movw	r16, r28
    28bc:	09 58       	subi	r16, 0x89	; 137
    28be:	1f 4f       	sbci	r17, 0xFF	; 255
    28c0:	fe 01       	movw	r30, r28
    28c2:	e5 58       	subi	r30, 0x85	; 133
    28c4:	ff 4f       	sbci	r31, 0xFF	; 255
    28c6:	60 81       	ld	r22, Z
    28c8:	71 81       	ldd	r23, Z+1	; 0x01
    28ca:	82 81       	ldd	r24, Z+2	; 0x02
    28cc:	93 81       	ldd	r25, Z+3	; 0x03
    28ce:	20 e0       	ldi	r18, 0x00	; 0
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	4a ef       	ldi	r20, 0xFA	; 250
    28d4:	54 e4       	ldi	r21, 0x44	; 68
    28d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28da:	dc 01       	movw	r26, r24
    28dc:	cb 01       	movw	r24, r22
    28de:	f8 01       	movw	r30, r16
    28e0:	80 83       	st	Z, r24
    28e2:	91 83       	std	Z+1, r25	; 0x01
    28e4:	a2 83       	std	Z+2, r26	; 0x02
    28e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28e8:	fe 01       	movw	r30, r28
    28ea:	e9 58       	subi	r30, 0x89	; 137
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	60 81       	ld	r22, Z
    28f0:	71 81       	ldd	r23, Z+1	; 0x01
    28f2:	82 81       	ldd	r24, Z+2	; 0x02
    28f4:	93 81       	ldd	r25, Z+3	; 0x03
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	40 e8       	ldi	r20, 0x80	; 128
    28fc:	5f e3       	ldi	r21, 0x3F	; 63
    28fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2902:	88 23       	and	r24, r24
    2904:	44 f4       	brge	.+16     	; 0x2916 <main+0x330>
		__ticks = 1;
    2906:	fe 01       	movw	r30, r28
    2908:	eb 58       	subi	r30, 0x8B	; 139
    290a:	ff 4f       	sbci	r31, 0xFF	; 255
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	91 83       	std	Z+1, r25	; 0x01
    2912:	80 83       	st	Z, r24
    2914:	64 c0       	rjmp	.+200    	; 0x29de <main+0x3f8>
	else if (__tmp > 65535)
    2916:	fe 01       	movw	r30, r28
    2918:	e9 58       	subi	r30, 0x89	; 137
    291a:	ff 4f       	sbci	r31, 0xFF	; 255
    291c:	60 81       	ld	r22, Z
    291e:	71 81       	ldd	r23, Z+1	; 0x01
    2920:	82 81       	ldd	r24, Z+2	; 0x02
    2922:	93 81       	ldd	r25, Z+3	; 0x03
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	3f ef       	ldi	r19, 0xFF	; 255
    2928:	4f e7       	ldi	r20, 0x7F	; 127
    292a:	57 e4       	ldi	r21, 0x47	; 71
    292c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2930:	18 16       	cp	r1, r24
    2932:	0c f0       	brlt	.+2      	; 0x2936 <main+0x350>
    2934:	43 c0       	rjmp	.+134    	; 0x29bc <main+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2936:	fe 01       	movw	r30, r28
    2938:	e5 58       	subi	r30, 0x85	; 133
    293a:	ff 4f       	sbci	r31, 0xFF	; 255
    293c:	60 81       	ld	r22, Z
    293e:	71 81       	ldd	r23, Z+1	; 0x01
    2940:	82 81       	ldd	r24, Z+2	; 0x02
    2942:	93 81       	ldd	r25, Z+3	; 0x03
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	40 e2       	ldi	r20, 0x20	; 32
    294a:	51 e4       	ldi	r21, 0x41	; 65
    294c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	8e 01       	movw	r16, r28
    2956:	0b 58       	subi	r16, 0x8B	; 139
    2958:	1f 4f       	sbci	r17, 0xFF	; 255
    295a:	bc 01       	movw	r22, r24
    295c:	cd 01       	movw	r24, r26
    295e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	f8 01       	movw	r30, r16
    2968:	91 83       	std	Z+1, r25	; 0x01
    296a:	80 83       	st	Z, r24
    296c:	1f c0       	rjmp	.+62     	; 0x29ac <main+0x3c6>
    296e:	fe 01       	movw	r30, r28
    2970:	ed 58       	subi	r30, 0x8D	; 141
    2972:	ff 4f       	sbci	r31, 0xFF	; 255
    2974:	88 ec       	ldi	r24, 0xC8	; 200
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	91 83       	std	Z+1, r25	; 0x01
    297a:	80 83       	st	Z, r24
    297c:	fe 01       	movw	r30, r28
    297e:	ed 58       	subi	r30, 0x8D	; 141
    2980:	ff 4f       	sbci	r31, 0xFF	; 255
    2982:	80 81       	ld	r24, Z
    2984:	91 81       	ldd	r25, Z+1	; 0x01
    2986:	01 97       	sbiw	r24, 0x01	; 1
    2988:	f1 f7       	brne	.-4      	; 0x2986 <main+0x3a0>
    298a:	fe 01       	movw	r30, r28
    298c:	ed 58       	subi	r30, 0x8D	; 141
    298e:	ff 4f       	sbci	r31, 0xFF	; 255
    2990:	91 83       	std	Z+1, r25	; 0x01
    2992:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2994:	de 01       	movw	r26, r28
    2996:	ab 58       	subi	r26, 0x8B	; 139
    2998:	bf 4f       	sbci	r27, 0xFF	; 255
    299a:	fe 01       	movw	r30, r28
    299c:	eb 58       	subi	r30, 0x8B	; 139
    299e:	ff 4f       	sbci	r31, 0xFF	; 255
    29a0:	80 81       	ld	r24, Z
    29a2:	91 81       	ldd	r25, Z+1	; 0x01
    29a4:	01 97       	sbiw	r24, 0x01	; 1
    29a6:	11 96       	adiw	r26, 0x01	; 1
    29a8:	9c 93       	st	X, r25
    29aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ac:	fe 01       	movw	r30, r28
    29ae:	eb 58       	subi	r30, 0x8B	; 139
    29b0:	ff 4f       	sbci	r31, 0xFF	; 255
    29b2:	80 81       	ld	r24, Z
    29b4:	91 81       	ldd	r25, Z+1	; 0x01
    29b6:	00 97       	sbiw	r24, 0x00	; 0
    29b8:	d1 f6       	brne	.-76     	; 0x296e <main+0x388>
    29ba:	27 c0       	rjmp	.+78     	; 0x2a0a <main+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29bc:	8e 01       	movw	r16, r28
    29be:	0b 58       	subi	r16, 0x8B	; 139
    29c0:	1f 4f       	sbci	r17, 0xFF	; 255
    29c2:	fe 01       	movw	r30, r28
    29c4:	e9 58       	subi	r30, 0x89	; 137
    29c6:	ff 4f       	sbci	r31, 0xFF	; 255
    29c8:	60 81       	ld	r22, Z
    29ca:	71 81       	ldd	r23, Z+1	; 0x01
    29cc:	82 81       	ldd	r24, Z+2	; 0x02
    29ce:	93 81       	ldd	r25, Z+3	; 0x03
    29d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	f8 01       	movw	r30, r16
    29da:	91 83       	std	Z+1, r25	; 0x01
    29dc:	80 83       	st	Z, r24
    29de:	de 01       	movw	r26, r28
    29e0:	af 58       	subi	r26, 0x8F	; 143
    29e2:	bf 4f       	sbci	r27, 0xFF	; 255
    29e4:	fe 01       	movw	r30, r28
    29e6:	eb 58       	subi	r30, 0x8B	; 139
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	80 81       	ld	r24, Z
    29ec:	91 81       	ldd	r25, Z+1	; 0x01
    29ee:	8d 93       	st	X+, r24
    29f0:	9c 93       	st	X, r25
    29f2:	fe 01       	movw	r30, r28
    29f4:	ef 58       	subi	r30, 0x8F	; 143
    29f6:	ff 4f       	sbci	r31, 0xFF	; 255
    29f8:	80 81       	ld	r24, Z
    29fa:	91 81       	ldd	r25, Z+1	; 0x01
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	f1 f7       	brne	.-4      	; 0x29fc <main+0x416>
    2a00:	fe 01       	movw	r30, r28
    2a02:	ef 58       	subi	r30, 0x8F	; 143
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	91 83       	std	Z+1, r25	; 0x01
    2a08:	80 83       	st	Z, r24
				_delay_ms(250);
				DIO_voidSetPinValue(DIO_PORTA, DIO_PIN4, DIO_LOW);
    2a0a:	80 e0       	ldi	r24, 0x00	; 0
    2a0c:	64 e0       	ldi	r22, 0x04	; 4
    2a0e:	40 e0       	ldi	r20, 0x00	; 0
    2a10:	0e 94 53 07 	call	0xea6	; 0xea6 <DIO_voidSetPinValue>
    2a14:	fe 01       	movw	r30, r28
    2a16:	e3 59       	subi	r30, 0x93	; 147
    2a18:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1a:	80 e0       	ldi	r24, 0x00	; 0
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	aa e7       	ldi	r26, 0x7A	; 122
    2a20:	b3 e4       	ldi	r27, 0x43	; 67
    2a22:	80 83       	st	Z, r24
    2a24:	91 83       	std	Z+1, r25	; 0x01
    2a26:	a2 83       	std	Z+2, r26	; 0x02
    2a28:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a2a:	8e 01       	movw	r16, r28
    2a2c:	07 59       	subi	r16, 0x97	; 151
    2a2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a30:	fe 01       	movw	r30, r28
    2a32:	e3 59       	subi	r30, 0x93	; 147
    2a34:	ff 4f       	sbci	r31, 0xFF	; 255
    2a36:	60 81       	ld	r22, Z
    2a38:	71 81       	ldd	r23, Z+1	; 0x01
    2a3a:	82 81       	ldd	r24, Z+2	; 0x02
    2a3c:	93 81       	ldd	r25, Z+3	; 0x03
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	4a ef       	ldi	r20, 0xFA	; 250
    2a44:	54 e4       	ldi	r21, 0x44	; 68
    2a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	f8 01       	movw	r30, r16
    2a50:	80 83       	st	Z, r24
    2a52:	91 83       	std	Z+1, r25	; 0x01
    2a54:	a2 83       	std	Z+2, r26	; 0x02
    2a56:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a58:	fe 01       	movw	r30, r28
    2a5a:	e7 59       	subi	r30, 0x97	; 151
    2a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5e:	60 81       	ld	r22, Z
    2a60:	71 81       	ldd	r23, Z+1	; 0x01
    2a62:	82 81       	ldd	r24, Z+2	; 0x02
    2a64:	93 81       	ldd	r25, Z+3	; 0x03
    2a66:	20 e0       	ldi	r18, 0x00	; 0
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	40 e8       	ldi	r20, 0x80	; 128
    2a6c:	5f e3       	ldi	r21, 0x3F	; 63
    2a6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a72:	88 23       	and	r24, r24
    2a74:	44 f4       	brge	.+16     	; 0x2a86 <main+0x4a0>
		__ticks = 1;
    2a76:	fe 01       	movw	r30, r28
    2a78:	e9 59       	subi	r30, 0x99	; 153
    2a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	91 83       	std	Z+1, r25	; 0x01
    2a82:	80 83       	st	Z, r24
    2a84:	64 c0       	rjmp	.+200    	; 0x2b4e <main+0x568>
	else if (__tmp > 65535)
    2a86:	fe 01       	movw	r30, r28
    2a88:	e7 59       	subi	r30, 0x97	; 151
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8c:	60 81       	ld	r22, Z
    2a8e:	71 81       	ldd	r23, Z+1	; 0x01
    2a90:	82 81       	ldd	r24, Z+2	; 0x02
    2a92:	93 81       	ldd	r25, Z+3	; 0x03
    2a94:	20 e0       	ldi	r18, 0x00	; 0
    2a96:	3f ef       	ldi	r19, 0xFF	; 255
    2a98:	4f e7       	ldi	r20, 0x7F	; 127
    2a9a:	57 e4       	ldi	r21, 0x47	; 71
    2a9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aa0:	18 16       	cp	r1, r24
    2aa2:	0c f0       	brlt	.+2      	; 0x2aa6 <main+0x4c0>
    2aa4:	43 c0       	rjmp	.+134    	; 0x2b2c <main+0x546>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa6:	fe 01       	movw	r30, r28
    2aa8:	e3 59       	subi	r30, 0x93	; 147
    2aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2aac:	60 81       	ld	r22, Z
    2aae:	71 81       	ldd	r23, Z+1	; 0x01
    2ab0:	82 81       	ldd	r24, Z+2	; 0x02
    2ab2:	93 81       	ldd	r25, Z+3	; 0x03
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	40 e2       	ldi	r20, 0x20	; 32
    2aba:	51 e4       	ldi	r21, 0x41	; 65
    2abc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	8e 01       	movw	r16, r28
    2ac6:	09 59       	subi	r16, 0x99	; 153
    2ac8:	1f 4f       	sbci	r17, 0xFF	; 255
    2aca:	bc 01       	movw	r22, r24
    2acc:	cd 01       	movw	r24, r26
    2ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad2:	dc 01       	movw	r26, r24
    2ad4:	cb 01       	movw	r24, r22
    2ad6:	f8 01       	movw	r30, r16
    2ad8:	91 83       	std	Z+1, r25	; 0x01
    2ada:	80 83       	st	Z, r24
    2adc:	1f c0       	rjmp	.+62     	; 0x2b1c <main+0x536>
    2ade:	fe 01       	movw	r30, r28
    2ae0:	eb 59       	subi	r30, 0x9B	; 155
    2ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae4:	88 ec       	ldi	r24, 0xC8	; 200
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	91 83       	std	Z+1, r25	; 0x01
    2aea:	80 83       	st	Z, r24
    2aec:	fe 01       	movw	r30, r28
    2aee:	eb 59       	subi	r30, 0x9B	; 155
    2af0:	ff 4f       	sbci	r31, 0xFF	; 255
    2af2:	80 81       	ld	r24, Z
    2af4:	91 81       	ldd	r25, Z+1	; 0x01
    2af6:	01 97       	sbiw	r24, 0x01	; 1
    2af8:	f1 f7       	brne	.-4      	; 0x2af6 <main+0x510>
    2afa:	fe 01       	movw	r30, r28
    2afc:	eb 59       	subi	r30, 0x9B	; 155
    2afe:	ff 4f       	sbci	r31, 0xFF	; 255
    2b00:	91 83       	std	Z+1, r25	; 0x01
    2b02:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b04:	de 01       	movw	r26, r28
    2b06:	a9 59       	subi	r26, 0x99	; 153
    2b08:	bf 4f       	sbci	r27, 0xFF	; 255
    2b0a:	fe 01       	movw	r30, r28
    2b0c:	e9 59       	subi	r30, 0x99	; 153
    2b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b10:	80 81       	ld	r24, Z
    2b12:	91 81       	ldd	r25, Z+1	; 0x01
    2b14:	01 97       	sbiw	r24, 0x01	; 1
    2b16:	11 96       	adiw	r26, 0x01	; 1
    2b18:	9c 93       	st	X, r25
    2b1a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b1c:	fe 01       	movw	r30, r28
    2b1e:	e9 59       	subi	r30, 0x99	; 153
    2b20:	ff 4f       	sbci	r31, 0xFF	; 255
    2b22:	80 81       	ld	r24, Z
    2b24:	91 81       	ldd	r25, Z+1	; 0x01
    2b26:	00 97       	sbiw	r24, 0x00	; 0
    2b28:	d1 f6       	brne	.-76     	; 0x2ade <main+0x4f8>
    2b2a:	27 c0       	rjmp	.+78     	; 0x2b7a <main+0x594>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b2c:	8e 01       	movw	r16, r28
    2b2e:	09 59       	subi	r16, 0x99	; 153
    2b30:	1f 4f       	sbci	r17, 0xFF	; 255
    2b32:	fe 01       	movw	r30, r28
    2b34:	e7 59       	subi	r30, 0x97	; 151
    2b36:	ff 4f       	sbci	r31, 0xFF	; 255
    2b38:	60 81       	ld	r22, Z
    2b3a:	71 81       	ldd	r23, Z+1	; 0x01
    2b3c:	82 81       	ldd	r24, Z+2	; 0x02
    2b3e:	93 81       	ldd	r25, Z+3	; 0x03
    2b40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	f8 01       	movw	r30, r16
    2b4a:	91 83       	std	Z+1, r25	; 0x01
    2b4c:	80 83       	st	Z, r24
    2b4e:	de 01       	movw	r26, r28
    2b50:	ad 59       	subi	r26, 0x9D	; 157
    2b52:	bf 4f       	sbci	r27, 0xFF	; 255
    2b54:	fe 01       	movw	r30, r28
    2b56:	e9 59       	subi	r30, 0x99	; 153
    2b58:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5a:	80 81       	ld	r24, Z
    2b5c:	91 81       	ldd	r25, Z+1	; 0x01
    2b5e:	8d 93       	st	X+, r24
    2b60:	9c 93       	st	X, r25
    2b62:	fe 01       	movw	r30, r28
    2b64:	ed 59       	subi	r30, 0x9D	; 157
    2b66:	ff 4f       	sbci	r31, 0xFF	; 255
    2b68:	80 81       	ld	r24, Z
    2b6a:	91 81       	ldd	r25, Z+1	; 0x01
    2b6c:	01 97       	sbiw	r24, 0x01	; 1
    2b6e:	f1 f7       	brne	.-4      	; 0x2b6c <main+0x586>
    2b70:	fe 01       	movw	r30, r28
    2b72:	ed 59       	subi	r30, 0x9D	; 157
    2b74:	ff 4f       	sbci	r31, 0xFF	; 255
    2b76:	91 83       	std	Z+1, r25	; 0x01
    2b78:	80 83       	st	Z, r24
			    _delay_ms(250);
			    LCD_voidSendCommand(CLEAR);
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_voidSendCommand>
    2b80:	fe 01       	movw	r30, r28
    2b82:	e1 5a       	subi	r30, 0xA1	; 161
    2b84:	ff 4f       	sbci	r31, 0xFF	; 255
    2b86:	80 e0       	ldi	r24, 0x00	; 0
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	a0 e0       	ldi	r26, 0x00	; 0
    2b8c:	b0 e4       	ldi	r27, 0x40	; 64
    2b8e:	80 83       	st	Z, r24
    2b90:	91 83       	std	Z+1, r25	; 0x01
    2b92:	a2 83       	std	Z+2, r26	; 0x02
    2b94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b96:	8e 01       	movw	r16, r28
    2b98:	05 5a       	subi	r16, 0xA5	; 165
    2b9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b9c:	fe 01       	movw	r30, r28
    2b9e:	e1 5a       	subi	r30, 0xA1	; 161
    2ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba2:	60 81       	ld	r22, Z
    2ba4:	71 81       	ldd	r23, Z+1	; 0x01
    2ba6:	82 81       	ldd	r24, Z+2	; 0x02
    2ba8:	93 81       	ldd	r25, Z+3	; 0x03
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	4a ef       	ldi	r20, 0xFA	; 250
    2bb0:	54 e4       	ldi	r21, 0x44	; 68
    2bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	f8 01       	movw	r30, r16
    2bbc:	80 83       	st	Z, r24
    2bbe:	91 83       	std	Z+1, r25	; 0x01
    2bc0:	a2 83       	std	Z+2, r26	; 0x02
    2bc2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bc4:	fe 01       	movw	r30, r28
    2bc6:	e5 5a       	subi	r30, 0xA5	; 165
    2bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bca:	60 81       	ld	r22, Z
    2bcc:	71 81       	ldd	r23, Z+1	; 0x01
    2bce:	82 81       	ldd	r24, Z+2	; 0x02
    2bd0:	93 81       	ldd	r25, Z+3	; 0x03
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	40 e8       	ldi	r20, 0x80	; 128
    2bd8:	5f e3       	ldi	r21, 0x3F	; 63
    2bda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bde:	88 23       	and	r24, r24
    2be0:	44 f4       	brge	.+16     	; 0x2bf2 <main+0x60c>
		__ticks = 1;
    2be2:	fe 01       	movw	r30, r28
    2be4:	e7 5a       	subi	r30, 0xA7	; 167
    2be6:	ff 4f       	sbci	r31, 0xFF	; 255
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	91 83       	std	Z+1, r25	; 0x01
    2bee:	80 83       	st	Z, r24
    2bf0:	64 c0       	rjmp	.+200    	; 0x2cba <main+0x6d4>
	else if (__tmp > 65535)
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	e5 5a       	subi	r30, 0xA5	; 165
    2bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf8:	60 81       	ld	r22, Z
    2bfa:	71 81       	ldd	r23, Z+1	; 0x01
    2bfc:	82 81       	ldd	r24, Z+2	; 0x02
    2bfe:	93 81       	ldd	r25, Z+3	; 0x03
    2c00:	20 e0       	ldi	r18, 0x00	; 0
    2c02:	3f ef       	ldi	r19, 0xFF	; 255
    2c04:	4f e7       	ldi	r20, 0x7F	; 127
    2c06:	57 e4       	ldi	r21, 0x47	; 71
    2c08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c0c:	18 16       	cp	r1, r24
    2c0e:	0c f0       	brlt	.+2      	; 0x2c12 <main+0x62c>
    2c10:	43 c0       	rjmp	.+134    	; 0x2c98 <main+0x6b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c12:	fe 01       	movw	r30, r28
    2c14:	e1 5a       	subi	r30, 0xA1	; 161
    2c16:	ff 4f       	sbci	r31, 0xFF	; 255
    2c18:	60 81       	ld	r22, Z
    2c1a:	71 81       	ldd	r23, Z+1	; 0x01
    2c1c:	82 81       	ldd	r24, Z+2	; 0x02
    2c1e:	93 81       	ldd	r25, Z+3	; 0x03
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	40 e2       	ldi	r20, 0x20	; 32
    2c26:	51 e4       	ldi	r21, 0x41	; 65
    2c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c2c:	dc 01       	movw	r26, r24
    2c2e:	cb 01       	movw	r24, r22
    2c30:	8e 01       	movw	r16, r28
    2c32:	07 5a       	subi	r16, 0xA7	; 167
    2c34:	1f 4f       	sbci	r17, 0xFF	; 255
    2c36:	bc 01       	movw	r22, r24
    2c38:	cd 01       	movw	r24, r26
    2c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	f8 01       	movw	r30, r16
    2c44:	91 83       	std	Z+1, r25	; 0x01
    2c46:	80 83       	st	Z, r24
    2c48:	1f c0       	rjmp	.+62     	; 0x2c88 <main+0x6a2>
    2c4a:	fe 01       	movw	r30, r28
    2c4c:	e9 5a       	subi	r30, 0xA9	; 169
    2c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c50:	88 ec       	ldi	r24, 0xC8	; 200
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	91 83       	std	Z+1, r25	; 0x01
    2c56:	80 83       	st	Z, r24
    2c58:	fe 01       	movw	r30, r28
    2c5a:	e9 5a       	subi	r30, 0xA9	; 169
    2c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5e:	80 81       	ld	r24, Z
    2c60:	91 81       	ldd	r25, Z+1	; 0x01
    2c62:	01 97       	sbiw	r24, 0x01	; 1
    2c64:	f1 f7       	brne	.-4      	; 0x2c62 <main+0x67c>
    2c66:	fe 01       	movw	r30, r28
    2c68:	e9 5a       	subi	r30, 0xA9	; 169
    2c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6c:	91 83       	std	Z+1, r25	; 0x01
    2c6e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c70:	de 01       	movw	r26, r28
    2c72:	a7 5a       	subi	r26, 0xA7	; 167
    2c74:	bf 4f       	sbci	r27, 0xFF	; 255
    2c76:	fe 01       	movw	r30, r28
    2c78:	e7 5a       	subi	r30, 0xA7	; 167
    2c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7c:	80 81       	ld	r24, Z
    2c7e:	91 81       	ldd	r25, Z+1	; 0x01
    2c80:	01 97       	sbiw	r24, 0x01	; 1
    2c82:	11 96       	adiw	r26, 0x01	; 1
    2c84:	9c 93       	st	X, r25
    2c86:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c88:	fe 01       	movw	r30, r28
    2c8a:	e7 5a       	subi	r30, 0xA7	; 167
    2c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8e:	80 81       	ld	r24, Z
    2c90:	91 81       	ldd	r25, Z+1	; 0x01
    2c92:	00 97       	sbiw	r24, 0x00	; 0
    2c94:	d1 f6       	brne	.-76     	; 0x2c4a <main+0x664>
    2c96:	27 c0       	rjmp	.+78     	; 0x2ce6 <main+0x700>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c98:	8e 01       	movw	r16, r28
    2c9a:	07 5a       	subi	r16, 0xA7	; 167
    2c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c9e:	fe 01       	movw	r30, r28
    2ca0:	e5 5a       	subi	r30, 0xA5	; 165
    2ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca4:	60 81       	ld	r22, Z
    2ca6:	71 81       	ldd	r23, Z+1	; 0x01
    2ca8:	82 81       	ldd	r24, Z+2	; 0x02
    2caa:	93 81       	ldd	r25, Z+3	; 0x03
    2cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	f8 01       	movw	r30, r16
    2cb6:	91 83       	std	Z+1, r25	; 0x01
    2cb8:	80 83       	st	Z, r24
    2cba:	de 01       	movw	r26, r28
    2cbc:	ab 5a       	subi	r26, 0xAB	; 171
    2cbe:	bf 4f       	sbci	r27, 0xFF	; 255
    2cc0:	fe 01       	movw	r30, r28
    2cc2:	e7 5a       	subi	r30, 0xA7	; 167
    2cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc6:	80 81       	ld	r24, Z
    2cc8:	91 81       	ldd	r25, Z+1	; 0x01
    2cca:	8d 93       	st	X+, r24
    2ccc:	9c 93       	st	X, r25
    2cce:	fe 01       	movw	r30, r28
    2cd0:	eb 5a       	subi	r30, 0xAB	; 171
    2cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd4:	80 81       	ld	r24, Z
    2cd6:	91 81       	ldd	r25, Z+1	; 0x01
    2cd8:	01 97       	sbiw	r24, 0x01	; 1
    2cda:	f1 f7       	brne	.-4      	; 0x2cd8 <main+0x6f2>
    2cdc:	fe 01       	movw	r30, r28
    2cde:	eb 5a       	subi	r30, 0xAB	; 171
    2ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce2:	91 83       	std	Z+1, r25	; 0x01
    2ce4:	80 83       	st	Z, r24
			    _delay_ms(2);
			    LCD_voidSendString("Enter pass:");
    2ce6:	80 e6       	ldi	r24, 0x60	; 96
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <LCD_voidSendString>
    2cee:	fb cc       	rjmp	.-1546   	; 0x26e6 <main+0x100>
			 * Set the flag to 1 in case of wrong input
			 */
			else{


			LCD_voidSendChar('*');
    2cf0:	8a e2       	ldi	r24, 0x2A	; 42
    2cf2:	0e 94 57 0e 	call	0x1cae	; 0x1cae <LCD_voidSendChar>

			if(input != currentPass[i])
    2cf6:	fe 01       	movw	r30, r28
    2cf8:	e1 57       	subi	r30, 0x71	; 113
    2cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfc:	80 81       	ld	r24, Z
    2cfe:	28 2f       	mov	r18, r24
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	ce 01       	movw	r24, r28
    2d04:	8f 56       	subi	r24, 0x6F	; 111
    2d06:	9f 4f       	sbci	r25, 0xFF	; 255
    2d08:	fc 01       	movw	r30, r24
    2d0a:	e2 0f       	add	r30, r18
    2d0c:	f3 1f       	adc	r31, r19
    2d0e:	90 81       	ld	r25, Z
    2d10:	fe 01       	movw	r30, r28
    2d12:	e0 57       	subi	r30, 0x70	; 112
    2d14:	ff 4f       	sbci	r31, 0xFF	; 255
    2d16:	80 81       	ld	r24, Z
    2d18:	98 17       	cp	r25, r24
    2d1a:	29 f0       	breq	.+10     	; 0x2d26 <main+0x740>
			{
				wrong = 1;
    2d1c:	fe 01       	movw	r30, r28
    2d1e:	e2 57       	subi	r30, 0x72	; 114
    2d20:	ff 4f       	sbci	r31, 0xFF	; 255
    2d22:	81 e0       	ldi	r24, 0x01	; 1
    2d24:	80 83       	st	Z, r24
			}
			i++;
    2d26:	de 01       	movw	r26, r28
    2d28:	a1 57       	subi	r26, 0x71	; 113
    2d2a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d2c:	fe 01       	movw	r30, r28
    2d2e:	e1 57       	subi	r30, 0x71	; 113
    2d30:	ff 4f       	sbci	r31, 0xFF	; 255
    2d32:	80 81       	ld	r24, Z
    2d34:	8f 5f       	subi	r24, 0xFF	; 255
    2d36:	8c 93       	st	X, r24

			// Check the flag and display the output on the LCD
			if (i == 4)
    2d38:	fe 01       	movw	r30, r28
    2d3a:	e1 57       	subi	r30, 0x71	; 113
    2d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3e:	80 81       	ld	r24, Z
    2d40:	84 30       	cpi	r24, 0x04	; 4
    2d42:	09 f0       	breq	.+2      	; 0x2d46 <main+0x760>
    2d44:	d0 cc       	rjmp	.-1632   	; 0x26e6 <main+0x100>
			{
				LCD_voidSendCommand(CLEAR);
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_voidSendCommand>
    2d4c:	fe 01       	movw	r30, r28
    2d4e:	ef 5a       	subi	r30, 0xAF	; 175
    2d50:	ff 4f       	sbci	r31, 0xFF	; 255
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	a0 e0       	ldi	r26, 0x00	; 0
    2d58:	b0 e4       	ldi	r27, 0x40	; 64
    2d5a:	80 83       	st	Z, r24
    2d5c:	91 83       	std	Z+1, r25	; 0x01
    2d5e:	a2 83       	std	Z+2, r26	; 0x02
    2d60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d62:	8e 01       	movw	r16, r28
    2d64:	03 5b       	subi	r16, 0xB3	; 179
    2d66:	1f 4f       	sbci	r17, 0xFF	; 255
    2d68:	fe 01       	movw	r30, r28
    2d6a:	ef 5a       	subi	r30, 0xAF	; 175
    2d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6e:	60 81       	ld	r22, Z
    2d70:	71 81       	ldd	r23, Z+1	; 0x01
    2d72:	82 81       	ldd	r24, Z+2	; 0x02
    2d74:	93 81       	ldd	r25, Z+3	; 0x03
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	4a ef       	ldi	r20, 0xFA	; 250
    2d7c:	54 e4       	ldi	r21, 0x44	; 68
    2d7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	f8 01       	movw	r30, r16
    2d88:	80 83       	st	Z, r24
    2d8a:	91 83       	std	Z+1, r25	; 0x01
    2d8c:	a2 83       	std	Z+2, r26	; 0x02
    2d8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d90:	fe 01       	movw	r30, r28
    2d92:	e3 5b       	subi	r30, 0xB3	; 179
    2d94:	ff 4f       	sbci	r31, 0xFF	; 255
    2d96:	60 81       	ld	r22, Z
    2d98:	71 81       	ldd	r23, Z+1	; 0x01
    2d9a:	82 81       	ldd	r24, Z+2	; 0x02
    2d9c:	93 81       	ldd	r25, Z+3	; 0x03
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	40 e8       	ldi	r20, 0x80	; 128
    2da4:	5f e3       	ldi	r21, 0x3F	; 63
    2da6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2daa:	88 23       	and	r24, r24
    2dac:	44 f4       	brge	.+16     	; 0x2dbe <main+0x7d8>
		__ticks = 1;
    2dae:	fe 01       	movw	r30, r28
    2db0:	e5 5b       	subi	r30, 0xB5	; 181
    2db2:	ff 4f       	sbci	r31, 0xFF	; 255
    2db4:	81 e0       	ldi	r24, 0x01	; 1
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	91 83       	std	Z+1, r25	; 0x01
    2dba:	80 83       	st	Z, r24
    2dbc:	64 c0       	rjmp	.+200    	; 0x2e86 <main+0x8a0>
	else if (__tmp > 65535)
    2dbe:	fe 01       	movw	r30, r28
    2dc0:	e3 5b       	subi	r30, 0xB3	; 179
    2dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc4:	60 81       	ld	r22, Z
    2dc6:	71 81       	ldd	r23, Z+1	; 0x01
    2dc8:	82 81       	ldd	r24, Z+2	; 0x02
    2dca:	93 81       	ldd	r25, Z+3	; 0x03
    2dcc:	20 e0       	ldi	r18, 0x00	; 0
    2dce:	3f ef       	ldi	r19, 0xFF	; 255
    2dd0:	4f e7       	ldi	r20, 0x7F	; 127
    2dd2:	57 e4       	ldi	r21, 0x47	; 71
    2dd4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dd8:	18 16       	cp	r1, r24
    2dda:	0c f0       	brlt	.+2      	; 0x2dde <main+0x7f8>
    2ddc:	43 c0       	rjmp	.+134    	; 0x2e64 <main+0x87e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dde:	fe 01       	movw	r30, r28
    2de0:	ef 5a       	subi	r30, 0xAF	; 175
    2de2:	ff 4f       	sbci	r31, 0xFF	; 255
    2de4:	60 81       	ld	r22, Z
    2de6:	71 81       	ldd	r23, Z+1	; 0x01
    2de8:	82 81       	ldd	r24, Z+2	; 0x02
    2dea:	93 81       	ldd	r25, Z+3	; 0x03
    2dec:	20 e0       	ldi	r18, 0x00	; 0
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	40 e2       	ldi	r20, 0x20	; 32
    2df2:	51 e4       	ldi	r21, 0x41	; 65
    2df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	8e 01       	movw	r16, r28
    2dfe:	05 5b       	subi	r16, 0xB5	; 181
    2e00:	1f 4f       	sbci	r17, 0xFF	; 255
    2e02:	bc 01       	movw	r22, r24
    2e04:	cd 01       	movw	r24, r26
    2e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e0a:	dc 01       	movw	r26, r24
    2e0c:	cb 01       	movw	r24, r22
    2e0e:	f8 01       	movw	r30, r16
    2e10:	91 83       	std	Z+1, r25	; 0x01
    2e12:	80 83       	st	Z, r24
    2e14:	1f c0       	rjmp	.+62     	; 0x2e54 <main+0x86e>
    2e16:	fe 01       	movw	r30, r28
    2e18:	e7 5b       	subi	r30, 0xB7	; 183
    2e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1c:	88 ec       	ldi	r24, 0xC8	; 200
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	91 83       	std	Z+1, r25	; 0x01
    2e22:	80 83       	st	Z, r24
    2e24:	fe 01       	movw	r30, r28
    2e26:	e7 5b       	subi	r30, 0xB7	; 183
    2e28:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2a:	80 81       	ld	r24, Z
    2e2c:	91 81       	ldd	r25, Z+1	; 0x01
    2e2e:	01 97       	sbiw	r24, 0x01	; 1
    2e30:	f1 f7       	brne	.-4      	; 0x2e2e <main+0x848>
    2e32:	fe 01       	movw	r30, r28
    2e34:	e7 5b       	subi	r30, 0xB7	; 183
    2e36:	ff 4f       	sbci	r31, 0xFF	; 255
    2e38:	91 83       	std	Z+1, r25	; 0x01
    2e3a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e3c:	de 01       	movw	r26, r28
    2e3e:	a5 5b       	subi	r26, 0xB5	; 181
    2e40:	bf 4f       	sbci	r27, 0xFF	; 255
    2e42:	fe 01       	movw	r30, r28
    2e44:	e5 5b       	subi	r30, 0xB5	; 181
    2e46:	ff 4f       	sbci	r31, 0xFF	; 255
    2e48:	80 81       	ld	r24, Z
    2e4a:	91 81       	ldd	r25, Z+1	; 0x01
    2e4c:	01 97       	sbiw	r24, 0x01	; 1
    2e4e:	11 96       	adiw	r26, 0x01	; 1
    2e50:	9c 93       	st	X, r25
    2e52:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e54:	fe 01       	movw	r30, r28
    2e56:	e5 5b       	subi	r30, 0xB5	; 181
    2e58:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5a:	80 81       	ld	r24, Z
    2e5c:	91 81       	ldd	r25, Z+1	; 0x01
    2e5e:	00 97       	sbiw	r24, 0x00	; 0
    2e60:	d1 f6       	brne	.-76     	; 0x2e16 <main+0x830>
    2e62:	28 c0       	rjmp	.+80     	; 0x2eb4 <main+0x8ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e64:	8e 01       	movw	r16, r28
    2e66:	05 5b       	subi	r16, 0xB5	; 181
    2e68:	1f 4f       	sbci	r17, 0xFF	; 255
    2e6a:	fe 01       	movw	r30, r28
    2e6c:	e3 5b       	subi	r30, 0xB3	; 179
    2e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e70:	60 81       	ld	r22, Z
    2e72:	71 81       	ldd	r23, Z+1	; 0x01
    2e74:	82 81       	ldd	r24, Z+2	; 0x02
    2e76:	93 81       	ldd	r25, Z+3	; 0x03
    2e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	cb 01       	movw	r24, r22
    2e80:	f8 01       	movw	r30, r16
    2e82:	91 83       	std	Z+1, r25	; 0x01
    2e84:	80 83       	st	Z, r24
    2e86:	de 01       	movw	r26, r28
    2e88:	a9 5b       	subi	r26, 0xB9	; 185
    2e8a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e8c:	fe 01       	movw	r30, r28
    2e8e:	e5 5b       	subi	r30, 0xB5	; 181
    2e90:	ff 4f       	sbci	r31, 0xFF	; 255
    2e92:	80 81       	ld	r24, Z
    2e94:	91 81       	ldd	r25, Z+1	; 0x01
    2e96:	11 96       	adiw	r26, 0x01	; 1
    2e98:	9c 93       	st	X, r25
    2e9a:	8e 93       	st	-X, r24
    2e9c:	fe 01       	movw	r30, r28
    2e9e:	e9 5b       	subi	r30, 0xB9	; 185
    2ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea2:	80 81       	ld	r24, Z
    2ea4:	91 81       	ldd	r25, Z+1	; 0x01
    2ea6:	01 97       	sbiw	r24, 0x01	; 1
    2ea8:	f1 f7       	brne	.-4      	; 0x2ea6 <main+0x8c0>
    2eaa:	fe 01       	movw	r30, r28
    2eac:	e9 5b       	subi	r30, 0xB9	; 185
    2eae:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb0:	91 83       	std	Z+1, r25	; 0x01
    2eb2:	80 83       	st	Z, r24
					_delay_ms(2);

				if (wrong == 0)
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	e2 57       	subi	r30, 0x72	; 114
    2eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eba:	80 81       	ld	r24, Z
    2ebc:	88 23       	and	r24, r24
    2ebe:	09 f0       	breq	.+2      	; 0x2ec2 <main+0x8dc>
    2ec0:	80 c1       	rjmp	.+768    	; 0x31c2 <main+0xbdc>
				{
					 LCD_voidSendString("Welcome");
    2ec2:	82 e7       	ldi	r24, 0x72	; 114
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <LCD_voidSendString>
					 UART_voidSendData('A');
    2eca:	81 e4       	ldi	r24, 0x41	; 65
    2ecc:	0e 94 ca 12 	call	0x2594	; 0x2594 <UART_voidSendData>
    2ed0:	fe 01       	movw	r30, r28
    2ed2:	ed 5b       	subi	r30, 0xBD	; 189
    2ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed6:	80 e0       	ldi	r24, 0x00	; 0
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	aa e7       	ldi	r26, 0x7A	; 122
    2edc:	b4 e4       	ldi	r27, 0x44	; 68
    2ede:	80 83       	st	Z, r24
    2ee0:	91 83       	std	Z+1, r25	; 0x01
    2ee2:	a2 83       	std	Z+2, r26	; 0x02
    2ee4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee6:	8e 01       	movw	r16, r28
    2ee8:	01 5c       	subi	r16, 0xC1	; 193
    2eea:	1f 4f       	sbci	r17, 0xFF	; 255
    2eec:	fe 01       	movw	r30, r28
    2eee:	ed 5b       	subi	r30, 0xBD	; 189
    2ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef2:	60 81       	ld	r22, Z
    2ef4:	71 81       	ldd	r23, Z+1	; 0x01
    2ef6:	82 81       	ldd	r24, Z+2	; 0x02
    2ef8:	93 81       	ldd	r25, Z+3	; 0x03
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	4a ef       	ldi	r20, 0xFA	; 250
    2f00:	54 e4       	ldi	r21, 0x44	; 68
    2f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	f8 01       	movw	r30, r16
    2f0c:	80 83       	st	Z, r24
    2f0e:	91 83       	std	Z+1, r25	; 0x01
    2f10:	a2 83       	std	Z+2, r26	; 0x02
    2f12:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f14:	fe 01       	movw	r30, r28
    2f16:	ff 96       	adiw	r30, 0x3f	; 63
    2f18:	60 81       	ld	r22, Z
    2f1a:	71 81       	ldd	r23, Z+1	; 0x01
    2f1c:	82 81       	ldd	r24, Z+2	; 0x02
    2f1e:	93 81       	ldd	r25, Z+3	; 0x03
    2f20:	20 e0       	ldi	r18, 0x00	; 0
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	40 e8       	ldi	r20, 0x80	; 128
    2f26:	5f e3       	ldi	r21, 0x3F	; 63
    2f28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f2c:	88 23       	and	r24, r24
    2f2e:	2c f4       	brge	.+10     	; 0x2f3a <main+0x954>
		__ticks = 1;
    2f30:	81 e0       	ldi	r24, 0x01	; 1
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	9e af       	std	Y+62, r25	; 0x3e
    2f36:	8d af       	std	Y+61, r24	; 0x3d
    2f38:	46 c0       	rjmp	.+140    	; 0x2fc6 <main+0x9e0>
	else if (__tmp > 65535)
    2f3a:	fe 01       	movw	r30, r28
    2f3c:	ff 96       	adiw	r30, 0x3f	; 63
    2f3e:	60 81       	ld	r22, Z
    2f40:	71 81       	ldd	r23, Z+1	; 0x01
    2f42:	82 81       	ldd	r24, Z+2	; 0x02
    2f44:	93 81       	ldd	r25, Z+3	; 0x03
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	3f ef       	ldi	r19, 0xFF	; 255
    2f4a:	4f e7       	ldi	r20, 0x7F	; 127
    2f4c:	57 e4       	ldi	r21, 0x47	; 71
    2f4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f52:	18 16       	cp	r1, r24
    2f54:	64 f5       	brge	.+88     	; 0x2fae <main+0x9c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f56:	fe 01       	movw	r30, r28
    2f58:	ed 5b       	subi	r30, 0xBD	; 189
    2f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5c:	60 81       	ld	r22, Z
    2f5e:	71 81       	ldd	r23, Z+1	; 0x01
    2f60:	82 81       	ldd	r24, Z+2	; 0x02
    2f62:	93 81       	ldd	r25, Z+3	; 0x03
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	40 e2       	ldi	r20, 0x20	; 32
    2f6a:	51 e4       	ldi	r21, 0x41	; 65
    2f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f70:	dc 01       	movw	r26, r24
    2f72:	cb 01       	movw	r24, r22
    2f74:	bc 01       	movw	r22, r24
    2f76:	cd 01       	movw	r24, r26
    2f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	cb 01       	movw	r24, r22
    2f80:	9e af       	std	Y+62, r25	; 0x3e
    2f82:	8d af       	std	Y+61, r24	; 0x3d
    2f84:	0f c0       	rjmp	.+30     	; 0x2fa4 <main+0x9be>
    2f86:	88 ec       	ldi	r24, 0xC8	; 200
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	9c af       	std	Y+60, r25	; 0x3c
    2f8c:	8b af       	std	Y+59, r24	; 0x3b
    2f8e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2f90:	9c ad       	ldd	r25, Y+60	; 0x3c
    2f92:	01 97       	sbiw	r24, 0x01	; 1
    2f94:	f1 f7       	brne	.-4      	; 0x2f92 <main+0x9ac>
    2f96:	9c af       	std	Y+60, r25	; 0x3c
    2f98:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f9a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f9c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f9e:	01 97       	sbiw	r24, 0x01	; 1
    2fa0:	9e af       	std	Y+62, r25	; 0x3e
    2fa2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fa6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fa8:	00 97       	sbiw	r24, 0x00	; 0
    2faa:	69 f7       	brne	.-38     	; 0x2f86 <main+0x9a0>
    2fac:	16 c0       	rjmp	.+44     	; 0x2fda <main+0x9f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fae:	fe 01       	movw	r30, r28
    2fb0:	ff 96       	adiw	r30, 0x3f	; 63
    2fb2:	60 81       	ld	r22, Z
    2fb4:	71 81       	ldd	r23, Z+1	; 0x01
    2fb6:	82 81       	ldd	r24, Z+2	; 0x02
    2fb8:	93 81       	ldd	r25, Z+3	; 0x03
    2fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	9e af       	std	Y+62, r25	; 0x3e
    2fc4:	8d af       	std	Y+61, r24	; 0x3d
    2fc6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fc8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fca:	9a af       	std	Y+58, r25	; 0x3a
    2fcc:	89 af       	std	Y+57, r24	; 0x39
    2fce:	89 ad       	ldd	r24, Y+57	; 0x39
    2fd0:	9a ad       	ldd	r25, Y+58	; 0x3a
    2fd2:	01 97       	sbiw	r24, 0x01	; 1
    2fd4:	f1 f7       	brne	.-4      	; 0x2fd2 <main+0x9ec>
    2fd6:	9a af       	std	Y+58, r25	; 0x3a
    2fd8:	89 af       	std	Y+57, r24	; 0x39
					 _delay_ms(1000);
					 TMR1_voidOCR1A(1500);
    2fda:	8c ed       	ldi	r24, 0xDC	; 220
    2fdc:	95 e0       	ldi	r25, 0x05	; 5
    2fde:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <TMR1_voidOCR1A>
    2fe2:	80 e0       	ldi	r24, 0x00	; 0
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	aa ef       	ldi	r26, 0xFA	; 250
    2fe8:	b4 e4       	ldi	r27, 0x44	; 68
    2fea:	8d ab       	std	Y+53, r24	; 0x35
    2fec:	9e ab       	std	Y+54, r25	; 0x36
    2fee:	af ab       	std	Y+55, r26	; 0x37
    2ff0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff2:	6d a9       	ldd	r22, Y+53	; 0x35
    2ff4:	7e a9       	ldd	r23, Y+54	; 0x36
    2ff6:	8f a9       	ldd	r24, Y+55	; 0x37
    2ff8:	98 ad       	ldd	r25, Y+56	; 0x38
    2ffa:	20 e0       	ldi	r18, 0x00	; 0
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	4a ef       	ldi	r20, 0xFA	; 250
    3000:	54 e4       	ldi	r21, 0x44	; 68
    3002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3006:	dc 01       	movw	r26, r24
    3008:	cb 01       	movw	r24, r22
    300a:	89 ab       	std	Y+49, r24	; 0x31
    300c:	9a ab       	std	Y+50, r25	; 0x32
    300e:	ab ab       	std	Y+51, r26	; 0x33
    3010:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3012:	69 a9       	ldd	r22, Y+49	; 0x31
    3014:	7a a9       	ldd	r23, Y+50	; 0x32
    3016:	8b a9       	ldd	r24, Y+51	; 0x33
    3018:	9c a9       	ldd	r25, Y+52	; 0x34
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	40 e8       	ldi	r20, 0x80	; 128
    3020:	5f e3       	ldi	r21, 0x3F	; 63
    3022:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3026:	88 23       	and	r24, r24
    3028:	2c f4       	brge	.+10     	; 0x3034 <main+0xa4e>
		__ticks = 1;
    302a:	81 e0       	ldi	r24, 0x01	; 1
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	98 ab       	std	Y+48, r25	; 0x30
    3030:	8f a7       	std	Y+47, r24	; 0x2f
    3032:	3f c0       	rjmp	.+126    	; 0x30b2 <main+0xacc>
	else if (__tmp > 65535)
    3034:	69 a9       	ldd	r22, Y+49	; 0x31
    3036:	7a a9       	ldd	r23, Y+50	; 0x32
    3038:	8b a9       	ldd	r24, Y+51	; 0x33
    303a:	9c a9       	ldd	r25, Y+52	; 0x34
    303c:	20 e0       	ldi	r18, 0x00	; 0
    303e:	3f ef       	ldi	r19, 0xFF	; 255
    3040:	4f e7       	ldi	r20, 0x7F	; 127
    3042:	57 e4       	ldi	r21, 0x47	; 71
    3044:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3048:	18 16       	cp	r1, r24
    304a:	4c f5       	brge	.+82     	; 0x309e <main+0xab8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    304c:	6d a9       	ldd	r22, Y+53	; 0x35
    304e:	7e a9       	ldd	r23, Y+54	; 0x36
    3050:	8f a9       	ldd	r24, Y+55	; 0x37
    3052:	98 ad       	ldd	r25, Y+56	; 0x38
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	40 e2       	ldi	r20, 0x20	; 32
    305a:	51 e4       	ldi	r21, 0x41	; 65
    305c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3060:	dc 01       	movw	r26, r24
    3062:	cb 01       	movw	r24, r22
    3064:	bc 01       	movw	r22, r24
    3066:	cd 01       	movw	r24, r26
    3068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306c:	dc 01       	movw	r26, r24
    306e:	cb 01       	movw	r24, r22
    3070:	98 ab       	std	Y+48, r25	; 0x30
    3072:	8f a7       	std	Y+47, r24	; 0x2f
    3074:	0f c0       	rjmp	.+30     	; 0x3094 <main+0xaae>
    3076:	88 ec       	ldi	r24, 0xC8	; 200
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	9e a7       	std	Y+46, r25	; 0x2e
    307c:	8d a7       	std	Y+45, r24	; 0x2d
    307e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3080:	9e a5       	ldd	r25, Y+46	; 0x2e
    3082:	01 97       	sbiw	r24, 0x01	; 1
    3084:	f1 f7       	brne	.-4      	; 0x3082 <main+0xa9c>
    3086:	9e a7       	std	Y+46, r25	; 0x2e
    3088:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    308a:	8f a5       	ldd	r24, Y+47	; 0x2f
    308c:	98 a9       	ldd	r25, Y+48	; 0x30
    308e:	01 97       	sbiw	r24, 0x01	; 1
    3090:	98 ab       	std	Y+48, r25	; 0x30
    3092:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3094:	8f a5       	ldd	r24, Y+47	; 0x2f
    3096:	98 a9       	ldd	r25, Y+48	; 0x30
    3098:	00 97       	sbiw	r24, 0x00	; 0
    309a:	69 f7       	brne	.-38     	; 0x3076 <main+0xa90>
    309c:	14 c0       	rjmp	.+40     	; 0x30c6 <main+0xae0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    309e:	69 a9       	ldd	r22, Y+49	; 0x31
    30a0:	7a a9       	ldd	r23, Y+50	; 0x32
    30a2:	8b a9       	ldd	r24, Y+51	; 0x33
    30a4:	9c a9       	ldd	r25, Y+52	; 0x34
    30a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30aa:	dc 01       	movw	r26, r24
    30ac:	cb 01       	movw	r24, r22
    30ae:	98 ab       	std	Y+48, r25	; 0x30
    30b0:	8f a7       	std	Y+47, r24	; 0x2f
    30b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    30b4:	98 a9       	ldd	r25, Y+48	; 0x30
    30b6:	9c a7       	std	Y+44, r25	; 0x2c
    30b8:	8b a7       	std	Y+43, r24	; 0x2b
    30ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    30bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    30be:	01 97       	sbiw	r24, 0x01	; 1
    30c0:	f1 f7       	brne	.-4      	; 0x30be <main+0xad8>
    30c2:	9c a7       	std	Y+44, r25	; 0x2c
    30c4:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(2000);
					TMR1_voidOCR1A(999);
    30c6:	87 ee       	ldi	r24, 0xE7	; 231
    30c8:	93 e0       	ldi	r25, 0x03	; 3
    30ca:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <TMR1_voidOCR1A>
					// DIO_voidSetPinValue(DIO_PORTD, DIO_PIN5,1);
					//_delay_ms(2000);
					//DIO_voidSetPinValue(DIO_PORTD, DIO_PIN5,0);
					LCD_voidSendCommand(CLEAR);
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_voidSendCommand>
    30d4:	80 e0       	ldi	r24, 0x00	; 0
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	a0 e0       	ldi	r26, 0x00	; 0
    30da:	b0 e4       	ldi	r27, 0x40	; 64
    30dc:	8f a3       	std	Y+39, r24	; 0x27
    30de:	98 a7       	std	Y+40, r25	; 0x28
    30e0:	a9 a7       	std	Y+41, r26	; 0x29
    30e2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30e4:	6f a1       	ldd	r22, Y+39	; 0x27
    30e6:	78 a5       	ldd	r23, Y+40	; 0x28
    30e8:	89 a5       	ldd	r24, Y+41	; 0x29
    30ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    30ec:	20 e0       	ldi	r18, 0x00	; 0
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	4a ef       	ldi	r20, 0xFA	; 250
    30f2:	54 e4       	ldi	r21, 0x44	; 68
    30f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f8:	dc 01       	movw	r26, r24
    30fa:	cb 01       	movw	r24, r22
    30fc:	8b a3       	std	Y+35, r24	; 0x23
    30fe:	9c a3       	std	Y+36, r25	; 0x24
    3100:	ad a3       	std	Y+37, r26	; 0x25
    3102:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3104:	6b a1       	ldd	r22, Y+35	; 0x23
    3106:	7c a1       	ldd	r23, Y+36	; 0x24
    3108:	8d a1       	ldd	r24, Y+37	; 0x25
    310a:	9e a1       	ldd	r25, Y+38	; 0x26
    310c:	20 e0       	ldi	r18, 0x00	; 0
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	40 e8       	ldi	r20, 0x80	; 128
    3112:	5f e3       	ldi	r21, 0x3F	; 63
    3114:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3118:	88 23       	and	r24, r24
    311a:	2c f4       	brge	.+10     	; 0x3126 <main+0xb40>
		__ticks = 1;
    311c:	81 e0       	ldi	r24, 0x01	; 1
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	9a a3       	std	Y+34, r25	; 0x22
    3122:	89 a3       	std	Y+33, r24	; 0x21
    3124:	3f c0       	rjmp	.+126    	; 0x31a4 <main+0xbbe>
	else if (__tmp > 65535)
    3126:	6b a1       	ldd	r22, Y+35	; 0x23
    3128:	7c a1       	ldd	r23, Y+36	; 0x24
    312a:	8d a1       	ldd	r24, Y+37	; 0x25
    312c:	9e a1       	ldd	r25, Y+38	; 0x26
    312e:	20 e0       	ldi	r18, 0x00	; 0
    3130:	3f ef       	ldi	r19, 0xFF	; 255
    3132:	4f e7       	ldi	r20, 0x7F	; 127
    3134:	57 e4       	ldi	r21, 0x47	; 71
    3136:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    313a:	18 16       	cp	r1, r24
    313c:	4c f5       	brge	.+82     	; 0x3190 <main+0xbaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    313e:	6f a1       	ldd	r22, Y+39	; 0x27
    3140:	78 a5       	ldd	r23, Y+40	; 0x28
    3142:	89 a5       	ldd	r24, Y+41	; 0x29
    3144:	9a a5       	ldd	r25, Y+42	; 0x2a
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	40 e2       	ldi	r20, 0x20	; 32
    314c:	51 e4       	ldi	r21, 0x41	; 65
    314e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3152:	dc 01       	movw	r26, r24
    3154:	cb 01       	movw	r24, r22
    3156:	bc 01       	movw	r22, r24
    3158:	cd 01       	movw	r24, r26
    315a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315e:	dc 01       	movw	r26, r24
    3160:	cb 01       	movw	r24, r22
    3162:	9a a3       	std	Y+34, r25	; 0x22
    3164:	89 a3       	std	Y+33, r24	; 0x21
    3166:	0f c0       	rjmp	.+30     	; 0x3186 <main+0xba0>
    3168:	88 ec       	ldi	r24, 0xC8	; 200
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	98 a3       	std	Y+32, r25	; 0x20
    316e:	8f 8f       	std	Y+31, r24	; 0x1f
    3170:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3172:	98 a1       	ldd	r25, Y+32	; 0x20
    3174:	01 97       	sbiw	r24, 0x01	; 1
    3176:	f1 f7       	brne	.-4      	; 0x3174 <main+0xb8e>
    3178:	98 a3       	std	Y+32, r25	; 0x20
    317a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    317c:	89 a1       	ldd	r24, Y+33	; 0x21
    317e:	9a a1       	ldd	r25, Y+34	; 0x22
    3180:	01 97       	sbiw	r24, 0x01	; 1
    3182:	9a a3       	std	Y+34, r25	; 0x22
    3184:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3186:	89 a1       	ldd	r24, Y+33	; 0x21
    3188:	9a a1       	ldd	r25, Y+34	; 0x22
    318a:	00 97       	sbiw	r24, 0x00	; 0
    318c:	69 f7       	brne	.-38     	; 0x3168 <main+0xb82>
    318e:	14 c0       	rjmp	.+40     	; 0x31b8 <main+0xbd2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3190:	6b a1       	ldd	r22, Y+35	; 0x23
    3192:	7c a1       	ldd	r23, Y+36	; 0x24
    3194:	8d a1       	ldd	r24, Y+37	; 0x25
    3196:	9e a1       	ldd	r25, Y+38	; 0x26
    3198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    319c:	dc 01       	movw	r26, r24
    319e:	cb 01       	movw	r24, r22
    31a0:	9a a3       	std	Y+34, r25	; 0x22
    31a2:	89 a3       	std	Y+33, r24	; 0x21
    31a4:	89 a1       	ldd	r24, Y+33	; 0x21
    31a6:	9a a1       	ldd	r25, Y+34	; 0x22
    31a8:	9e 8f       	std	Y+30, r25	; 0x1e
    31aa:	8d 8f       	std	Y+29, r24	; 0x1d
    31ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31b0:	01 97       	sbiw	r24, 0x01	; 1
    31b2:	f1 f7       	brne	.-4      	; 0x31b0 <main+0xbca>
    31b4:	9e 8f       	std	Y+30, r25	; 0x1e
    31b6:	8d 8f       	std	Y+29, r24	; 0x1d
				    _delay_ms(2);
	               LCD_voidSendString("Enter password");
    31b8:	8a e7       	ldi	r24, 0x7A	; 122
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <LCD_voidSendString>
    31c0:	ef c0       	rjmp	.+478    	; 0x33a0 <main+0xdba>

				else
				{


					  LCD_voidSendString("WRONG PASS");
    31c2:	89 e8       	ldi	r24, 0x89	; 137
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <LCD_voidSendString>
    31ca:	80 e0       	ldi	r24, 0x00	; 0
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	aa ef       	ldi	r26, 0xFA	; 250
    31d0:	b3 e4       	ldi	r27, 0x43	; 67
    31d2:	89 8f       	std	Y+25, r24	; 0x19
    31d4:	9a 8f       	std	Y+26, r25	; 0x1a
    31d6:	ab 8f       	std	Y+27, r26	; 0x1b
    31d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31da:	69 8d       	ldd	r22, Y+25	; 0x19
    31dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31e2:	20 e0       	ldi	r18, 0x00	; 0
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	4a ef       	ldi	r20, 0xFA	; 250
    31e8:	54 e4       	ldi	r21, 0x44	; 68
    31ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ee:	dc 01       	movw	r26, r24
    31f0:	cb 01       	movw	r24, r22
    31f2:	8d 8b       	std	Y+21, r24	; 0x15
    31f4:	9e 8b       	std	Y+22, r25	; 0x16
    31f6:	af 8b       	std	Y+23, r26	; 0x17
    31f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31fa:	6d 89       	ldd	r22, Y+21	; 0x15
    31fc:	7e 89       	ldd	r23, Y+22	; 0x16
    31fe:	8f 89       	ldd	r24, Y+23	; 0x17
    3200:	98 8d       	ldd	r25, Y+24	; 0x18
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	40 e8       	ldi	r20, 0x80	; 128
    3208:	5f e3       	ldi	r21, 0x3F	; 63
    320a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    320e:	88 23       	and	r24, r24
    3210:	2c f4       	brge	.+10     	; 0x321c <main+0xc36>
		__ticks = 1;
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	9c 8b       	std	Y+20, r25	; 0x14
    3218:	8b 8b       	std	Y+19, r24	; 0x13
    321a:	3f c0       	rjmp	.+126    	; 0x329a <main+0xcb4>
	else if (__tmp > 65535)
    321c:	6d 89       	ldd	r22, Y+21	; 0x15
    321e:	7e 89       	ldd	r23, Y+22	; 0x16
    3220:	8f 89       	ldd	r24, Y+23	; 0x17
    3222:	98 8d       	ldd	r25, Y+24	; 0x18
    3224:	20 e0       	ldi	r18, 0x00	; 0
    3226:	3f ef       	ldi	r19, 0xFF	; 255
    3228:	4f e7       	ldi	r20, 0x7F	; 127
    322a:	57 e4       	ldi	r21, 0x47	; 71
    322c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3230:	18 16       	cp	r1, r24
    3232:	4c f5       	brge	.+82     	; 0x3286 <main+0xca0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3234:	69 8d       	ldd	r22, Y+25	; 0x19
    3236:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3238:	8b 8d       	ldd	r24, Y+27	; 0x1b
    323a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	40 e2       	ldi	r20, 0x20	; 32
    3242:	51 e4       	ldi	r21, 0x41	; 65
    3244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3248:	dc 01       	movw	r26, r24
    324a:	cb 01       	movw	r24, r22
    324c:	bc 01       	movw	r22, r24
    324e:	cd 01       	movw	r24, r26
    3250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	9c 8b       	std	Y+20, r25	; 0x14
    325a:	8b 8b       	std	Y+19, r24	; 0x13
    325c:	0f c0       	rjmp	.+30     	; 0x327c <main+0xc96>
    325e:	88 ec       	ldi	r24, 0xC8	; 200
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	9a 8b       	std	Y+18, r25	; 0x12
    3264:	89 8b       	std	Y+17, r24	; 0x11
    3266:	89 89       	ldd	r24, Y+17	; 0x11
    3268:	9a 89       	ldd	r25, Y+18	; 0x12
    326a:	01 97       	sbiw	r24, 0x01	; 1
    326c:	f1 f7       	brne	.-4      	; 0x326a <main+0xc84>
    326e:	9a 8b       	std	Y+18, r25	; 0x12
    3270:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3272:	8b 89       	ldd	r24, Y+19	; 0x13
    3274:	9c 89       	ldd	r25, Y+20	; 0x14
    3276:	01 97       	sbiw	r24, 0x01	; 1
    3278:	9c 8b       	std	Y+20, r25	; 0x14
    327a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    327c:	8b 89       	ldd	r24, Y+19	; 0x13
    327e:	9c 89       	ldd	r25, Y+20	; 0x14
    3280:	00 97       	sbiw	r24, 0x00	; 0
    3282:	69 f7       	brne	.-38     	; 0x325e <main+0xc78>
    3284:	14 c0       	rjmp	.+40     	; 0x32ae <main+0xcc8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3286:	6d 89       	ldd	r22, Y+21	; 0x15
    3288:	7e 89       	ldd	r23, Y+22	; 0x16
    328a:	8f 89       	ldd	r24, Y+23	; 0x17
    328c:	98 8d       	ldd	r25, Y+24	; 0x18
    328e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3292:	dc 01       	movw	r26, r24
    3294:	cb 01       	movw	r24, r22
    3296:	9c 8b       	std	Y+20, r25	; 0x14
    3298:	8b 8b       	std	Y+19, r24	; 0x13
    329a:	8b 89       	ldd	r24, Y+19	; 0x13
    329c:	9c 89       	ldd	r25, Y+20	; 0x14
    329e:	98 8b       	std	Y+16, r25	; 0x10
    32a0:	8f 87       	std	Y+15, r24	; 0x0f
    32a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    32a4:	98 89       	ldd	r25, Y+16	; 0x10
    32a6:	01 97       	sbiw	r24, 0x01	; 1
    32a8:	f1 f7       	brne	.-4      	; 0x32a6 <main+0xcc0>
    32aa:	98 8b       	std	Y+16, r25	; 0x10
    32ac:	8f 87       	std	Y+15, r24	; 0x0f
					  _delay_ms(500);
					  LCD_voidSendCommand(CLEAR);
    32ae:	81 e0       	ldi	r24, 0x01	; 1
    32b0:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_voidSendCommand>
    32b4:	80 e0       	ldi	r24, 0x00	; 0
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	a0 e0       	ldi	r26, 0x00	; 0
    32ba:	b0 e4       	ldi	r27, 0x40	; 64
    32bc:	8b 87       	std	Y+11, r24	; 0x0b
    32be:	9c 87       	std	Y+12, r25	; 0x0c
    32c0:	ad 87       	std	Y+13, r26	; 0x0d
    32c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    32c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    32c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    32ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    32cc:	20 e0       	ldi	r18, 0x00	; 0
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	4a ef       	ldi	r20, 0xFA	; 250
    32d2:	54 e4       	ldi	r21, 0x44	; 68
    32d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d8:	dc 01       	movw	r26, r24
    32da:	cb 01       	movw	r24, r22
    32dc:	8f 83       	std	Y+7, r24	; 0x07
    32de:	98 87       	std	Y+8, r25	; 0x08
    32e0:	a9 87       	std	Y+9, r26	; 0x09
    32e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32e4:	6f 81       	ldd	r22, Y+7	; 0x07
    32e6:	78 85       	ldd	r23, Y+8	; 0x08
    32e8:	89 85       	ldd	r24, Y+9	; 0x09
    32ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	40 e8       	ldi	r20, 0x80	; 128
    32f2:	5f e3       	ldi	r21, 0x3F	; 63
    32f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32f8:	88 23       	and	r24, r24
    32fa:	2c f4       	brge	.+10     	; 0x3306 <main+0xd20>
		__ticks = 1;
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	9e 83       	std	Y+6, r25	; 0x06
    3302:	8d 83       	std	Y+5, r24	; 0x05
    3304:	3f c0       	rjmp	.+126    	; 0x3384 <main+0xd9e>
	else if (__tmp > 65535)
    3306:	6f 81       	ldd	r22, Y+7	; 0x07
    3308:	78 85       	ldd	r23, Y+8	; 0x08
    330a:	89 85       	ldd	r24, Y+9	; 0x09
    330c:	9a 85       	ldd	r25, Y+10	; 0x0a
    330e:	20 e0       	ldi	r18, 0x00	; 0
    3310:	3f ef       	ldi	r19, 0xFF	; 255
    3312:	4f e7       	ldi	r20, 0x7F	; 127
    3314:	57 e4       	ldi	r21, 0x47	; 71
    3316:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    331a:	18 16       	cp	r1, r24
    331c:	4c f5       	brge	.+82     	; 0x3370 <main+0xd8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    331e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3320:	7c 85       	ldd	r23, Y+12	; 0x0c
    3322:	8d 85       	ldd	r24, Y+13	; 0x0d
    3324:	9e 85       	ldd	r25, Y+14	; 0x0e
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	40 e2       	ldi	r20, 0x20	; 32
    332c:	51 e4       	ldi	r21, 0x41	; 65
    332e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3332:	dc 01       	movw	r26, r24
    3334:	cb 01       	movw	r24, r22
    3336:	bc 01       	movw	r22, r24
    3338:	cd 01       	movw	r24, r26
    333a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    333e:	dc 01       	movw	r26, r24
    3340:	cb 01       	movw	r24, r22
    3342:	9e 83       	std	Y+6, r25	; 0x06
    3344:	8d 83       	std	Y+5, r24	; 0x05
    3346:	0f c0       	rjmp	.+30     	; 0x3366 <main+0xd80>
    3348:	88 ec       	ldi	r24, 0xC8	; 200
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	9c 83       	std	Y+4, r25	; 0x04
    334e:	8b 83       	std	Y+3, r24	; 0x03
    3350:	8b 81       	ldd	r24, Y+3	; 0x03
    3352:	9c 81       	ldd	r25, Y+4	; 0x04
    3354:	01 97       	sbiw	r24, 0x01	; 1
    3356:	f1 f7       	brne	.-4      	; 0x3354 <main+0xd6e>
    3358:	9c 83       	std	Y+4, r25	; 0x04
    335a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    335c:	8d 81       	ldd	r24, Y+5	; 0x05
    335e:	9e 81       	ldd	r25, Y+6	; 0x06
    3360:	01 97       	sbiw	r24, 0x01	; 1
    3362:	9e 83       	std	Y+6, r25	; 0x06
    3364:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3366:	8d 81       	ldd	r24, Y+5	; 0x05
    3368:	9e 81       	ldd	r25, Y+6	; 0x06
    336a:	00 97       	sbiw	r24, 0x00	; 0
    336c:	69 f7       	brne	.-38     	; 0x3348 <main+0xd62>
    336e:	14 c0       	rjmp	.+40     	; 0x3398 <main+0xdb2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3370:	6f 81       	ldd	r22, Y+7	; 0x07
    3372:	78 85       	ldd	r23, Y+8	; 0x08
    3374:	89 85       	ldd	r24, Y+9	; 0x09
    3376:	9a 85       	ldd	r25, Y+10	; 0x0a
    3378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    337c:	dc 01       	movw	r26, r24
    337e:	cb 01       	movw	r24, r22
    3380:	9e 83       	std	Y+6, r25	; 0x06
    3382:	8d 83       	std	Y+5, r24	; 0x05
    3384:	8d 81       	ldd	r24, Y+5	; 0x05
    3386:	9e 81       	ldd	r25, Y+6	; 0x06
    3388:	9a 83       	std	Y+2, r25	; 0x02
    338a:	89 83       	std	Y+1, r24	; 0x01
    338c:	89 81       	ldd	r24, Y+1	; 0x01
    338e:	9a 81       	ldd	r25, Y+2	; 0x02
    3390:	01 97       	sbiw	r24, 0x01	; 1
    3392:	f1 f7       	brne	.-4      	; 0x3390 <main+0xdaa>
    3394:	9a 83       	std	Y+2, r25	; 0x02
    3396:	89 83       	std	Y+1, r24	; 0x01
					  _delay_ms(2);
					LCD_voidSendString("TRY AGAIN:");
    3398:	84 e9       	ldi	r24, 0x94	; 148
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <LCD_voidSendString>


				}

				// Reset variables to start a new loop (Ask for password again)
				i = 0;
    33a0:	fe 01       	movw	r30, r28
    33a2:	e1 57       	subi	r30, 0x71	; 113
    33a4:	ff 4f       	sbci	r31, 0xFF	; 255
    33a6:	10 82       	st	Z, r1
				wrong = 0;
    33a8:	fe 01       	movw	r30, r28
    33aa:	e2 57       	subi	r30, 0x72	; 114
    33ac:	ff 4f       	sbci	r31, 0xFF	; 255
    33ae:	10 82       	st	Z, r1
    33b0:	9a c9       	rjmp	.-3276   	; 0x26e6 <main+0x100>

000033b2 <__udivmodsi4>:
    33b2:	a1 e2       	ldi	r26, 0x21	; 33
    33b4:	1a 2e       	mov	r1, r26
    33b6:	aa 1b       	sub	r26, r26
    33b8:	bb 1b       	sub	r27, r27
    33ba:	fd 01       	movw	r30, r26
    33bc:	0d c0       	rjmp	.+26     	; 0x33d8 <__udivmodsi4_ep>

000033be <__udivmodsi4_loop>:
    33be:	aa 1f       	adc	r26, r26
    33c0:	bb 1f       	adc	r27, r27
    33c2:	ee 1f       	adc	r30, r30
    33c4:	ff 1f       	adc	r31, r31
    33c6:	a2 17       	cp	r26, r18
    33c8:	b3 07       	cpc	r27, r19
    33ca:	e4 07       	cpc	r30, r20
    33cc:	f5 07       	cpc	r31, r21
    33ce:	20 f0       	brcs	.+8      	; 0x33d8 <__udivmodsi4_ep>
    33d0:	a2 1b       	sub	r26, r18
    33d2:	b3 0b       	sbc	r27, r19
    33d4:	e4 0b       	sbc	r30, r20
    33d6:	f5 0b       	sbc	r31, r21

000033d8 <__udivmodsi4_ep>:
    33d8:	66 1f       	adc	r22, r22
    33da:	77 1f       	adc	r23, r23
    33dc:	88 1f       	adc	r24, r24
    33de:	99 1f       	adc	r25, r25
    33e0:	1a 94       	dec	r1
    33e2:	69 f7       	brne	.-38     	; 0x33be <__udivmodsi4_loop>
    33e4:	60 95       	com	r22
    33e6:	70 95       	com	r23
    33e8:	80 95       	com	r24
    33ea:	90 95       	com	r25
    33ec:	9b 01       	movw	r18, r22
    33ee:	ac 01       	movw	r20, r24
    33f0:	bd 01       	movw	r22, r26
    33f2:	cf 01       	movw	r24, r30
    33f4:	08 95       	ret

000033f6 <__prologue_saves__>:
    33f6:	2f 92       	push	r2
    33f8:	3f 92       	push	r3
    33fa:	4f 92       	push	r4
    33fc:	5f 92       	push	r5
    33fe:	6f 92       	push	r6
    3400:	7f 92       	push	r7
    3402:	8f 92       	push	r8
    3404:	9f 92       	push	r9
    3406:	af 92       	push	r10
    3408:	bf 92       	push	r11
    340a:	cf 92       	push	r12
    340c:	df 92       	push	r13
    340e:	ef 92       	push	r14
    3410:	ff 92       	push	r15
    3412:	0f 93       	push	r16
    3414:	1f 93       	push	r17
    3416:	cf 93       	push	r28
    3418:	df 93       	push	r29
    341a:	cd b7       	in	r28, 0x3d	; 61
    341c:	de b7       	in	r29, 0x3e	; 62
    341e:	ca 1b       	sub	r28, r26
    3420:	db 0b       	sbc	r29, r27
    3422:	0f b6       	in	r0, 0x3f	; 63
    3424:	f8 94       	cli
    3426:	de bf       	out	0x3e, r29	; 62
    3428:	0f be       	out	0x3f, r0	; 63
    342a:	cd bf       	out	0x3d, r28	; 61
    342c:	09 94       	ijmp

0000342e <__epilogue_restores__>:
    342e:	2a 88       	ldd	r2, Y+18	; 0x12
    3430:	39 88       	ldd	r3, Y+17	; 0x11
    3432:	48 88       	ldd	r4, Y+16	; 0x10
    3434:	5f 84       	ldd	r5, Y+15	; 0x0f
    3436:	6e 84       	ldd	r6, Y+14	; 0x0e
    3438:	7d 84       	ldd	r7, Y+13	; 0x0d
    343a:	8c 84       	ldd	r8, Y+12	; 0x0c
    343c:	9b 84       	ldd	r9, Y+11	; 0x0b
    343e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3440:	b9 84       	ldd	r11, Y+9	; 0x09
    3442:	c8 84       	ldd	r12, Y+8	; 0x08
    3444:	df 80       	ldd	r13, Y+7	; 0x07
    3446:	ee 80       	ldd	r14, Y+6	; 0x06
    3448:	fd 80       	ldd	r15, Y+5	; 0x05
    344a:	0c 81       	ldd	r16, Y+4	; 0x04
    344c:	1b 81       	ldd	r17, Y+3	; 0x03
    344e:	aa 81       	ldd	r26, Y+2	; 0x02
    3450:	b9 81       	ldd	r27, Y+1	; 0x01
    3452:	ce 0f       	add	r28, r30
    3454:	d1 1d       	adc	r29, r1
    3456:	0f b6       	in	r0, 0x3f	; 63
    3458:	f8 94       	cli
    345a:	de bf       	out	0x3e, r29	; 62
    345c:	0f be       	out	0x3f, r0	; 63
    345e:	cd bf       	out	0x3d, r28	; 61
    3460:	ed 01       	movw	r28, r26
    3462:	08 95       	ret

00003464 <_exit>:
    3464:	f8 94       	cli

00003466 <__stop_program>:
    3466:	ff cf       	rjmp	.-2      	; 0x3466 <__stop_program>
